### YamlMime:ManagedReference
items:
- uid: "com.microsoft.signalr.HttpClient"
  id: "HttpClient"
  parent: "com.microsoft.signalr"
  children:
  - "com.microsoft.signalr.HttpClient.HttpClient()"
  - "com.microsoft.signalr.HttpClient.createWebSocket(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  - "com.microsoft.signalr.HttpClient.delete(java.lang.String)"
  - "com.microsoft.signalr.HttpClient.delete(java.lang.String,com.microsoft.signalr.HttpRequest)"
  - "com.microsoft.signalr.HttpClient.get(java.lang.String)"
  - "com.microsoft.signalr.HttpClient.get(java.lang.String,com.microsoft.signalr.HttpRequest)"
  - "com.microsoft.signalr.HttpClient.post(java.lang.String)"
  - "com.microsoft.signalr.HttpClient.post(java.lang.String,com.microsoft.signalr.HttpRequest)"
  - "com.microsoft.signalr.HttpClient.send(com.microsoft.signalr.HttpRequest)"
  langs:
  - "java"
  name: "HttpClient"
  nameWithType: "HttpClient"
  fullName: "com.microsoft.signalr.HttpClient"
  type: "Class"
  package: "com.microsoft.signalr"
  syntax:
    content: "abstract class HttpClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.signalr.HttpClient.HttpClient()"
  id: "HttpClient()"
  parent: "com.microsoft.signalr.HttpClient"
  langs:
  - "java"
  name: "HttpClient()"
  nameWithType: "HttpClient.HttpClient()"
  fullName: "com.microsoft.signalr.HttpClient.HttpClient()"
  overload: "com.microsoft.signalr.HttpClient.HttpClient*"
  type: "Constructor"
  package: "com.microsoft.signalr"
  syntax:
    content: " HttpClient()"
- uid: "com.microsoft.signalr.HttpClient.createWebSocket(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  id: "createWebSocket(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.microsoft.signalr.HttpClient"
  langs:
  - "java"
  name: "createWebSocket(String url, Map<String,String> headers)"
  nameWithType: "HttpClient.createWebSocket(String url, Map<String,String> headers)"
  fullName: "com.microsoft.signalr.HttpClient.createWebSocket(String url, Map<String,String> headers)"
  overload: "com.microsoft.signalr.HttpClient.createWebSocket*"
  type: "Method"
  package: "com.microsoft.signalr"
  syntax:
    content: "public abstract WebSocketWrapper createWebSocket(String url, Map<String,String> headers)"
    parameters:
    - id: "url"
      type: "java.lang.String"
    - id: "headers"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    return:
      type: "com.microsoft.signalr.WebSocketWrapper"
- uid: "com.microsoft.signalr.HttpClient.delete(java.lang.String)"
  id: "delete(java.lang.String)"
  parent: "com.microsoft.signalr.HttpClient"
  langs:
  - "java"
  name: "delete(String url)"
  nameWithType: "HttpClient.delete(String url)"
  fullName: "com.microsoft.signalr.HttpClient.delete(String url)"
  overload: "com.microsoft.signalr.HttpClient.delete*"
  type: "Method"
  package: "com.microsoft.signalr"
  syntax:
    content: "public Single<HttpResponse> delete(String url)"
    parameters:
    - id: "url"
      type: "java.lang.String"
    return:
      type: "io.reactivex.Single<com.microsoft.signalr.HttpResponse>"
- uid: "com.microsoft.signalr.HttpClient.delete(java.lang.String,com.microsoft.signalr.HttpRequest)"
  id: "delete(java.lang.String,com.microsoft.signalr.HttpRequest)"
  parent: "com.microsoft.signalr.HttpClient"
  langs:
  - "java"
  name: "delete(String url, HttpRequest options)"
  nameWithType: "HttpClient.delete(String url, HttpRequest options)"
  fullName: "com.microsoft.signalr.HttpClient.delete(String url, HttpRequest options)"
  overload: "com.microsoft.signalr.HttpClient.delete*"
  type: "Method"
  package: "com.microsoft.signalr"
  syntax:
    content: "public Single<HttpResponse> delete(String url, HttpRequest options)"
    parameters:
    - id: "url"
      type: "java.lang.String"
    - id: "options"
      type: "com.microsoft.signalr.HttpRequest"
    return:
      type: "io.reactivex.Single<com.microsoft.signalr.HttpResponse>"
- uid: "com.microsoft.signalr.HttpClient.get(java.lang.String)"
  id: "get(java.lang.String)"
  parent: "com.microsoft.signalr.HttpClient"
  langs:
  - "java"
  name: "get(String url)"
  nameWithType: "HttpClient.get(String url)"
  fullName: "com.microsoft.signalr.HttpClient.get(String url)"
  overload: "com.microsoft.signalr.HttpClient.get*"
  type: "Method"
  package: "com.microsoft.signalr"
  syntax:
    content: "public Single<HttpResponse> get(String url)"
    parameters:
    - id: "url"
      type: "java.lang.String"
    return:
      type: "io.reactivex.Single<com.microsoft.signalr.HttpResponse>"
- uid: "com.microsoft.signalr.HttpClient.get(java.lang.String,com.microsoft.signalr.HttpRequest)"
  id: "get(java.lang.String,com.microsoft.signalr.HttpRequest)"
  parent: "com.microsoft.signalr.HttpClient"
  langs:
  - "java"
  name: "get(String url, HttpRequest options)"
  nameWithType: "HttpClient.get(String url, HttpRequest options)"
  fullName: "com.microsoft.signalr.HttpClient.get(String url, HttpRequest options)"
  overload: "com.microsoft.signalr.HttpClient.get*"
  type: "Method"
  package: "com.microsoft.signalr"
  syntax:
    content: "public Single<HttpResponse> get(String url, HttpRequest options)"
    parameters:
    - id: "url"
      type: "java.lang.String"
    - id: "options"
      type: "com.microsoft.signalr.HttpRequest"
    return:
      type: "io.reactivex.Single<com.microsoft.signalr.HttpResponse>"
- uid: "com.microsoft.signalr.HttpClient.post(java.lang.String)"
  id: "post(java.lang.String)"
  parent: "com.microsoft.signalr.HttpClient"
  langs:
  - "java"
  name: "post(String url)"
  nameWithType: "HttpClient.post(String url)"
  fullName: "com.microsoft.signalr.HttpClient.post(String url)"
  overload: "com.microsoft.signalr.HttpClient.post*"
  type: "Method"
  package: "com.microsoft.signalr"
  syntax:
    content: "public Single<HttpResponse> post(String url)"
    parameters:
    - id: "url"
      type: "java.lang.String"
    return:
      type: "io.reactivex.Single<com.microsoft.signalr.HttpResponse>"
- uid: "com.microsoft.signalr.HttpClient.post(java.lang.String,com.microsoft.signalr.HttpRequest)"
  id: "post(java.lang.String,com.microsoft.signalr.HttpRequest)"
  parent: "com.microsoft.signalr.HttpClient"
  langs:
  - "java"
  name: "post(String url, HttpRequest options)"
  nameWithType: "HttpClient.post(String url, HttpRequest options)"
  fullName: "com.microsoft.signalr.HttpClient.post(String url, HttpRequest options)"
  overload: "com.microsoft.signalr.HttpClient.post*"
  type: "Method"
  package: "com.microsoft.signalr"
  syntax:
    content: "public Single<HttpResponse> post(String url, HttpRequest options)"
    parameters:
    - id: "url"
      type: "java.lang.String"
    - id: "options"
      type: "com.microsoft.signalr.HttpRequest"
    return:
      type: "io.reactivex.Single<com.microsoft.signalr.HttpResponse>"
- uid: "com.microsoft.signalr.HttpClient.send(com.microsoft.signalr.HttpRequest)"
  id: "send(com.microsoft.signalr.HttpRequest)"
  parent: "com.microsoft.signalr.HttpClient"
  langs:
  - "java"
  name: "send(HttpRequest request)"
  nameWithType: "HttpClient.send(HttpRequest request)"
  fullName: "com.microsoft.signalr.HttpClient.send(HttpRequest request)"
  overload: "com.microsoft.signalr.HttpClient.send*"
  type: "Method"
  package: "com.microsoft.signalr"
  syntax:
    content: "public abstract Single<HttpResponse> send(HttpRequest request)"
    parameters:
    - id: "request"
      type: "com.microsoft.signalr.HttpRequest"
    return:
      type: "io.reactivex.Single<com.microsoft.signalr.HttpResponse>"
references:
- uid: "com.microsoft.signalr.HttpClient.HttpClient*"
  name: "HttpClient"
  nameWithType: "HttpClient.HttpClient"
  fullName: "com.microsoft.signalr.HttpClient.HttpClient"
  package: "com.microsoft.signalr"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "io.reactivex.Single<com.microsoft.signalr.HttpResponse>"
  spec.java:
  - uid: "io.reactivex.Single"
    name: "Single"
    fullName: "io.reactivex.Single"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.signalr.HttpResponse"
    name: "HttpResponse"
    fullName: "com.microsoft.signalr.HttpResponse"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.signalr.HttpClient.get*"
  name: "get"
  nameWithType: "HttpClient.get"
  fullName: "com.microsoft.signalr.HttpClient.get"
  package: "com.microsoft.signalr"
- uid: "com.microsoft.signalr.HttpRequest"
  name: "HttpRequest"
  nameWithType: "HttpRequest"
  fullName: "com.microsoft.signalr.HttpRequest"
- uid: "com.microsoft.signalr.HttpClient.post*"
  name: "post"
  nameWithType: "HttpClient.post"
  fullName: "com.microsoft.signalr.HttpClient.post"
  package: "com.microsoft.signalr"
- uid: "com.microsoft.signalr.HttpClient.delete*"
  name: "delete"
  nameWithType: "HttpClient.delete"
  fullName: "com.microsoft.signalr.HttpClient.delete"
  package: "com.microsoft.signalr"
- uid: "com.microsoft.signalr.HttpClient.send*"
  name: "send"
  nameWithType: "HttpClient.send"
  fullName: "com.microsoft.signalr.HttpClient.send"
  package: "com.microsoft.signalr"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.signalr.WebSocketWrapper"
  name: "WebSocketWrapper"
  nameWithType: "WebSocketWrapper"
  fullName: "com.microsoft.signalr.WebSocketWrapper"
- uid: "com.microsoft.signalr.HttpClient.createWebSocket*"
  name: "createWebSocket"
  nameWithType: "HttpClient.createWebSocket"
  fullName: "com.microsoft.signalr.HttpClient.createWebSocket"
  package: "com.microsoft.signalr"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.microsoft.signalr.HttpResponse"
  name: "HttpResponse"
  nameWithType: "HttpResponse"
  fullName: "com.microsoft.signalr.HttpResponse"
- uid: "io.reactivex.Single"
  name: "Single"
  nameWithType: "Single"
  fullName: "io.reactivex.Single"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
