### YamlMime:ManagedReference
items:
- uid: "com.azure.messaging.eventhubs.EventHubClient"
  id: "EventHubClient"
  parent: "com.azure.messaging.eventhubs"
  children:
  - "com.azure.messaging.eventhubs.EventHubClient.EventHubClient(com.azure.messaging.eventhubs.EventHubAsyncClient,com.azure.core.amqp.RetryOptions)"
  - "com.azure.messaging.eventhubs.EventHubClient.close()"
  - "com.azure.messaging.eventhubs.EventHubClient.createConsumer(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition)"
  - "com.azure.messaging.eventhubs.EventHubClient.createConsumer(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition,com.azure.messaging.eventhubs.models.EventHubConsumerOptions)"
  - "com.azure.messaging.eventhubs.EventHubClient.createProducer()"
  - "com.azure.messaging.eventhubs.EventHubClient.getPartitionIds()"
  - "com.azure.messaging.eventhubs.EventHubClient.getPartitionProperties(java.lang.String)"
  - "com.azure.messaging.eventhubs.EventHubClient.getProperties()"
  langs:
  - "java"
  name: "EventHubClient"
  nameWithType: "EventHubClient"
  fullName: "com.azure.messaging.eventhubs.EventHubClient"
  type: "Class"
  package: "com.azure.messaging.eventhubs"
  summary: "A **synchronous** client that is the main point of interaction with Azure Event Hubs. It connects to a specific Event Hub and allows operations for sending event data, receiving data, and inspecting the Event Hub's metadata."
  syntax:
    content: " class EventHubClient implements Closeable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Closeable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.messaging.eventhubs.EventHubClient.EventHubClient(com.azure.messaging.eventhubs.EventHubAsyncClient,com.azure.core.amqp.RetryOptions)"
  id: "EventHubClient(com.azure.messaging.eventhubs.EventHubAsyncClient,com.azure.core.amqp.RetryOptions)"
  parent: "com.azure.messaging.eventhubs.EventHubClient"
  langs:
  - "java"
  name: "EventHubClient(EventHubAsyncClient client, RetryOptions retry)"
  nameWithType: "EventHubClient.EventHubClient(EventHubAsyncClient client, RetryOptions retry)"
  fullName: "com.azure.messaging.eventhubs.EventHubClient.EventHubClient(EventHubAsyncClient client, RetryOptions retry)"
  overload: "com.azure.messaging.eventhubs.EventHubClient.EventHubClient*"
  type: "Constructor"
  package: "com.azure.messaging.eventhubs"
  syntax:
    content: " EventHubClient(EventHubAsyncClient client, RetryOptions retry)"
    parameters:
    - id: "client"
      type: "com.azure.messaging.eventhubs.EventHubAsyncClient"
    - id: "retry"
      type: "com.azure.core.amqp.RetryOptions"
- uid: "com.azure.messaging.eventhubs.EventHubClient.close()"
  id: "close()"
  parent: "com.azure.messaging.eventhubs.EventHubClient"
  langs:
  - "java"
  name: "close()"
  nameWithType: "EventHubClient.close()"
  fullName: "com.azure.messaging.eventhubs.EventHubClient.close()"
  overload: "com.azure.messaging.eventhubs.EventHubClient.close*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "\\{@inheritDoc\\}"
  syntax:
    content: "public void close()"
- uid: "com.azure.messaging.eventhubs.EventHubClient.createConsumer(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition)"
  id: "createConsumer(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition)"
  parent: "com.azure.messaging.eventhubs.EventHubClient"
  langs:
  - "java"
  name: "createConsumer(String consumerGroup, EventPosition eventPosition)"
  nameWithType: "EventHubClient.createConsumer(String consumerGroup, EventPosition eventPosition)"
  fullName: "com.azure.messaging.eventhubs.EventHubClient.createConsumer(String consumerGroup, EventPosition eventPosition)"
  overload: "com.azure.messaging.eventhubs.EventHubClient.createConsumer*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Creates an Event Hub consumer responsible for reading <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> from a specific Event Hub partition, as a member of the specified consumer group, and begins reading events from the `eventPosition`. The consumer created is non-exclusive, allowing multiple consumers from the same consumer group to be actively reading events from the partition. These non-exclusive consumers are sometimes referred to as \"Non-epoch Consumers\"."
  syntax:
    content: " EventHubConsumerClient createConsumer(String consumerGroup, EventPosition eventPosition)"
    parameters:
    - id: "consumerGroup"
      type: "java.lang.String"
      description: "The name of the consumer group this consumer is associated with. Events are read in the\n     context of this group. The name of the consumer group that is created by default is <xref uid=\"com.azure.messaging.eventhubs.EventHubClientBuilder.DEFAULT_CONSUMER_GROUP_NAME\" data-throw-if-not-resolved=\"false\">\"$Default\"</xref>."
    - id: "eventPosition"
      type: "com.azure.messaging.eventhubs.models.EventPosition"
      description: "The position within the partition where the consumer should begin reading events."
    return:
      type: "com.azure.messaging.eventhubs.EventHubConsumerClient"
      description: "A new <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumerClient\" data-throw-if-not-resolved=\"false\">EventHubConsumerClient</xref> that receives events from the partition at the given position."
- uid: "com.azure.messaging.eventhubs.EventHubClient.createConsumer(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition,com.azure.messaging.eventhubs.models.EventHubConsumerOptions)"
  id: "createConsumer(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition,com.azure.messaging.eventhubs.models.EventHubConsumerOptions)"
  parent: "com.azure.messaging.eventhubs.EventHubClient"
  langs:
  - "java"
  name: "createConsumer(String consumerGroup, EventPosition eventPosition, EventHubConsumerOptions options)"
  nameWithType: "EventHubClient.createConsumer(String consumerGroup, EventPosition eventPosition, EventHubConsumerOptions options)"
  fullName: "com.azure.messaging.eventhubs.EventHubClient.createConsumer(String consumerGroup, EventPosition eventPosition, EventHubConsumerOptions options)"
  overload: "com.azure.messaging.eventhubs.EventHubClient.createConsumer*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Creates an Event Hub consumer responsible for reading <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> from a specific Event Hub partition, as a member of the configured consumer group, and begins reading events from the specified `eventPosition`.\n\nA consumer may be exclusive, which asserts ownership over the partition for the consumer group to ensure that only one consumer from that group is reading from the partition. These exclusive consumers are sometimes referred to as \"Epoch Consumers.\" A consumer may also be non-exclusive, allowing multiple consumers from the same consumer group to be actively reading events from the partition. These non-exclusive consumers are sometimes referred to as \"Non-epoch Consumers.\" Designating a consumer as exclusive may be specified in the `options`, by setting <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.setOwnerLevel(java.lang.Long)\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#setOwnerLevel(Long)</xref> to a non-null value. By default, consumers are created as non-exclusive."
  syntax:
    content: " EventHubConsumerClient createConsumer(String consumerGroup, EventPosition eventPosition, EventHubConsumerOptions options)"
    parameters:
    - id: "consumerGroup"
      type: "java.lang.String"
      description: "The name of the consumer group this consumer is associated with. Events are read in the\n     context of this group. The name of the consumer group that is created by default is <xref uid=\"com.azure.messaging.eventhubs.EventHubClientBuilder.DEFAULT_CONSUMER_GROUP_NAME\" data-throw-if-not-resolved=\"false\">\"$Default\"</xref>."
    - id: "eventPosition"
      type: "com.azure.messaging.eventhubs.models.EventPosition"
      description: "The position within the partition where the consumer should begin reading events."
    - id: "options"
      type: "com.azure.messaging.eventhubs.models.EventHubConsumerOptions"
      description: "The set of options to apply when creating the consumer."
    return:
      type: "com.azure.messaging.eventhubs.EventHubConsumerClient"
      description: "An new <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumerClient\" data-throw-if-not-resolved=\"false\">EventHubConsumerClient</xref> that receives events from the partition with all configured <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions</xref>."
- uid: "com.azure.messaging.eventhubs.EventHubClient.createProducer()"
  id: "createProducer()"
  parent: "com.azure.messaging.eventhubs.EventHubClient"
  langs:
  - "java"
  name: "createProducer()"
  nameWithType: "EventHubClient.createProducer()"
  fullName: "com.azure.messaging.eventhubs.EventHubClient.createProducer()"
  overload: "com.azure.messaging.eventhubs.EventHubClient.createProducer*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Creates an Event Hub producer responsible for transmitting <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> to the Event Hub, grouped together in batches. Event data is automatically routed to an available partition."
  syntax:
    content: " EventHubProducerClient createProducer()"
    return:
      type: "com.azure.messaging.eventhubs.EventHubProducerClient"
      description: "A new <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerClient\" data-throw-if-not-resolved=\"false\">EventHubProducerClient</xref>."
- uid: "com.azure.messaging.eventhubs.EventHubClient.getPartitionIds()"
  id: "getPartitionIds()"
  parent: "com.azure.messaging.eventhubs.EventHubClient"
  langs:
  - "java"
  name: "getPartitionIds()"
  nameWithType: "EventHubClient.getPartitionIds()"
  fullName: "com.azure.messaging.eventhubs.EventHubClient.getPartitionIds()"
  overload: "com.azure.messaging.eventhubs.EventHubClient.getPartitionIds*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Retrieves the identifiers for all the partitions of an Event Hub."
  syntax:
    content: " IterableStream<String> getPartitionIds()"
    return:
      type: "com.azure.core.util.IterableStream<java.lang.String>"
      description: "The identifiers for all partitions of an Event Hub."
- uid: "com.azure.messaging.eventhubs.EventHubClient.getPartitionProperties(java.lang.String)"
  id: "getPartitionProperties(java.lang.String)"
  parent: "com.azure.messaging.eventhubs.EventHubClient"
  langs:
  - "java"
  name: "getPartitionProperties(String partitionId)"
  nameWithType: "EventHubClient.getPartitionProperties(String partitionId)"
  fullName: "com.azure.messaging.eventhubs.EventHubClient.getPartitionProperties(String partitionId)"
  overload: "com.azure.messaging.eventhubs.EventHubClient.getPartitionProperties*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Retrieves information about a specific partition for an Event Hub, including elements that describe the available events in the partition event stream."
  syntax:
    content: " PartitionProperties getPartitionProperties(String partitionId)"
    parameters:
    - id: "partitionId"
      type: "java.lang.String"
      description: "The unique identifier of a partition associated with the Event Hub."
    return:
      type: "com.azure.messaging.eventhubs.PartitionProperties"
      description: "The information for the requested partition under the Event Hub this client is associated with."
- uid: "com.azure.messaging.eventhubs.EventHubClient.getProperties()"
  id: "getProperties()"
  parent: "com.azure.messaging.eventhubs.EventHubClient"
  langs:
  - "java"
  name: "getProperties()"
  nameWithType: "EventHubClient.getProperties()"
  fullName: "com.azure.messaging.eventhubs.EventHubClient.getProperties()"
  overload: "com.azure.messaging.eventhubs.EventHubClient.getProperties*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Retrieves information about an Event Hub, including the number of partitions present and their identifiers."
  syntax:
    content: " EventHubProperties getProperties()"
    return:
      type: "com.azure.messaging.eventhubs.EventHubProperties"
      description: "The set of information for the Event Hub that this client is associated with."
references:
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient"
  name: "EventHubAsyncClient"
  nameWithType: "EventHubAsyncClient"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient"
- uid: "com.azure.core.amqp.RetryOptions"
  spec.java:
  - uid: "com.azure.core.amqp.RetryOptions"
    name: "RetryOptions"
    fullName: "com.azure.core.amqp.RetryOptions"
- uid: "com.azure.messaging.eventhubs.EventHubClient.EventHubClient*"
  name: "EventHubClient"
  nameWithType: "EventHubClient.EventHubClient"
  fullName: "com.azure.messaging.eventhubs.EventHubClient.EventHubClient"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.EventHubProperties"
  name: "EventHubProperties"
  nameWithType: "EventHubProperties"
  fullName: "com.azure.messaging.eventhubs.EventHubProperties"
- uid: "com.azure.messaging.eventhubs.EventHubClient.getProperties*"
  name: "getProperties"
  nameWithType: "EventHubClient.getProperties"
  fullName: "com.azure.messaging.eventhubs.EventHubClient.getProperties"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.core.util.IterableStream<java.lang.String>"
  spec.java:
  - uid: "com.azure.core.util.IterableStream"
    name: "IterableStream"
    fullName: "com.azure.core.util.IterableStream"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubClient.getPartitionIds*"
  name: "getPartitionIds"
  nameWithType: "EventHubClient.getPartitionIds"
  fullName: "com.azure.messaging.eventhubs.EventHubClient.getPartitionIds"
  package: "com.azure.messaging.eventhubs"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.messaging.eventhubs.PartitionProperties"
  name: "PartitionProperties"
  nameWithType: "PartitionProperties"
  fullName: "com.azure.messaging.eventhubs.PartitionProperties"
- uid: "com.azure.messaging.eventhubs.EventHubClient.getPartitionProperties*"
  name: "getPartitionProperties"
  nameWithType: "EventHubClient.getPartitionProperties"
  fullName: "com.azure.messaging.eventhubs.EventHubClient.getPartitionProperties"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.EventHubProducerClient"
  name: "EventHubProducerClient"
  nameWithType: "EventHubProducerClient"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerClient"
- uid: "com.azure.messaging.eventhubs.EventHubClient.createProducer*"
  name: "createProducer"
  nameWithType: "EventHubClient.createProducer"
  fullName: "com.azure.messaging.eventhubs.EventHubClient.createProducer"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.models.EventPosition"
  name: "EventPosition"
  nameWithType: "EventPosition"
  fullName: "com.azure.messaging.eventhubs.models.EventPosition"
- uid: "com.azure.messaging.eventhubs.EventHubConsumerClient"
  name: "EventHubConsumerClient"
  nameWithType: "EventHubConsumerClient"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerClient"
- uid: "com.azure.messaging.eventhubs.EventHubClient.createConsumer*"
  name: "createConsumer"
  nameWithType: "EventHubClient.createConsumer"
  fullName: "com.azure.messaging.eventhubs.EventHubClient.createConsumer"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.models.EventHubConsumerOptions"
  name: "EventHubConsumerOptions"
  nameWithType: "EventHubConsumerOptions"
  fullName: "com.azure.messaging.eventhubs.models.EventHubConsumerOptions"
- uid: "com.azure.messaging.eventhubs.EventHubClient.close*"
  name: "close"
  nameWithType: "EventHubClient.close"
  fullName: "com.azure.messaging.eventhubs.EventHubClient.close"
  package: "com.azure.messaging.eventhubs"
- uid: "java.io.Closeable"
  name: "Closeable"
  nameWithType: "Closeable"
  fullName: "java.io.Closeable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.core.util.IterableStream"
  name: "IterableStream"
  nameWithType: "IterableStream"
  fullName: "com.azure.core.util.IterableStream"
