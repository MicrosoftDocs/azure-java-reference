### YamlMime:ManagedReference
items:
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient"
  id: "EventHubAsyncClient"
  parent: "com.azure.messaging.eventhubs"
  children:
  - "com.azure.messaging.eventhubs.EventHubAsyncClient.EventHubAsyncClient(com.azure.messaging.eventhubs.EventHubConnection,com.azure.core.amqp.implementation.TracerProvider,com.azure.core.amqp.implementation.MessageSerializer,boolean)"
  - "com.azure.messaging.eventhubs.EventHubAsyncClient.close()"
  - "com.azure.messaging.eventhubs.EventHubAsyncClient.createConsumer(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition)"
  - "com.azure.messaging.eventhubs.EventHubAsyncClient.createConsumer(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition,com.azure.messaging.eventhubs.models.EventHubConsumerOptions)"
  - "com.azure.messaging.eventhubs.EventHubAsyncClient.createProducer()"
  - "com.azure.messaging.eventhubs.EventHubAsyncClient.getEventHubName()"
  - "com.azure.messaging.eventhubs.EventHubAsyncClient.getFullyQualifiedDomainName()"
  - "com.azure.messaging.eventhubs.EventHubAsyncClient.getPartitionIds()"
  - "com.azure.messaging.eventhubs.EventHubAsyncClient.getPartitionProperties(java.lang.String)"
  - "com.azure.messaging.eventhubs.EventHubAsyncClient.getProperties()"
  langs:
  - "java"
  name: "EventHubAsyncClient"
  nameWithType: "EventHubAsyncClient"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient"
  type: "Class"
  package: "com.azure.messaging.eventhubs"
  summary: "An **asynchronous** client that is the main point of interaction with Azure Event Hubs. It connects to a specific Event Hub and allows operations for sending event data, receiving data, and inspecting the Event Hub's metadata."
  syntax:
    content: " class EventHubAsyncClient implements Closeable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Closeable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.EventHubAsyncClient(com.azure.messaging.eventhubs.EventHubConnection,com.azure.core.amqp.implementation.TracerProvider,com.azure.core.amqp.implementation.MessageSerializer,boolean)"
  id: "EventHubAsyncClient(com.azure.messaging.eventhubs.EventHubConnection,com.azure.core.amqp.implementation.TracerProvider,com.azure.core.amqp.implementation.MessageSerializer,boolean)"
  parent: "com.azure.messaging.eventhubs.EventHubAsyncClient"
  langs:
  - "java"
  name: "EventHubAsyncClient(EventHubConnection connection, TracerProvider tracerProvider, MessageSerializer messageSerializer, boolean isSharedConnection)"
  nameWithType: "EventHubAsyncClient.EventHubAsyncClient(EventHubConnection connection, TracerProvider tracerProvider, MessageSerializer messageSerializer, boolean isSharedConnection)"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.EventHubAsyncClient(EventHubConnection connection, TracerProvider tracerProvider, MessageSerializer messageSerializer, boolean isSharedConnection)"
  overload: "com.azure.messaging.eventhubs.EventHubAsyncClient.EventHubAsyncClient*"
  type: "Constructor"
  package: "com.azure.messaging.eventhubs"
  syntax:
    content: " EventHubAsyncClient(EventHubConnection connection, TracerProvider tracerProvider, MessageSerializer messageSerializer, boolean isSharedConnection)"
    parameters:
    - id: "connection"
      type: "com.azure.messaging.eventhubs.EventHubConnection"
    - id: "tracerProvider"
      type: "com.azure.core.amqp.implementation.TracerProvider"
    - id: "messageSerializer"
      type: "com.azure.core.amqp.implementation.MessageSerializer"
    - id: "isSharedConnection"
      type: "boolean"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.close()"
  id: "close()"
  parent: "com.azure.messaging.eventhubs.EventHubAsyncClient"
  langs:
  - "java"
  name: "close()"
  nameWithType: "EventHubAsyncClient.close()"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.close()"
  overload: "com.azure.messaging.eventhubs.EventHubAsyncClient.close*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Closes and disposes of connection to service. Any <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumerAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubConsumers</xref> and <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubProducers</xref> created with this instance will have their connections closed."
  syntax:
    content: "public void close()"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.createConsumer(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition)"
  id: "createConsumer(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition)"
  parent: "com.azure.messaging.eventhubs.EventHubAsyncClient"
  langs:
  - "java"
  name: "createConsumer(String consumerGroup, EventPosition eventPosition)"
  nameWithType: "EventHubAsyncClient.createConsumer(String consumerGroup, EventPosition eventPosition)"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.createConsumer(String consumerGroup, EventPosition eventPosition)"
  overload: "com.azure.messaging.eventhubs.EventHubAsyncClient.createConsumer*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Creates an Event Hub consumer responsible for reading <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> from a specific Event Hub partition, as a member of the specified consumer group, and begins reading events from the `eventPosition`. The consumer created is non-exclusive, allowing multiple consumers from the same consumer group to be actively reading events from the partition. These non-exclusive consumers are sometimes referred to as \"Non-epoch Consumers\"."
  syntax:
    content: " EventHubConsumerAsyncClient createConsumer(String consumerGroup, EventPosition eventPosition)"
    parameters:
    - id: "consumerGroup"
      type: "java.lang.String"
      description: "The name of the consumer group this consumer is associated with. Events are read in the\n context of this group. The name of the consumer group that is created by default is <xref uid=\"com.azure.messaging.eventhubs.EventHubClientBuilder.DEFAULT_CONSUMER_GROUP_NAME\" data-throw-if-not-resolved=\"false\">\"$Default\"</xref>."
    - id: "eventPosition"
      type: "com.azure.messaging.eventhubs.models.EventPosition"
      description: "The position within the partition where the consumer should begin reading events."
    return:
      type: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
      description: "A new <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumerAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubConsumerAsyncClient</xref> that receives events from the partition at the given position."
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.createConsumer(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition,com.azure.messaging.eventhubs.models.EventHubConsumerOptions)"
  id: "createConsumer(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition,com.azure.messaging.eventhubs.models.EventHubConsumerOptions)"
  parent: "com.azure.messaging.eventhubs.EventHubAsyncClient"
  langs:
  - "java"
  name: "createConsumer(String consumerGroup, EventPosition eventPosition, EventHubConsumerOptions options)"
  nameWithType: "EventHubAsyncClient.createConsumer(String consumerGroup, EventPosition eventPosition, EventHubConsumerOptions options)"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.createConsumer(String consumerGroup, EventPosition eventPosition, EventHubConsumerOptions options)"
  overload: "com.azure.messaging.eventhubs.EventHubAsyncClient.createConsumer*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Creates an Event Hub consumer responsible for reading <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> from a specific Event Hub partition, as a member of the configured consumer group, and begins reading events from the specified `eventPosition`.\n\nA consumer may be exclusive, which asserts ownership over the partition for the consumer group to ensure that only one consumer from that group is reading the from the partition. These exclusive consumers are sometimes referred to as \"Epoch Consumers.\" A consumer may also be non-exclusive, allowing multiple consumers from the same consumer group to be actively reading events from the partition. These non-exclusive consumers are sometimes referred to as \"Non-epoch Consumers.\" Designating a consumer as exclusive may be specified in the `options`, by setting <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.setOwnerLevel(java.lang.Long)\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#setOwnerLevel(Long)</xref> to a non-null value. By default, consumers are created as non-exclusive."
  syntax:
    content: " EventHubConsumerAsyncClient createConsumer(String consumerGroup, EventPosition eventPosition, EventHubConsumerOptions options)"
    parameters:
    - id: "consumerGroup"
      type: "java.lang.String"
      description: "The name of the consumer group this consumer is associated with. Events are read in the\n context of this group. The name of the consumer group that is created by default is\n <xref uid=\"com.azure.messaging.eventhubs.EventHubClientBuilder.DEFAULT_CONSUMER_GROUP_NAME\" data-throw-if-not-resolved=\"false\">\"$Default\"</xref>."
    - id: "eventPosition"
      type: "com.azure.messaging.eventhubs.models.EventPosition"
      description: "The position within the partition where the consumer should begin reading events."
    - id: "options"
      type: "com.azure.messaging.eventhubs.models.EventHubConsumerOptions"
      description: "The set of options to apply when creating the consumer."
    return:
      type: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
      description: "An new <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumerAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubConsumerAsyncClient</xref> that receives events from the partition with all configured\n <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions</xref>."
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.createProducer()"
  id: "createProducer()"
  parent: "com.azure.messaging.eventhubs.EventHubAsyncClient"
  langs:
  - "java"
  name: "createProducer()"
  nameWithType: "EventHubAsyncClient.createProducer()"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.createProducer()"
  overload: "com.azure.messaging.eventhubs.EventHubAsyncClient.createProducer*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Creates an Event Hub producer responsible for transmitting <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> to the Event Hub, grouped together in batches."
  syntax:
    content: " EventHubProducerAsyncClient createProducer()"
    return:
      type: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
      description: "A new <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubProducerAsyncClient</xref>."
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.getEventHubName()"
  id: "getEventHubName()"
  parent: "com.azure.messaging.eventhubs.EventHubAsyncClient"
  langs:
  - "java"
  name: "getEventHubName()"
  nameWithType: "EventHubAsyncClient.getEventHubName()"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.getEventHubName()"
  overload: "com.azure.messaging.eventhubs.EventHubAsyncClient.getEventHubName*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Gets the Event Hub name this client interacts with."
  syntax:
    content: " String getEventHubName()"
    return:
      type: "java.lang.String"
      description: "The Event Hub name this client interacts with."
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.getFullyQualifiedDomainName()"
  id: "getFullyQualifiedDomainName()"
  parent: "com.azure.messaging.eventhubs.EventHubAsyncClient"
  langs:
  - "java"
  name: "getFullyQualifiedDomainName()"
  nameWithType: "EventHubAsyncClient.getFullyQualifiedDomainName()"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.getFullyQualifiedDomainName()"
  overload: "com.azure.messaging.eventhubs.EventHubAsyncClient.getFullyQualifiedDomainName*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Returns the fully qualified domain name (FQDN) of this Event Hub."
  syntax:
    content: " String getFullyQualifiedDomainName()"
    return:
      type: "java.lang.String"
      description: "The fully qualified domain name (FQDN) of this Event Hub."
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.getPartitionIds()"
  id: "getPartitionIds()"
  parent: "com.azure.messaging.eventhubs.EventHubAsyncClient"
  langs:
  - "java"
  name: "getPartitionIds()"
  nameWithType: "EventHubAsyncClient.getPartitionIds()"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.getPartitionIds()"
  overload: "com.azure.messaging.eventhubs.EventHubAsyncClient.getPartitionIds*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Retrieves the identifiers for the partitions of an Event Hub."
  syntax:
    content: " Flux<String> getPartitionIds()"
    return:
      type: "reactor.core.publisher.Flux<java.lang.String>"
      description: "A Flux of identifiers for the partitions of an Event Hub."
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.getPartitionProperties(java.lang.String)"
  id: "getPartitionProperties(java.lang.String)"
  parent: "com.azure.messaging.eventhubs.EventHubAsyncClient"
  langs:
  - "java"
  name: "getPartitionProperties(String partitionId)"
  nameWithType: "EventHubAsyncClient.getPartitionProperties(String partitionId)"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.getPartitionProperties(String partitionId)"
  overload: "com.azure.messaging.eventhubs.EventHubAsyncClient.getPartitionProperties*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Retrieves information about a specific partition for an Event Hub, including elements that describe the available events in the partition event stream."
  syntax:
    content: " Mono<PartitionProperties> getPartitionProperties(String partitionId)"
    parameters:
    - id: "partitionId"
      type: "java.lang.String"
      description: "The unique identifier of a partition associated with the Event Hub."
    return:
      type: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.PartitionProperties>"
      description: "The set of information for the requested partition under the Event Hub this client is associated with."
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.getProperties()"
  id: "getProperties()"
  parent: "com.azure.messaging.eventhubs.EventHubAsyncClient"
  langs:
  - "java"
  name: "getProperties()"
  nameWithType: "EventHubAsyncClient.getProperties()"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.getProperties()"
  overload: "com.azure.messaging.eventhubs.EventHubAsyncClient.getProperties*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Retrieves information about an Event Hub, including the number of partitions present and their identifiers."
  syntax:
    content: " Mono<EventHubProperties> getProperties()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.EventHubProperties>"
      description: "The set of information for the Event Hub that this client is associated with."
references:
- uid: "com.azure.messaging.eventhubs.EventHubConnection"
  name: "EventHubConnection"
  nameWithType: "EventHubConnection"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection"
- uid: "com.azure.core.amqp.implementation.TracerProvider"
  spec.java:
  - uid: "com.azure.core.amqp.implementation.TracerProvider"
    name: "TracerProvider"
    fullName: "com.azure.core.amqp.implementation.TracerProvider"
- uid: "com.azure.core.amqp.implementation.MessageSerializer"
  spec.java:
  - uid: "com.azure.core.amqp.implementation.MessageSerializer"
    name: "MessageSerializer"
    fullName: "com.azure.core.amqp.implementation.MessageSerializer"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.EventHubAsyncClient*"
  name: "EventHubAsyncClient"
  nameWithType: "EventHubAsyncClient.EventHubAsyncClient"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.EventHubAsyncClient"
  package: "com.azure.messaging.eventhubs"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.getFullyQualifiedDomainName*"
  name: "getFullyQualifiedDomainName"
  nameWithType: "EventHubAsyncClient.getFullyQualifiedDomainName"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.getFullyQualifiedDomainName"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.getEventHubName*"
  name: "getEventHubName"
  nameWithType: "EventHubAsyncClient.getEventHubName"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.getEventHubName"
  package: "com.azure.messaging.eventhubs"
- uid: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.EventHubProperties>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.eventhubs.EventHubProperties"
    name: "EventHubProperties"
    fullName: "com.azure.messaging.eventhubs.EventHubProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.getProperties*"
  name: "getProperties"
  nameWithType: "EventHubAsyncClient.getProperties"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.getProperties"
  package: "com.azure.messaging.eventhubs"
- uid: "reactor.core.publisher.Flux<java.lang.String>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.getPartitionIds*"
  name: "getPartitionIds"
  nameWithType: "EventHubAsyncClient.getPartitionIds"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.getPartitionIds"
  package: "com.azure.messaging.eventhubs"
- uid: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.PartitionProperties>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.eventhubs.PartitionProperties"
    name: "PartitionProperties"
    fullName: "com.azure.messaging.eventhubs.PartitionProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.getPartitionProperties*"
  name: "getPartitionProperties"
  nameWithType: "EventHubAsyncClient.getPartitionProperties"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.getPartitionProperties"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  name: "EventHubProducerAsyncClient"
  nameWithType: "EventHubProducerAsyncClient"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.createProducer*"
  name: "createProducer"
  nameWithType: "EventHubAsyncClient.createProducer"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.createProducer"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.models.EventPosition"
  name: "EventPosition"
  nameWithType: "EventPosition"
  fullName: "com.azure.messaging.eventhubs.models.EventPosition"
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
  name: "EventHubConsumerAsyncClient"
  nameWithType: "EventHubConsumerAsyncClient"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.createConsumer*"
  name: "createConsumer"
  nameWithType: "EventHubAsyncClient.createConsumer"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.createConsumer"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.models.EventHubConsumerOptions"
  name: "EventHubConsumerOptions"
  nameWithType: "EventHubConsumerOptions"
  fullName: "com.azure.messaging.eventhubs.models.EventHubConsumerOptions"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient.close*"
  name: "close"
  nameWithType: "EventHubAsyncClient.close"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient.close"
  package: "com.azure.messaging.eventhubs"
- uid: "java.io.Closeable"
  name: "Closeable"
  nameWithType: "Closeable"
  fullName: "java.io.Closeable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.messaging.eventhubs.EventHubProperties"
  name: "EventHubProperties"
  nameWithType: "EventHubProperties"
  fullName: "com.azure.messaging.eventhubs.EventHubProperties"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "com.azure.messaging.eventhubs.PartitionProperties"
  name: "PartitionProperties"
  nameWithType: "PartitionProperties"
  fullName: "com.azure.messaging.eventhubs.PartitionProperties"
