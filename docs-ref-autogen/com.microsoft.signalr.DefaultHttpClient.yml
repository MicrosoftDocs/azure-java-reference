### YamlMime:ManagedReference
items:
- uid: "com.microsoft.signalr.DefaultHttpClient"
  id: "DefaultHttpClient"
  parent: "com.microsoft.signalr"
  children:
  - "com.microsoft.signalr.DefaultHttpClient.DefaultHttpClient()"
  - "com.microsoft.signalr.DefaultHttpClient.DefaultHttpClient(int,okhttp3.OkHttpClient)"
  - "com.microsoft.signalr.DefaultHttpClient.cloneWithTimeOut(int)"
  - "com.microsoft.signalr.DefaultHttpClient.createWebSocket(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  - "com.microsoft.signalr.DefaultHttpClient.send(com.microsoft.signalr.HttpRequest)"
  - "com.microsoft.signalr.DefaultHttpClient.send(com.microsoft.signalr.HttpRequest,java.lang.String)"
  langs:
  - "java"
  name: "DefaultHttpClient"
  nameWithType: "DefaultHttpClient"
  fullName: "com.microsoft.signalr.DefaultHttpClient"
  type: "Class"
  package: "com.microsoft.signalr"
  syntax:
    content: "final class DefaultHttpClient extends HttpClient"
  inheritance:
  - "java.lang.Object"
  - "com.microsoft.signalr.HttpClient"
  inheritedMembers:
  - "com.microsoft.signalr.HttpClient.cloneWithTimeOut(int)"
  - "com.microsoft.signalr.HttpClient.createWebSocket(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  - "com.microsoft.signalr.HttpClient.delete(java.lang.String)"
  - "com.microsoft.signalr.HttpClient.delete(java.lang.String,com.microsoft.signalr.HttpRequest)"
  - "com.microsoft.signalr.HttpClient.get(java.lang.String)"
  - "com.microsoft.signalr.HttpClient.get(java.lang.String,com.microsoft.signalr.HttpRequest)"
  - "com.microsoft.signalr.HttpClient.post(java.lang.String)"
  - "com.microsoft.signalr.HttpClient.post(java.lang.String,com.microsoft.signalr.HttpRequest)"
  - "com.microsoft.signalr.HttpClient.post(java.lang.String,java.lang.String,com.microsoft.signalr.HttpRequest)"
  - "com.microsoft.signalr.HttpClient.send(com.microsoft.signalr.HttpRequest)"
  - "com.microsoft.signalr.HttpClient.send(com.microsoft.signalr.HttpRequest,java.lang.String)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.signalr.DefaultHttpClient.DefaultHttpClient()"
  id: "DefaultHttpClient()"
  parent: "com.microsoft.signalr.DefaultHttpClient"
  langs:
  - "java"
  name: "DefaultHttpClient()"
  nameWithType: "DefaultHttpClient.DefaultHttpClient()"
  fullName: "com.microsoft.signalr.DefaultHttpClient.DefaultHttpClient()"
  overload: "com.microsoft.signalr.DefaultHttpClient.DefaultHttpClient*"
  type: "Constructor"
  package: "com.microsoft.signalr"
  syntax:
    content: "public DefaultHttpClient()"
- uid: "com.microsoft.signalr.DefaultHttpClient.DefaultHttpClient(int,okhttp3.OkHttpClient)"
  id: "DefaultHttpClient(int,okhttp3.OkHttpClient)"
  parent: "com.microsoft.signalr.DefaultHttpClient"
  langs:
  - "java"
  name: "DefaultHttpClient(int timeoutInMilliseconds, OkHttpClient client)"
  nameWithType: "DefaultHttpClient.DefaultHttpClient(int timeoutInMilliseconds, OkHttpClient client)"
  fullName: "com.microsoft.signalr.DefaultHttpClient.DefaultHttpClient(int timeoutInMilliseconds, OkHttpClient client)"
  overload: "com.microsoft.signalr.DefaultHttpClient.DefaultHttpClient*"
  type: "Constructor"
  package: "com.microsoft.signalr"
  syntax:
    content: "public DefaultHttpClient(int timeoutInMilliseconds, OkHttpClient client)"
    parameters:
    - id: "timeoutInMilliseconds"
      type: "int"
    - id: "client"
      type: "okhttp3.OkHttpClient"
- uid: "com.microsoft.signalr.DefaultHttpClient.cloneWithTimeOut(int)"
  id: "cloneWithTimeOut(int)"
  parent: "com.microsoft.signalr.DefaultHttpClient"
  langs:
  - "java"
  name: "cloneWithTimeOut(int timeoutInMilliseconds)"
  nameWithType: "DefaultHttpClient.cloneWithTimeOut(int timeoutInMilliseconds)"
  fullName: "com.microsoft.signalr.DefaultHttpClient.cloneWithTimeOut(int timeoutInMilliseconds)"
  overload: "com.microsoft.signalr.DefaultHttpClient.cloneWithTimeOut*"
  type: "Method"
  package: "com.microsoft.signalr"
  syntax:
    content: "public DefaultHttpClient cloneWithTimeOut(int timeoutInMilliseconds)"
    parameters:
    - id: "timeoutInMilliseconds"
      type: "int"
    return:
      type: "com.microsoft.signalr.DefaultHttpClient"
- uid: "com.microsoft.signalr.DefaultHttpClient.createWebSocket(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  id: "createWebSocket(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.microsoft.signalr.DefaultHttpClient"
  langs:
  - "java"
  name: "createWebSocket(String url, Map<String,String> headers)"
  nameWithType: "DefaultHttpClient.createWebSocket(String url, Map<String,String> headers)"
  fullName: "com.microsoft.signalr.DefaultHttpClient.createWebSocket(String url, Map<String,String> headers)"
  overload: "com.microsoft.signalr.DefaultHttpClient.createWebSocket*"
  type: "Method"
  package: "com.microsoft.signalr"
  syntax:
    content: "public WebSocketWrapper createWebSocket(String url, Map<String,String> headers)"
    parameters:
    - id: "url"
      type: "java.lang.String"
    - id: "headers"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    return:
      type: "com.microsoft.signalr.WebSocketWrapper"
- uid: "com.microsoft.signalr.DefaultHttpClient.send(com.microsoft.signalr.HttpRequest)"
  id: "send(com.microsoft.signalr.HttpRequest)"
  parent: "com.microsoft.signalr.DefaultHttpClient"
  langs:
  - "java"
  name: "send(HttpRequest httpRequest)"
  nameWithType: "DefaultHttpClient.send(HttpRequest httpRequest)"
  fullName: "com.microsoft.signalr.DefaultHttpClient.send(HttpRequest httpRequest)"
  overload: "com.microsoft.signalr.DefaultHttpClient.send*"
  type: "Method"
  package: "com.microsoft.signalr"
  syntax:
    content: "public Single<HttpResponse> send(HttpRequest httpRequest)"
    parameters:
    - id: "httpRequest"
      type: "com.microsoft.signalr.HttpRequest"
    return:
      type: "io.reactivex.Single<com.microsoft.signalr.HttpResponse>"
- uid: "com.microsoft.signalr.DefaultHttpClient.send(com.microsoft.signalr.HttpRequest,java.lang.String)"
  id: "send(com.microsoft.signalr.HttpRequest,java.lang.String)"
  parent: "com.microsoft.signalr.DefaultHttpClient"
  langs:
  - "java"
  name: "send(HttpRequest httpRequest, String bodyContent)"
  nameWithType: "DefaultHttpClient.send(HttpRequest httpRequest, String bodyContent)"
  fullName: "com.microsoft.signalr.DefaultHttpClient.send(HttpRequest httpRequest, String bodyContent)"
  overload: "com.microsoft.signalr.DefaultHttpClient.send*"
  type: "Method"
  package: "com.microsoft.signalr"
  syntax:
    content: "public Single<HttpResponse> send(HttpRequest httpRequest, String bodyContent)"
    parameters:
    - id: "httpRequest"
      type: "com.microsoft.signalr.HttpRequest"
    - id: "bodyContent"
      type: "java.lang.String"
    return:
      type: "io.reactivex.Single<com.microsoft.signalr.HttpResponse>"
references:
- uid: "com.microsoft.signalr.DefaultHttpClient.DefaultHttpClient*"
  name: "DefaultHttpClient"
  nameWithType: "DefaultHttpClient.DefaultHttpClient"
  fullName: "com.microsoft.signalr.DefaultHttpClient.DefaultHttpClient"
  package: "com.microsoft.signalr"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "okhttp3.OkHttpClient"
  spec.java:
  - uid: "okhttp3.OkHttpClient"
    name: "OkHttpClient"
    fullName: "okhttp3.OkHttpClient"
- uid: "com.microsoft.signalr.DefaultHttpClient.cloneWithTimeOut*"
  name: "cloneWithTimeOut"
  nameWithType: "DefaultHttpClient.cloneWithTimeOut"
  fullName: "com.microsoft.signalr.DefaultHttpClient.cloneWithTimeOut"
  package: "com.microsoft.signalr"
- uid: "com.microsoft.signalr.HttpRequest"
  name: "HttpRequest"
  nameWithType: "HttpRequest"
  fullName: "com.microsoft.signalr.HttpRequest"
- uid: "io.reactivex.Single<com.microsoft.signalr.HttpResponse>"
  spec.java:
  - uid: "io.reactivex.Single"
    name: "Single"
    fullName: "io.reactivex.Single"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.signalr.HttpResponse"
    name: "HttpResponse"
    fullName: "com.microsoft.signalr.HttpResponse"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.signalr.DefaultHttpClient.send*"
  name: "send"
  nameWithType: "DefaultHttpClient.send"
  fullName: "com.microsoft.signalr.DefaultHttpClient.send"
  package: "com.microsoft.signalr"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.signalr.WebSocketWrapper"
  name: "WebSocketWrapper"
  nameWithType: "WebSocketWrapper"
  fullName: "com.microsoft.signalr.WebSocketWrapper"
- uid: "com.microsoft.signalr.DefaultHttpClient.createWebSocket*"
  name: "createWebSocket"
  nameWithType: "DefaultHttpClient.createWebSocket"
  fullName: "com.microsoft.signalr.DefaultHttpClient.createWebSocket"
  package: "com.microsoft.signalr"
- uid: "com.microsoft.signalr.HttpClient"
  name: "HttpClient"
  nameWithType: "HttpClient"
  fullName: "com.microsoft.signalr.HttpClient"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "com.microsoft.signalr.HttpClient.send(com.microsoft.signalr.HttpRequest)"
  name: "HttpClient.send(HttpRequest)"
  nameWithType: "HttpClient.send(HttpRequest)"
  fullName: "com.microsoft.signalr.HttpClient.send(com.microsoft.signalr.HttpRequest)"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "com.microsoft.signalr.HttpClient.delete(java.lang.String,com.microsoft.signalr.HttpRequest)"
  name: "HttpClient.delete(String,HttpRequest)"
  nameWithType: "HttpClient.delete(String,HttpRequest)"
  fullName: "com.microsoft.signalr.HttpClient.delete(java.lang.String,com.microsoft.signalr.HttpRequest)"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "com.microsoft.signalr.HttpClient.cloneWithTimeOut(int)"
  name: "HttpClient.cloneWithTimeOut(int)"
  nameWithType: "HttpClient.cloneWithTimeOut(int)"
  fullName: "com.microsoft.signalr.HttpClient.cloneWithTimeOut(int)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "com.microsoft.signalr.HttpClient.post(java.lang.String)"
  name: "HttpClient.post(String)"
  nameWithType: "HttpClient.post(String)"
  fullName: "com.microsoft.signalr.HttpClient.post(java.lang.String)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.microsoft.signalr.HttpClient.delete(java.lang.String)"
  name: "HttpClient.delete(String)"
  nameWithType: "HttpClient.delete(String)"
  fullName: "com.microsoft.signalr.HttpClient.delete(java.lang.String)"
- uid: "com.microsoft.signalr.HttpClient.send(com.microsoft.signalr.HttpRequest,java.lang.String)"
  name: "HttpClient.send(HttpRequest,String)"
  nameWithType: "HttpClient.send(HttpRequest,String)"
  fullName: "com.microsoft.signalr.HttpClient.send(com.microsoft.signalr.HttpRequest,java.lang.String)"
- uid: "com.microsoft.signalr.HttpClient.get(java.lang.String,com.microsoft.signalr.HttpRequest)"
  name: "HttpClient.get(String,HttpRequest)"
  nameWithType: "HttpClient.get(String,HttpRequest)"
  fullName: "com.microsoft.signalr.HttpClient.get(java.lang.String,com.microsoft.signalr.HttpRequest)"
- uid: "com.microsoft.signalr.HttpClient.post(java.lang.String,java.lang.String,com.microsoft.signalr.HttpRequest)"
  name: "HttpClient.post(String,String,HttpRequest)"
  nameWithType: "HttpClient.post(String,String,HttpRequest)"
  fullName: "com.microsoft.signalr.HttpClient.post(java.lang.String,java.lang.String,com.microsoft.signalr.HttpRequest)"
- uid: "com.microsoft.signalr.HttpClient.post(java.lang.String,com.microsoft.signalr.HttpRequest)"
  name: "HttpClient.post(String,HttpRequest)"
  nameWithType: "HttpClient.post(String,HttpRequest)"
  fullName: "com.microsoft.signalr.HttpClient.post(java.lang.String,com.microsoft.signalr.HttpRequest)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "com.microsoft.signalr.HttpClient.createWebSocket(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  name: "HttpClient.createWebSocket(String,Map<String,String>)"
  nameWithType: "HttpClient.createWebSocket(String,Map<String,String>)"
  fullName: "com.microsoft.signalr.HttpClient.createWebSocket(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "com.microsoft.signalr.HttpClient.get(java.lang.String)"
  name: "HttpClient.get(String)"
  nameWithType: "HttpClient.get(String)"
  fullName: "com.microsoft.signalr.HttpClient.get(java.lang.String)"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.signalr.HttpResponse"
  name: "HttpResponse"
  nameWithType: "HttpResponse"
  fullName: "com.microsoft.signalr.HttpResponse"
- uid: "io.reactivex.Single"
  name: "Single"
  nameWithType: "Single"
  fullName: "io.reactivex.Single"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
- uid: "java.lang.String,java.lang.String>)"
  name: "String,String>)"
  nameWithType: "String,String>)"
  fullName: "java.lang.String,java.lang.String>)"
- uid: "com.microsoft.signalr.HttpClient.createWebSocket(java.lang.String,java.util.Map"
  name: "HttpClient.createWebSocket(String,Map"
  nameWithType: "HttpClient.createWebSocket(String,Map"
  fullName: "com.microsoft.signalr.HttpClient.createWebSocket(java.lang.String,java.util.Map"
