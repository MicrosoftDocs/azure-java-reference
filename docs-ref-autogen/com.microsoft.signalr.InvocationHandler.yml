### YamlMime:ManagedReference
items:
- uid: "com.microsoft.signalr.InvocationHandler"
  id: "InvocationHandler"
  parent: "com.microsoft.signalr"
  children:
  - "com.microsoft.signalr.InvocationHandler.InvocationHandler(com.microsoft.signalr.ActionBase,java.lang.Class<?>...)"
  - "com.microsoft.signalr.InvocationHandler.getAction()"
  - "com.microsoft.signalr.InvocationHandler.getClasses()"
  langs:
  - "java"
  name: "InvocationHandler"
  nameWithType: "InvocationHandler"
  fullName: "com.microsoft.signalr.InvocationHandler"
  type: "Class"
  package: "com.microsoft.signalr"
  syntax:
    content: " class InvocationHandler"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.signalr.InvocationHandler.InvocationHandler(com.microsoft.signalr.ActionBase,java.lang.Class<?>...)"
  id: "InvocationHandler(com.microsoft.signalr.ActionBase,java.lang.Class<?>...)"
  parent: "com.microsoft.signalr.InvocationHandler"
  langs:
  - "java"
  name: "InvocationHandler(ActionBase action, Class<?>[] classes)"
  nameWithType: "InvocationHandler.InvocationHandler(ActionBase action, Class<?>[] classes)"
  fullName: "com.microsoft.signalr.InvocationHandler.InvocationHandler(ActionBase action, Class<?>[] classes)"
  overload: "com.microsoft.signalr.InvocationHandler.InvocationHandler*"
  type: "Constructor"
  package: "com.microsoft.signalr"
  syntax:
    content: " InvocationHandler(ActionBase action, Class<?>[] classes)"
    parameters:
    - id: "action"
      type: "com.microsoft.signalr.ActionBase"
    - id: "classes"
      type: "java.lang.Class<?>[]"
- uid: "com.microsoft.signalr.InvocationHandler.getAction()"
  id: "getAction()"
  parent: "com.microsoft.signalr.InvocationHandler"
  langs:
  - "java"
  name: "getAction()"
  nameWithType: "InvocationHandler.getAction()"
  fullName: "com.microsoft.signalr.InvocationHandler.getAction()"
  overload: "com.microsoft.signalr.InvocationHandler.getAction*"
  type: "Method"
  package: "com.microsoft.signalr"
  syntax:
    content: "public ActionBase getAction()"
    return:
      type: "com.microsoft.signalr.ActionBase"
- uid: "com.microsoft.signalr.InvocationHandler.getClasses()"
  id: "getClasses()"
  parent: "com.microsoft.signalr.InvocationHandler"
  langs:
  - "java"
  name: "getClasses()"
  nameWithType: "InvocationHandler.getClasses()"
  fullName: "com.microsoft.signalr.InvocationHandler.getClasses()"
  overload: "com.microsoft.signalr.InvocationHandler.getClasses*"
  type: "Method"
  package: "com.microsoft.signalr"
  syntax:
    content: "public List<Class<?>> getClasses()"
    return:
      type: "java.util.List<java.lang.Class<?>>"
references:
- uid: "com.microsoft.signalr.ActionBase"
  name: "ActionBase"
  nameWithType: "ActionBase"
  fullName: "com.microsoft.signalr.ActionBase"
- uid: "java.lang.Class<?>[]"
  spec.java:
  - uid: "java.lang.Class"
    name: "Class"
    fullName: "java.lang.Class"
  - name: "<"
    fullName: "<"
  - uid: "?"
    name: "?"
    fullName: "?"
  - name: ">"
    fullName: ">"
  - name: "[]"
    fullName: "[]"
- uid: "com.microsoft.signalr.InvocationHandler.InvocationHandler*"
  name: "InvocationHandler"
  nameWithType: "InvocationHandler.InvocationHandler"
  fullName: "com.microsoft.signalr.InvocationHandler.InvocationHandler"
  package: "com.microsoft.signalr"
- uid: "java.util.List<java.lang.Class<?>>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Class"
    name: "Class"
    fullName: "java.lang.Class"
  - name: "<"
    fullName: "<"
  - uid: "?"
    name: "?"
    fullName: "?"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.signalr.InvocationHandler.getClasses*"
  name: "getClasses"
  nameWithType: "InvocationHandler.getClasses"
  fullName: "com.microsoft.signalr.InvocationHandler.getClasses"
  package: "com.microsoft.signalr"
- uid: "com.microsoft.signalr.InvocationHandler.getAction*"
  name: "getAction"
  nameWithType: "InvocationHandler.getAction"
  fullName: "com.microsoft.signalr.InvocationHandler.getAction"
  package: "com.microsoft.signalr"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.lang.Class"
  name: "Class"
  nameWithType: "Class"
  fullName: "java.lang.Class"
- uid: "?>[]"
  name: "?>[]"
  nameWithType: "?>[]"
  fullName: "?>[]"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "?"
  name: "?"
  nameWithType: "?"
  fullName: "?"
