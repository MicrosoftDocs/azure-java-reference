### YamlMime:ManagedReference
items:
- uid: "com.microsoft.signalr.CallbackMap"
  id: "CallbackMap"
  parent: "com.microsoft.signalr"
  children:
  - "com.microsoft.signalr.CallbackMap.CallbackMap()"
  - "com.microsoft.signalr.CallbackMap.get(java.lang.String)"
  - "com.microsoft.signalr.CallbackMap.put(java.lang.String,com.microsoft.signalr.ActionBase,java.lang.Class<?>...)"
  - "com.microsoft.signalr.CallbackMap.remove(java.lang.String)"
  langs:
  - "java"
  name: "CallbackMap"
  nameWithType: "CallbackMap"
  fullName: "com.microsoft.signalr.CallbackMap"
  type: "Class"
  package: "com.microsoft.signalr"
  syntax:
    content: " class CallbackMap"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.signalr.CallbackMap.CallbackMap()"
  id: "CallbackMap()"
  parent: "com.microsoft.signalr.CallbackMap"
  langs:
  - "java"
  name: "CallbackMap()"
  nameWithType: "CallbackMap.CallbackMap()"
  fullName: "com.microsoft.signalr.CallbackMap.CallbackMap()"
  overload: "com.microsoft.signalr.CallbackMap.CallbackMap*"
  type: "Constructor"
  package: "com.microsoft.signalr"
  syntax:
    content: " CallbackMap()"
- uid: "com.microsoft.signalr.CallbackMap.get(java.lang.String)"
  id: "get(java.lang.String)"
  parent: "com.microsoft.signalr.CallbackMap"
  langs:
  - "java"
  name: "get(String key)"
  nameWithType: "CallbackMap.get(String key)"
  fullName: "com.microsoft.signalr.CallbackMap.get(String key)"
  overload: "com.microsoft.signalr.CallbackMap.get*"
  type: "Method"
  package: "com.microsoft.signalr"
  syntax:
    content: "public List<InvocationHandler> get(String key)"
    parameters:
    - id: "key"
      type: "java.lang.String"
    return:
      type: "java.util.List<com.microsoft.signalr.InvocationHandler>"
- uid: "com.microsoft.signalr.CallbackMap.put(java.lang.String,com.microsoft.signalr.ActionBase,java.lang.Class<?>...)"
  id: "put(java.lang.String,com.microsoft.signalr.ActionBase,java.lang.Class<?>...)"
  parent: "com.microsoft.signalr.CallbackMap"
  langs:
  - "java"
  name: "put(String target, ActionBase action, Class<?>[] classes)"
  nameWithType: "CallbackMap.put(String target, ActionBase action, Class<?>[] classes)"
  fullName: "com.microsoft.signalr.CallbackMap.put(String target, ActionBase action, Class<?>[] classes)"
  overload: "com.microsoft.signalr.CallbackMap.put*"
  type: "Method"
  package: "com.microsoft.signalr"
  syntax:
    content: "public InvocationHandler put(String target, ActionBase action, Class<?>[] classes)"
    parameters:
    - id: "target"
      type: "java.lang.String"
    - id: "action"
      type: "com.microsoft.signalr.ActionBase"
    - id: "classes"
      type: "java.lang.Class<?>[]"
    return:
      type: "com.microsoft.signalr.InvocationHandler"
- uid: "com.microsoft.signalr.CallbackMap.remove(java.lang.String)"
  id: "remove(java.lang.String)"
  parent: "com.microsoft.signalr.CallbackMap"
  langs:
  - "java"
  name: "remove(String key)"
  nameWithType: "CallbackMap.remove(String key)"
  fullName: "com.microsoft.signalr.CallbackMap.remove(String key)"
  overload: "com.microsoft.signalr.CallbackMap.remove*"
  type: "Method"
  package: "com.microsoft.signalr"
  syntax:
    content: "public void remove(String key)"
    parameters:
    - id: "key"
      type: "java.lang.String"
references:
- uid: "com.microsoft.signalr.CallbackMap.CallbackMap*"
  name: "CallbackMap"
  nameWithType: "CallbackMap.CallbackMap"
  fullName: "com.microsoft.signalr.CallbackMap.CallbackMap"
  package: "com.microsoft.signalr"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.microsoft.signalr.ActionBase"
  name: "ActionBase"
  nameWithType: "ActionBase"
  fullName: "com.microsoft.signalr.ActionBase"
- uid: "java.lang.Class<?>[]"
  spec.java:
  - uid: "java.lang.Class"
    name: "Class"
    fullName: "java.lang.Class"
  - name: "<"
    fullName: "<"
  - uid: "?"
    name: "?"
    fullName: "?"
  - name: ">"
    fullName: ">"
  - name: "[]"
    fullName: "[]"
- uid: "com.microsoft.signalr.InvocationHandler"
  name: "InvocationHandler"
  nameWithType: "InvocationHandler"
  fullName: "com.microsoft.signalr.InvocationHandler"
- uid: "com.microsoft.signalr.CallbackMap.put*"
  name: "put"
  nameWithType: "CallbackMap.put"
  fullName: "com.microsoft.signalr.CallbackMap.put"
  package: "com.microsoft.signalr"
- uid: "java.util.List<com.microsoft.signalr.InvocationHandler>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.signalr.InvocationHandler"
    name: "InvocationHandler"
    fullName: "com.microsoft.signalr.InvocationHandler"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.signalr.CallbackMap.get*"
  name: "get"
  nameWithType: "CallbackMap.get"
  fullName: "com.microsoft.signalr.CallbackMap.get"
  package: "com.microsoft.signalr"
- uid: "com.microsoft.signalr.CallbackMap.remove*"
  name: "remove"
  nameWithType: "CallbackMap.remove"
  fullName: "com.microsoft.signalr.CallbackMap.remove"
  package: "com.microsoft.signalr"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.lang.Class"
  name: "Class"
  nameWithType: "Class"
  fullName: "java.lang.Class"
- uid: "?>[]"
  name: "?>[]"
  nameWithType: "?>[]"
  fullName: "?>[]"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
