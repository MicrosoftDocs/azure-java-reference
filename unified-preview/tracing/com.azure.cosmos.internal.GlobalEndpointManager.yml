### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.internal.GlobalEndpointManager"
  id: "GlobalEndpointManager"
  parent: "com.azure.cosmos.internal"
  children:
  - "com.azure.cosmos.internal.GlobalEndpointManager.CanUseMultipleWriteLocations(com.azure.cosmos.internal.RxDocumentServiceRequest)"
  - "com.azure.cosmos.internal.GlobalEndpointManager.GlobalEndpointManager(com.azure.cosmos.internal.DatabaseAccountManagerInternal,com.azure.cosmos.ConnectionPolicy,com.azure.cosmos.internal.Configs)"
  - "com.azure.cosmos.internal.GlobalEndpointManager.close()"
  - "com.azure.cosmos.internal.GlobalEndpointManager.getDatabaseAccountFromAnyLocationsAsync(java.net.URL,java.util.List<java.lang.String>,java.util.function.Function<java.net.URL,reactor.core.publisher.Mono<com.azure.cosmos.DatabaseAccount>>)"
  - "com.azure.cosmos.internal.GlobalEndpointManager.getReadEndpoints()"
  - "com.azure.cosmos.internal.GlobalEndpointManager.getWriteEndpoints()"
  - "com.azure.cosmos.internal.GlobalEndpointManager.init()"
  - "com.azure.cosmos.internal.GlobalEndpointManager.isClosed()"
  - "com.azure.cosmos.internal.GlobalEndpointManager.markEndpointUnavailableForRead(java.net.URL)"
  - "com.azure.cosmos.internal.GlobalEndpointManager.markEndpointUnavailableForWrite(java.net.URL)"
  - "com.azure.cosmos.internal.GlobalEndpointManager.refreshLocationAsync(com.azure.cosmos.DatabaseAccount)"
  - "com.azure.cosmos.internal.GlobalEndpointManager.resolveServiceEndpoint(com.azure.cosmos.internal.RxDocumentServiceRequest)"
  langs:
  - "java"
  name: "GlobalEndpointManager"
  nameWithType: "GlobalEndpointManager"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager"
  type: "Class"
  package: "com.azure.cosmos.internal"
  summary: "Endpoint region cache manager implementation. Supports cross region address routing based on availability and preference list."
  syntax:
    content: "public class GlobalEndpointManager implements AutoCloseable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.lang.AutoCloseable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.CanUseMultipleWriteLocations(com.azure.cosmos.internal.RxDocumentServiceRequest)"
  id: "CanUseMultipleWriteLocations(com.azure.cosmos.internal.RxDocumentServiceRequest)"
  parent: "com.azure.cosmos.internal.GlobalEndpointManager"
  langs:
  - "java"
  name: "CanUseMultipleWriteLocations(RxDocumentServiceRequest request)"
  nameWithType: "GlobalEndpointManager.CanUseMultipleWriteLocations(RxDocumentServiceRequest request)"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.CanUseMultipleWriteLocations(RxDocumentServiceRequest request)"
  overload: "com.azure.cosmos.internal.GlobalEndpointManager.CanUseMultipleWriteLocations*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public boolean CanUseMultipleWriteLocations(RxDocumentServiceRequest request)"
    parameters:
    - id: "request"
      type: "com.azure.cosmos.internal.RxDocumentServiceRequest"
    return:
      type: "boolean"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.GlobalEndpointManager(com.azure.cosmos.internal.DatabaseAccountManagerInternal,com.azure.cosmos.ConnectionPolicy,com.azure.cosmos.internal.Configs)"
  id: "GlobalEndpointManager(com.azure.cosmos.internal.DatabaseAccountManagerInternal,com.azure.cosmos.ConnectionPolicy,com.azure.cosmos.internal.Configs)"
  parent: "com.azure.cosmos.internal.GlobalEndpointManager"
  langs:
  - "java"
  name: "GlobalEndpointManager(DatabaseAccountManagerInternal owner, ConnectionPolicy connectionPolicy, Configs configs)"
  nameWithType: "GlobalEndpointManager.GlobalEndpointManager(DatabaseAccountManagerInternal owner, ConnectionPolicy connectionPolicy, Configs configs)"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.GlobalEndpointManager(DatabaseAccountManagerInternal owner, ConnectionPolicy connectionPolicy, Configs configs)"
  overload: "com.azure.cosmos.internal.GlobalEndpointManager.GlobalEndpointManager*"
  type: "Constructor"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public GlobalEndpointManager(DatabaseAccountManagerInternal owner, ConnectionPolicy connectionPolicy, Configs configs)"
    parameters:
    - id: "owner"
      type: "com.azure.cosmos.internal.DatabaseAccountManagerInternal"
    - id: "connectionPolicy"
      type: "com.azure.cosmos.ConnectionPolicy"
    - id: "configs"
      type: "com.azure.cosmos.internal.Configs"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.close()"
  id: "close()"
  parent: "com.azure.cosmos.internal.GlobalEndpointManager"
  langs:
  - "java"
  name: "close()"
  nameWithType: "GlobalEndpointManager.close()"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.close()"
  overload: "com.azure.cosmos.internal.GlobalEndpointManager.close*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public void close()"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.getDatabaseAccountFromAnyLocationsAsync(java.net.URL,java.util.List<java.lang.String>,java.util.function.Function<java.net.URL,reactor.core.publisher.Mono<com.azure.cosmos.DatabaseAccount>>)"
  id: "getDatabaseAccountFromAnyLocationsAsync(java.net.URL,java.util.List<java.lang.String>,java.util.function.Function<java.net.URL,reactor.core.publisher.Mono<com.azure.cosmos.DatabaseAccount>>)"
  parent: "com.azure.cosmos.internal.GlobalEndpointManager"
  langs:
  - "java"
  name: "getDatabaseAccountFromAnyLocationsAsync(URL defaultEndpoint, List<String> locations, Function<URL,Mono<DatabaseAccount>> getDatabaseAccountFn)"
  nameWithType: "GlobalEndpointManager.getDatabaseAccountFromAnyLocationsAsync(URL defaultEndpoint, List<String> locations, Function<URL,Mono<DatabaseAccount>> getDatabaseAccountFn)"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.getDatabaseAccountFromAnyLocationsAsync(URL defaultEndpoint, List<String> locations, Function<URL,Mono<DatabaseAccount>> getDatabaseAccountFn)"
  overload: "com.azure.cosmos.internal.GlobalEndpointManager.getDatabaseAccountFromAnyLocationsAsync*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static Mono<DatabaseAccount> getDatabaseAccountFromAnyLocationsAsync(URL defaultEndpoint, List<String> locations, Function<URL,Mono<DatabaseAccount>> getDatabaseAccountFn)"
    parameters:
    - id: "defaultEndpoint"
      type: "java.net.URL"
    - id: "locations"
      type: "java.util.List<java.lang.String>"
    - id: "getDatabaseAccountFn"
      type: "java.util.function.Function<java.net.URL,reactor.core.publisher.Mono<com.azure.cosmos.DatabaseAccount>>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.DatabaseAccount>"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.getReadEndpoints()"
  id: "getReadEndpoints()"
  parent: "com.azure.cosmos.internal.GlobalEndpointManager"
  langs:
  - "java"
  name: "getReadEndpoints()"
  nameWithType: "GlobalEndpointManager.getReadEndpoints()"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.getReadEndpoints()"
  overload: "com.azure.cosmos.internal.GlobalEndpointManager.getReadEndpoints*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public UnmodifiableList<URL> getReadEndpoints()"
    return:
      type: "org.apache.commons.collections4.list.UnmodifiableList<java.net.URL>"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.getWriteEndpoints()"
  id: "getWriteEndpoints()"
  parent: "com.azure.cosmos.internal.GlobalEndpointManager"
  langs:
  - "java"
  name: "getWriteEndpoints()"
  nameWithType: "GlobalEndpointManager.getWriteEndpoints()"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.getWriteEndpoints()"
  overload: "com.azure.cosmos.internal.GlobalEndpointManager.getWriteEndpoints*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public UnmodifiableList<URL> getWriteEndpoints()"
    return:
      type: "org.apache.commons.collections4.list.UnmodifiableList<java.net.URL>"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.init()"
  id: "init()"
  parent: "com.azure.cosmos.internal.GlobalEndpointManager"
  langs:
  - "java"
  name: "init()"
  nameWithType: "GlobalEndpointManager.init()"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.init()"
  overload: "com.azure.cosmos.internal.GlobalEndpointManager.init*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public void init()"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.isClosed()"
  id: "isClosed()"
  parent: "com.azure.cosmos.internal.GlobalEndpointManager"
  langs:
  - "java"
  name: "isClosed()"
  nameWithType: "GlobalEndpointManager.isClosed()"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.isClosed()"
  overload: "com.azure.cosmos.internal.GlobalEndpointManager.isClosed*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public boolean isClosed()"
    return:
      type: "boolean"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.markEndpointUnavailableForRead(java.net.URL)"
  id: "markEndpointUnavailableForRead(java.net.URL)"
  parent: "com.azure.cosmos.internal.GlobalEndpointManager"
  langs:
  - "java"
  name: "markEndpointUnavailableForRead(URL endpoint)"
  nameWithType: "GlobalEndpointManager.markEndpointUnavailableForRead(URL endpoint)"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.markEndpointUnavailableForRead(URL endpoint)"
  overload: "com.azure.cosmos.internal.GlobalEndpointManager.markEndpointUnavailableForRead*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public void markEndpointUnavailableForRead(URL endpoint)"
    parameters:
    - id: "endpoint"
      type: "java.net.URL"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.markEndpointUnavailableForWrite(java.net.URL)"
  id: "markEndpointUnavailableForWrite(java.net.URL)"
  parent: "com.azure.cosmos.internal.GlobalEndpointManager"
  langs:
  - "java"
  name: "markEndpointUnavailableForWrite(URL endpoint)"
  nameWithType: "GlobalEndpointManager.markEndpointUnavailableForWrite(URL endpoint)"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.markEndpointUnavailableForWrite(URL endpoint)"
  overload: "com.azure.cosmos.internal.GlobalEndpointManager.markEndpointUnavailableForWrite*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public void markEndpointUnavailableForWrite(URL endpoint)"
    parameters:
    - id: "endpoint"
      type: "java.net.URL"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.refreshLocationAsync(com.azure.cosmos.DatabaseAccount)"
  id: "refreshLocationAsync(com.azure.cosmos.DatabaseAccount)"
  parent: "com.azure.cosmos.internal.GlobalEndpointManager"
  langs:
  - "java"
  name: "refreshLocationAsync(DatabaseAccount databaseAccount)"
  nameWithType: "GlobalEndpointManager.refreshLocationAsync(DatabaseAccount databaseAccount)"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.refreshLocationAsync(DatabaseAccount databaseAccount)"
  overload: "com.azure.cosmos.internal.GlobalEndpointManager.refreshLocationAsync*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public Mono<Void> refreshLocationAsync(DatabaseAccount databaseAccount)"
    parameters:
    - id: "databaseAccount"
      type: "com.azure.cosmos.DatabaseAccount"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.resolveServiceEndpoint(com.azure.cosmos.internal.RxDocumentServiceRequest)"
  id: "resolveServiceEndpoint(com.azure.cosmos.internal.RxDocumentServiceRequest)"
  parent: "com.azure.cosmos.internal.GlobalEndpointManager"
  langs:
  - "java"
  name: "resolveServiceEndpoint(RxDocumentServiceRequest request)"
  nameWithType: "GlobalEndpointManager.resolveServiceEndpoint(RxDocumentServiceRequest request)"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.resolveServiceEndpoint(RxDocumentServiceRequest request)"
  overload: "com.azure.cosmos.internal.GlobalEndpointManager.resolveServiceEndpoint*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public URL resolveServiceEndpoint(RxDocumentServiceRequest request)"
    parameters:
    - id: "request"
      type: "com.azure.cosmos.internal.RxDocumentServiceRequest"
    return:
      type: "java.net.URL"
references:
- uid: "com.azure.cosmos.internal.DatabaseAccountManagerInternal"
  name: "DatabaseAccountManagerInternal"
  nameWithType: "DatabaseAccountManagerInternal"
  fullName: "com.azure.cosmos.internal.DatabaseAccountManagerInternal"
- uid: "com.azure.cosmos.ConnectionPolicy"
  name: "ConnectionPolicy"
  nameWithType: "ConnectionPolicy"
  fullName: "com.azure.cosmos.ConnectionPolicy"
- uid: "com.azure.cosmos.internal.Configs"
  name: "Configs"
  nameWithType: "Configs"
  fullName: "com.azure.cosmos.internal.Configs"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.GlobalEndpointManager*"
  name: "GlobalEndpointManager"
  nameWithType: "GlobalEndpointManager.GlobalEndpointManager"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.GlobalEndpointManager"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.init*"
  name: "init"
  nameWithType: "GlobalEndpointManager.init"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.init"
  package: "com.azure.cosmos.internal"
- uid: "org.apache.commons.collections4.list.UnmodifiableList<java.net.URL>"
  spec.java:
  - uid: "org.apache.commons.collections4.list.UnmodifiableList"
    name: "UnmodifiableList"
    fullName: "org.apache.commons.collections4.list.UnmodifiableList"
  - name: "<"
    fullName: "<"
  - uid: "java.net.URL"
    name: "URL"
    fullName: "java.net.URL"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.getReadEndpoints*"
  name: "getReadEndpoints"
  nameWithType: "GlobalEndpointManager.getReadEndpoints"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.getReadEndpoints"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.getWriteEndpoints*"
  name: "getWriteEndpoints"
  nameWithType: "GlobalEndpointManager.getWriteEndpoints"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.getWriteEndpoints"
  package: "com.azure.cosmos.internal"
- uid: "java.net.URL"
  spec.java:
  - uid: "java.net.URL"
    name: "URL"
    fullName: "java.net.URL"
- uid: "java.util.List<java.lang.String>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "java.util.function.Function<java.net.URL,reactor.core.publisher.Mono<com.azure.cosmos.DatabaseAccount>>"
  spec.java:
  - uid: "java.util.function.Function"
    name: "Function"
    fullName: "java.util.function.Function"
  - name: "<"
    fullName: "<"
  - uid: "java.net.URL"
    name: "URL"
    fullName: "java.net.URL"
  - name: ","
    fullName: ","
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.DatabaseAccount"
    name: "DatabaseAccount"
    fullName: "com.azure.cosmos.DatabaseAccount"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.DatabaseAccount>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.DatabaseAccount"
    name: "DatabaseAccount"
    fullName: "com.azure.cosmos.DatabaseAccount"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.getDatabaseAccountFromAnyLocationsAsync*"
  name: "getDatabaseAccountFromAnyLocationsAsync"
  nameWithType: "GlobalEndpointManager.getDatabaseAccountFromAnyLocationsAsync"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.getDatabaseAccountFromAnyLocationsAsync"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.RxDocumentServiceRequest"
  name: "RxDocumentServiceRequest"
  nameWithType: "RxDocumentServiceRequest"
  fullName: "com.azure.cosmos.internal.RxDocumentServiceRequest"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.resolveServiceEndpoint*"
  name: "resolveServiceEndpoint"
  nameWithType: "GlobalEndpointManager.resolveServiceEndpoint"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.resolveServiceEndpoint"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.markEndpointUnavailableForRead*"
  name: "markEndpointUnavailableForRead"
  nameWithType: "GlobalEndpointManager.markEndpointUnavailableForRead"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.markEndpointUnavailableForRead"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.markEndpointUnavailableForWrite*"
  name: "markEndpointUnavailableForWrite"
  nameWithType: "GlobalEndpointManager.markEndpointUnavailableForWrite"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.markEndpointUnavailableForWrite"
  package: "com.azure.cosmos.internal"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.CanUseMultipleWriteLocations*"
  name: "CanUseMultipleWriteLocations"
  nameWithType: "GlobalEndpointManager.CanUseMultipleWriteLocations"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.CanUseMultipleWriteLocations"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.close*"
  name: "close"
  nameWithType: "GlobalEndpointManager.close"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.close"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.DatabaseAccount"
  name: "DatabaseAccount"
  nameWithType: "DatabaseAccount"
  fullName: "com.azure.cosmos.DatabaseAccount"
- uid: "reactor.core.publisher.Mono<java.lang.Void>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.refreshLocationAsync*"
  name: "refreshLocationAsync"
  nameWithType: "GlobalEndpointManager.refreshLocationAsync"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.refreshLocationAsync"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.GlobalEndpointManager.isClosed*"
  name: "isClosed"
  nameWithType: "GlobalEndpointManager.isClosed"
  fullName: "com.azure.cosmos.internal.GlobalEndpointManager.isClosed"
  package: "com.azure.cosmos.internal"
- uid: "java.lang.AutoCloseable"
  name: "AutoCloseable"
  nameWithType: "AutoCloseable"
  fullName: "java.lang.AutoCloseable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "org.apache.commons.collections4.list.UnmodifiableList"
  name: "UnmodifiableList"
  nameWithType: "UnmodifiableList"
  fullName: "org.apache.commons.collections4.list.UnmodifiableList"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "java.lang.String"
  name: "String"
  nameWithType: "String"
  fullName: "java.lang.String"
- uid: "java.util.function.Function"
  name: "Function"
  nameWithType: "Function"
  fullName: "java.util.function.Function"
- uid: "java.net.URL,reactor.core.publisher.Mono"
  name: "URL,Mono"
  nameWithType: "URL,Mono"
  fullName: "java.net.URL,reactor.core.publisher.Mono"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
