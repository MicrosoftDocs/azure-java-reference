### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.file.FileOutputStream"
  id: "FileOutputStream"
  parent: "com.microsoft.azure.storage.file"
  children:
  - "com.microsoft.azure.storage.file.FileOutputStream.FileOutputStream(com.microsoft.azure.storage.file.CloudFile,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.FileOutputStream.accessCondition"
  - "com.microsoft.azure.storage.file.FileOutputStream.close()"
  - "com.microsoft.azure.storage.file.FileOutputStream.flush()"
  - "com.microsoft.azure.storage.file.FileOutputStream.lastError"
  - "com.microsoft.azure.storage.file.FileOutputStream.lastErrorLock"
  - "com.microsoft.azure.storage.file.FileOutputStream.opContext"
  - "com.microsoft.azure.storage.file.FileOutputStream.options"
  - "com.microsoft.azure.storage.file.FileOutputStream.streamFaulted"
  - "com.microsoft.azure.storage.file.FileOutputStream.write(byte[])"
  - "com.microsoft.azure.storage.file.FileOutputStream.write(byte[],int,int)"
  - "com.microsoft.azure.storage.file.FileOutputStream.write(int)"
  - "com.microsoft.azure.storage.file.FileOutputStream.write(java.io.InputStream,long)"
  langs:
  - "java"
  name: "FileOutputStream"
  nameWithType: "FileOutputStream"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream"
  type: "Class"
  package: "com.microsoft.azure.storage.file"
  summary: "The class is an append-only stream for writing into storage."
  syntax:
    content: "public class FileOutputStream extends OutputStream"
  inheritance:
  - "java.lang.Object"
  - "java.io.OutputStream"
  inheritedMembers:
  - "java.io.OutputStream.close()"
  - "java.io.OutputStream.flush()"
  - "java.io.OutputStream.nullOutputStream()"
  - "java.io.OutputStream.write(byte[])"
  - "java.io.OutputStream.write(byte[],int,int)"
  - "java.io.OutputStream.write(int)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.file.FileOutputStream.FileOutputStream(com.microsoft.azure.storage.file.CloudFile,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "FileOutputStream(com.microsoft.azure.storage.file.CloudFile,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.FileOutputStream"
  langs:
  - "java"
  name: "FileOutputStream(CloudFile parentFile, long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "FileOutputStream.FileOutputStream(CloudFile parentFile, long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream.FileOutputStream(CloudFile parentFile, long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.FileOutputStream.FileOutputStream*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.file"
  summary: "Initializes a new instance of the FileOutputStream class."
  syntax:
    content: "protected FileOutputStream(CloudFile parentFile, long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "parentFile"
      type: "com.microsoft.azure.storage.file.CloudFile"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.CloudFile\" data-throw-if-not-resolved=\"false\">CloudFile</xref> object which represents the file that this stream is associated with."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length of the file in bytes."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object which specifies any additional options for the request."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which is used to track the execution of the operation"
- uid: "com.microsoft.azure.storage.file.FileOutputStream.accessCondition"
  id: "accessCondition"
  parent: "com.microsoft.azure.storage.file.FileOutputStream"
  langs:
  - "java"
  name: "accessCondition"
  nameWithType: "FileOutputStream.accessCondition"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream.accessCondition"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "Holds the <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
  syntax:
    content: " AccessCondition accessCondition"
    return:
      type: "com.microsoft.azure.storage.AccessCondition"
- uid: "com.microsoft.azure.storage.file.FileOutputStream.close()"
  id: "close()"
  parent: "com.microsoft.azure.storage.file.FileOutputStream"
  langs:
  - "java"
  name: "close()"
  nameWithType: "FileOutputStream.close()"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream.close()"
  overload: "com.microsoft.azure.storage.file.FileOutputStream.close*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Closes this output stream and releases any system resources associated with this stream. If any data remains in the buffer it is committed to the service."
  syntax:
    content: "public void close()"
  exceptions:
  - type: "java.io.IOException"
    description: "If an I/O error occurs."
- uid: "com.microsoft.azure.storage.file.FileOutputStream.flush()"
  id: "flush()"
  parent: "com.microsoft.azure.storage.file.FileOutputStream"
  langs:
  - "java"
  name: "flush()"
  nameWithType: "FileOutputStream.flush()"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream.flush()"
  overload: "com.microsoft.azure.storage.file.FileOutputStream.flush*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Flushes this output stream and forces any buffered output bytes to be written out. If any data remains in the buffer it is committed to the service."
  syntax:
    content: "public synchronized void flush()"
  exceptions:
  - type: "java.io.IOException"
    description: "If an I/O error occurs."
- uid: "com.microsoft.azure.storage.file.FileOutputStream.lastError"
  id: "lastError"
  parent: "com.microsoft.azure.storage.file.FileOutputStream"
  langs:
  - "java"
  name: "lastError"
  nameWithType: "FileOutputStream.lastError"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream.lastError"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "Holds the last exception this stream encountered."
  syntax:
    content: " IOException lastError"
    return:
      type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.file.FileOutputStream.lastErrorLock"
  id: "lastErrorLock"
  parent: "com.microsoft.azure.storage.file.FileOutputStream"
  langs:
  - "java"
  name: "lastErrorLock"
  nameWithType: "FileOutputStream.lastErrorLock"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream.lastErrorLock"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "Holds the lock for synchronized access to the last error."
  syntax:
    content: " Object lastErrorLock"
    return:
      type: "java.lang.Object"
- uid: "com.microsoft.azure.storage.file.FileOutputStream.opContext"
  id: "opContext"
  parent: "com.microsoft.azure.storage.file.FileOutputStream"
  langs:
  - "java"
  name: "opContext"
  nameWithType: "FileOutputStream.opContext"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream.opContext"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "Holds the OperationContext for the current stream."
  syntax:
    content: " OperationContext opContext"
    return:
      type: "com.microsoft.azure.storage.OperationContext"
- uid: "com.microsoft.azure.storage.file.FileOutputStream.options"
  id: "options"
  parent: "com.microsoft.azure.storage.file.FileOutputStream"
  langs:
  - "java"
  name: "options"
  nameWithType: "FileOutputStream.options"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream.options"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "Holds the options for the current stream."
  syntax:
    content: " FileRequestOptions options"
    return:
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
- uid: "com.microsoft.azure.storage.file.FileOutputStream.streamFaulted"
  id: "streamFaulted"
  parent: "com.microsoft.azure.storage.file.FileOutputStream"
  langs:
  - "java"
  name: "streamFaulted"
  nameWithType: "FileOutputStream.streamFaulted"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream.streamFaulted"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "A flag to determine if the stream is faulted, if so the lasterror will be thrown on next operation."
  syntax:
    content: "volatile boolean streamFaulted"
    return:
      type: "boolean"
- uid: "com.microsoft.azure.storage.file.FileOutputStream.write(byte[])"
  id: "write(byte[])"
  parent: "com.microsoft.azure.storage.file.FileOutputStream"
  langs:
  - "java"
  name: "write(byte[] data)"
  nameWithType: "FileOutputStream.write(byte[] data)"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream.write(byte[] data)"
  overload: "com.microsoft.azure.storage.file.FileOutputStream.write*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Writes `b.length` bytes from the specified byte array to this output stream."
  syntax:
    content: "public void write(byte[] data)"
    parameters:
    - id: "data"
      type: "byte[]"
      description: "A <code>byte</code> array which represents the data to write."
  exceptions:
  - type: "java.io.IOException"
    description: "If an I/O error occurs. In particular, an IOException may be thrown if the output stream has been\n             closed."
- uid: "com.microsoft.azure.storage.file.FileOutputStream.write(byte[],int,int)"
  id: "write(byte[],int,int)"
  parent: "com.microsoft.azure.storage.file.FileOutputStream"
  langs:
  - "java"
  name: "write(byte[] data, int offset, int length)"
  nameWithType: "FileOutputStream.write(byte[] data, int offset, int length)"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream.write(byte[] data, int offset, int length)"
  overload: "com.microsoft.azure.storage.file.FileOutputStream.write*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Writes length bytes from the specified byte array starting at offset to this output stream."
  syntax:
    content: "public void write(byte[] data, int offset, int length)"
    parameters:
    - id: "data"
      type: "byte[]"
      description: "A <code>byte</code> array which represents the data to write."
    - id: "offset"
      type: "int"
      description: "An <code>int</code> which represents the start offset in the data."
    - id: "length"
      type: "int"
      description: "An <code>int</code> which represents the number of bytes to write."
  exceptions:
  - type: "java.io.IOException"
    description: "If an I/O error occurs. In particular, an IOException may be thrown if the output stream has been\n             closed."
- uid: "com.microsoft.azure.storage.file.FileOutputStream.write(int)"
  id: "write(int)"
  parent: "com.microsoft.azure.storage.file.FileOutputStream"
  langs:
  - "java"
  name: "write(int byteVal)"
  nameWithType: "FileOutputStream.write(int byteVal)"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream.write(int byteVal)"
  overload: "com.microsoft.azure.storage.file.FileOutputStream.write*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Writes the specified byte to this output stream. The general contract for write is that one byte is written to the output stream. The byte to be written is the eight low-order bits of the argument b. The 24 high-order bits of b are ignored."
  syntax:
    content: "public void write(int byteVal)"
    parameters:
    - id: "byteVal"
      type: "int"
      description: "An <code>int</code> which represents the bye value to write."
  exceptions:
  - type: "java.io.IOException"
    description: "If an I/O error occurs. In particular, an IOException may be thrown if the output stream has been\n             closed."
- uid: "com.microsoft.azure.storage.file.FileOutputStream.write(java.io.InputStream,long)"
  id: "write(java.io.InputStream,long)"
  parent: "com.microsoft.azure.storage.file.FileOutputStream"
  langs:
  - "java"
  name: "write(InputStream sourceStream, long writeLength)"
  nameWithType: "FileOutputStream.write(InputStream sourceStream, long writeLength)"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream.write(InputStream sourceStream, long writeLength)"
  overload: "com.microsoft.azure.storage.file.FileOutputStream.write*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Writes all data from the InputStream to the File."
  syntax:
    content: "public void write(InputStream sourceStream, long writeLength)"
    parameters:
    - id: "sourceStream"
      type: "java.io.InputStream"
      description: "An <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> object which species the data to write to the File."
    - id: "writeLength"
      type: "long"
  exceptions:
  - type: "java.io.IOException"
    description: "If an I/O error occurs. In particular, an IOException may be thrown if the output stream has been\n             closed."
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If an I/O error occurs. In particular, an IOException may be thrown if the output stream has been\n             closed."
references:
- uid: "com.microsoft.azure.storage.file.CloudFile"
  name: "CloudFile"
  nameWithType: "CloudFile"
  fullName: "com.microsoft.azure.storage.file.CloudFile"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.microsoft.azure.storage.AccessCondition"
  name: "AccessCondition"
  nameWithType: "AccessCondition"
  fullName: "com.microsoft.azure.storage.AccessCondition"
- uid: "com.microsoft.azure.storage.file.FileRequestOptions"
  name: "FileRequestOptions"
  nameWithType: "FileRequestOptions"
  fullName: "com.microsoft.azure.storage.file.FileRequestOptions"
- uid: "com.microsoft.azure.storage.OperationContext"
  name: "OperationContext"
  nameWithType: "OperationContext"
  fullName: "com.microsoft.azure.storage.OperationContext"
- uid: "com.microsoft.azure.storage.file.FileOutputStream.FileOutputStream*"
  name: "FileOutputStream"
  nameWithType: "FileOutputStream.FileOutputStream"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream.FileOutputStream"
  package: "com.microsoft.azure.storage.file"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "com.microsoft.azure.storage.file.FileOutputStream.close*"
  name: "close"
  nameWithType: "FileOutputStream.close"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream.close"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.FileOutputStream.flush*"
  name: "flush"
  nameWithType: "FileOutputStream.flush"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream.flush"
  package: "com.microsoft.azure.storage.file"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "com.microsoft.azure.storage.file.FileOutputStream.write*"
  name: "write"
  nameWithType: "FileOutputStream.write"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream.write"
  package: "com.microsoft.azure.storage.file"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.microsoft.azure.storage.StorageException"
  name: "StorageException"
  nameWithType: "StorageException"
  fullName: "com.microsoft.azure.storage.StorageException"
- uid: "java.io.InputStream"
  spec.java:
  - uid: "java.io.InputStream"
    name: "InputStream"
    fullName: "java.io.InputStream"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "java.io.OutputStream"
  name: "OutputStream"
  nameWithType: "OutputStream"
  fullName: "java.io.OutputStream"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.io.OutputStream.write(int)"
  name: "OutputStream.write(int)"
  nameWithType: "OutputStream.write(int)"
  fullName: "java.io.OutputStream.write(int)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.io.OutputStream.flush()"
  name: "OutputStream.flush()"
  nameWithType: "OutputStream.flush()"
  fullName: "java.io.OutputStream.flush()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.io.OutputStream.close()"
  name: "OutputStream.close()"
  nameWithType: "OutputStream.close()"
  fullName: "java.io.OutputStream.close()"
- uid: "java.io.OutputStream.nullOutputStream()"
  name: "OutputStream.nullOutputStream()"
  nameWithType: "OutputStream.nullOutputStream()"
  fullName: "java.io.OutputStream.nullOutputStream()"
- uid: "java.io.OutputStream.write(byte[],int,int)"
  name: "OutputStream.write(byte[],int,int)"
  nameWithType: "OutputStream.write(byte[],int,int)"
  fullName: "java.io.OutputStream.write(byte[],int,int)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.io.OutputStream.write(byte[])"
  name: "OutputStream.write(byte[])"
  nameWithType: "OutputStream.write(byte[])"
  fullName: "java.io.OutputStream.write(byte[])"
