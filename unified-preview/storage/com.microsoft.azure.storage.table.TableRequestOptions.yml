### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.table.TableRequestOptions"
  id: "TableRequestOptions"
  parent: "com.microsoft.azure.storage.table"
  children:
  - "com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver"
  - "com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver"
  - "com.microsoft.azure.storage.table.TableRequestOptions.TableRequestOptions()"
  - "com.microsoft.azure.storage.table.TableRequestOptions.TableRequestOptions(com.microsoft.azure.storage.table.TableRequestOptions)"
  - "com.microsoft.azure.storage.table.TableRequestOptions.applyDefaults(com.microsoft.azure.storage.table.TableRequestOptions)"
  - "com.microsoft.azure.storage.table.TableRequestOptions.assertNoEncryptionPolicyOrStrictMode()"
  - "com.microsoft.azure.storage.table.TableRequestOptions.assertPolicyIfRequired()"
  - "com.microsoft.azure.storage.table.TableRequestOptions.clearEncryption()"
  - "com.microsoft.azure.storage.table.TableRequestOptions.getDateBackwardCompatibility()"
  - "com.microsoft.azure.storage.table.TableRequestOptions.getEncryptionPolicy()"
  - "com.microsoft.azure.storage.table.TableRequestOptions.getEncryptionResolver()"
  - "com.microsoft.azure.storage.table.TableRequestOptions.getPropertyResolver()"
  - "com.microsoft.azure.storage.table.TableRequestOptions.getTablePayloadFormat()"
  - "com.microsoft.azure.storage.table.TableRequestOptions.populateAndApplyDefaults(com.microsoft.azure.storage.table.TableRequestOptions,com.microsoft.azure.storage.table.CloudTableClient)"
  - "com.microsoft.azure.storage.table.TableRequestOptions.setDateBackwardCompatibility(java.lang.Boolean)"
  - "com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionPolicy(com.microsoft.azure.storage.table.TableEncryptionPolicy)"
  - "com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionResolver(com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver)"
  - "com.microsoft.azure.storage.table.TableRequestOptions.setPropertyResolver(com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver)"
  - "com.microsoft.azure.storage.table.TableRequestOptions.setTablePayloadFormat(com.microsoft.azure.storage.table.TablePayloadFormat)"
  langs:
  - "java"
  name: "TableRequestOptions"
  nameWithType: "TableRequestOptions"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions"
  type: "Class"
  package: "com.microsoft.azure.storage.table"
  summary: "Represents a set of timeout, payload format, and retry policy options that may be specified for a table operation request."
  syntax:
    content: "public class TableRequestOptions extends RequestOptions"
  inheritance:
  - "java.lang.Object"
  - "com.microsoft.azure.storage.RequestOptions"
  inheritedMembers:
  - "com.microsoft.azure.storage.RequestOptions.applyBaseDefaultsInternal(com.microsoft.azure.storage.RequestOptions)"
  - "com.microsoft.azure.storage.RequestOptions.getLocationMode()"
  - "com.microsoft.azure.storage.RequestOptions.getMaximumExecutionTimeInMs()"
  - "com.microsoft.azure.storage.RequestOptions.getOperationExpiryTimeInMs()"
  - "com.microsoft.azure.storage.RequestOptions.getRetryPolicyFactory()"
  - "com.microsoft.azure.storage.RequestOptions.getTimeoutIntervalInMs()"
  - "com.microsoft.azure.storage.RequestOptions.populateRequestOptions(com.microsoft.azure.storage.RequestOptions,com.microsoft.azure.storage.RequestOptions,boolean)"
  - "com.microsoft.azure.storage.RequestOptions.requireEncryption()"
  - "com.microsoft.azure.storage.RequestOptions.setLocationMode(com.microsoft.azure.storage.LocationMode)"
  - "com.microsoft.azure.storage.RequestOptions.setMaximumExecutionTimeInMs(java.lang.Integer)"
  - "com.microsoft.azure.storage.RequestOptions.setRequireEncryption(java.lang.Boolean)"
  - "com.microsoft.azure.storage.RequestOptions.setRetryPolicyFactory(com.microsoft.azure.storage.RetryPolicyFactory)"
  - "com.microsoft.azure.storage.RequestOptions.setTimeoutIntervalInMs(java.lang.Integer)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.TableRequestOptions()"
  id: "TableRequestOptions()"
  parent: "com.microsoft.azure.storage.table.TableRequestOptions"
  langs:
  - "java"
  name: "TableRequestOptions()"
  nameWithType: "TableRequestOptions.TableRequestOptions()"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.TableRequestOptions()"
  overload: "com.microsoft.azure.storage.table.TableRequestOptions.TableRequestOptions*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.table"
  summary: "Creates an instance of the `TableRequestOptions`"
  syntax:
    content: "public TableRequestOptions()"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.TableRequestOptions(com.microsoft.azure.storage.table.TableRequestOptions)"
  id: "TableRequestOptions(com.microsoft.azure.storage.table.TableRequestOptions)"
  parent: "com.microsoft.azure.storage.table.TableRequestOptions"
  langs:
  - "java"
  name: "TableRequestOptions(TableRequestOptions other)"
  nameWithType: "TableRequestOptions.TableRequestOptions(TableRequestOptions other)"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.TableRequestOptions(TableRequestOptions other)"
  overload: "com.microsoft.azure.storage.table.TableRequestOptions.TableRequestOptions*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.table"
  summary: "Creates an instance of the `RequestOptions` class by copying values from another `TableRequestOptions` instance."
  syntax:
    content: "public TableRequestOptions(TableRequestOptions other)"
    parameters:
    - id: "other"
      type: "com.microsoft.azure.storage.table.TableRequestOptions"
      description: "A <code>TableRequestOptions</code> object that represents the request options to copy."
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.applyDefaults(com.microsoft.azure.storage.table.TableRequestOptions)"
  id: "applyDefaults(com.microsoft.azure.storage.table.TableRequestOptions)"
  parent: "com.microsoft.azure.storage.table.TableRequestOptions"
  langs:
  - "java"
  name: "applyDefaults(TableRequestOptions modifiedOptions)"
  nameWithType: "TableRequestOptions.applyDefaults(TableRequestOptions modifiedOptions)"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.applyDefaults(TableRequestOptions modifiedOptions)"
  overload: "com.microsoft.azure.storage.table.TableRequestOptions.applyDefaults*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Applies defaults to the options passed in."
  syntax:
    content: "protected static void applyDefaults(TableRequestOptions modifiedOptions)"
    parameters:
    - id: "modifiedOptions"
      type: "com.microsoft.azure.storage.table.TableRequestOptions"
      description: "The options to apply defaults to."
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.assertNoEncryptionPolicyOrStrictMode()"
  id: "assertNoEncryptionPolicyOrStrictMode()"
  parent: "com.microsoft.azure.storage.table.TableRequestOptions"
  langs:
  - "java"
  name: "assertNoEncryptionPolicyOrStrictMode()"
  nameWithType: "TableRequestOptions.assertNoEncryptionPolicyOrStrictMode()"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.assertNoEncryptionPolicyOrStrictMode()"
  overload: "com.microsoft.azure.storage.table.TableRequestOptions.assertNoEncryptionPolicyOrStrictMode*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Assert that if validation is on, an encryption policy is not specified."
  syntax:
    content: "protected void assertNoEncryptionPolicyOrStrictMode()"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.assertPolicyIfRequired()"
  id: "assertPolicyIfRequired()"
  parent: "com.microsoft.azure.storage.table.TableRequestOptions"
  langs:
  - "java"
  name: "assertPolicyIfRequired()"
  nameWithType: "TableRequestOptions.assertPolicyIfRequired()"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.assertPolicyIfRequired()"
  overload: "com.microsoft.azure.storage.table.TableRequestOptions.assertPolicyIfRequired*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Assert that if strict mode is on, an encryption policy is specified."
  syntax:
    content: "protected void assertPolicyIfRequired()"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.clearEncryption()"
  id: "clearEncryption()"
  parent: "com.microsoft.azure.storage.table.TableRequestOptions"
  langs:
  - "java"
  name: "clearEncryption()"
  nameWithType: "TableRequestOptions.clearEncryption()"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.clearEncryption()"
  overload: "com.microsoft.azure.storage.table.TableRequestOptions.clearEncryption*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Clears the encryption properties on this TableRequestOptions object. Useful for operations for which encryption does not make sense, such as CreateTable."
  syntax:
    content: "protected void clearEncryption()"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.getDateBackwardCompatibility()"
  id: "getDateBackwardCompatibility()"
  parent: "com.microsoft.azure.storage.table.TableRequestOptions"
  langs:
  - "java"
  name: "getDateBackwardCompatibility()"
  nameWithType: "TableRequestOptions.getDateBackwardCompatibility()"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.getDateBackwardCompatibility()"
  overload: "com.microsoft.azure.storage.table.TableRequestOptions.getDateBackwardCompatibility*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Gets whether the client should look to correct Date values stored on a <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref> that may have been written using versions of this library prior to 2.0.0, see <xref uid=\"com.microsoft.azure.storage.table.TableRequestOptions.setDateBackwardCompatibility(java.lang.Boolean)\" data-throw-if-not-resolved=\"false\">#setDateBackwardCompatibility(Boolean)</xref>.\n\nSee [here][] for more details.\n\n\n[here]: http://go.microsoft.com/fwlink/?LinkId=523753"
  syntax:
    content: "public Boolean getDateBackwardCompatibility()"
    return:
      type: "java.lang.Boolean"
      description: "<code>true</code> if <code>dateBackwardCompatibility</code> is enabled; otherwise, <code>false</code>"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.getEncryptionPolicy()"
  id: "getEncryptionPolicy()"
  parent: "com.microsoft.azure.storage.table.TableRequestOptions"
  langs:
  - "java"
  name: "getEncryptionPolicy()"
  nameWithType: "TableRequestOptions.getEncryptionPolicy()"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.getEncryptionPolicy()"
  overload: "com.microsoft.azure.storage.table.TableRequestOptions.getEncryptionPolicy*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Gets the encryption policy to use for this request. For more information about the encryption policy defaults, see <xref uid=\"com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionPolicy(com.microsoft.azure.storage.table.TableEncryptionPolicy)\" data-throw-if-not-resolved=\"false\">#setEncryptionPolicy(TableEncryptionPolicy)</xref>."
  syntax:
    content: "public TableEncryptionPolicy getEncryptionPolicy()"
    return:
      type: "com.microsoft.azure.storage.table.TableEncryptionPolicy"
      description: "An <xref uid=\"com.microsoft.azure.storage.table.TableEncryptionPolicy\" data-throw-if-not-resolved=\"false\">TableEncryptionPolicy</xref> object that represents the current encryption policy."
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.getEncryptionResolver()"
  id: "getEncryptionResolver()"
  parent: "com.microsoft.azure.storage.table.TableRequestOptions"
  langs:
  - "java"
  name: "getEncryptionResolver()"
  nameWithType: "TableRequestOptions.getEncryptionResolver()"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.getEncryptionResolver()"
  overload: "com.microsoft.azure.storage.table.TableRequestOptions.getEncryptionResolver*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Gets the interface that contains a function which is used to get the value indicating whether a property should be encrypted or not given the partition key, row key, and the property name. For more information about the <xref uid=\"\" data-throw-if-not-resolved=\"false\">EncryptionResolver</xref> defaults, see <xref uid=\"\" data-throw-if-not-resolved=\"false\">#setEncryptionResolver(EncryptionResolver)</xref>."
  syntax:
    content: "public TableRequestOptions.EncryptionResolver getEncryptionResolver()"
    return:
      type: "com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver"
      description: "The current <xref uid=\"\" data-throw-if-not-resolved=\"false\">PropertyResolver</xref> object."
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.getPropertyResolver()"
  id: "getPropertyResolver()"
  parent: "com.microsoft.azure.storage.table.TableRequestOptions"
  langs:
  - "java"
  name: "getPropertyResolver()"
  nameWithType: "TableRequestOptions.getPropertyResolver()"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.getPropertyResolver()"
  overload: "com.microsoft.azure.storage.table.TableRequestOptions.getPropertyResolver*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Gets the interface that contains a function which is used to get the <xref uid=\"com.microsoft.azure.storage.table.EdmType\" data-throw-if-not-resolved=\"false\">EdmType</xref> for an entity property given the partition key, row, key, and the property name. For more information about the <xref uid=\"\" data-throw-if-not-resolved=\"false\">PropertyResolver</xref> defaults, see <xref uid=\"\" data-throw-if-not-resolved=\"false\">#setPropertyResolver(PropertyResolver)</xref>."
  syntax:
    content: "public TableRequestOptions.PropertyResolver getPropertyResolver()"
    return:
      type: "com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver"
      description: "The current <xref uid=\"\" data-throw-if-not-resolved=\"false\">PropertyResolver</xref> object."
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.getTablePayloadFormat()"
  id: "getTablePayloadFormat()"
  parent: "com.microsoft.azure.storage.table.TableRequestOptions"
  langs:
  - "java"
  name: "getTablePayloadFormat()"
  nameWithType: "TableRequestOptions.getTablePayloadFormat()"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.getTablePayloadFormat()"
  overload: "com.microsoft.azure.storage.table.TableRequestOptions.getTablePayloadFormat*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Gets the <xref uid=\"com.microsoft.azure.storage.table.TablePayloadFormat\" data-throw-if-not-resolved=\"false\">TablePayloadFormat</xref> to be used. For more information about <xref uid=\"com.microsoft.azure.storage.table.TablePayloadFormat\" data-throw-if-not-resolved=\"false\">TablePayloadFormat</xref> defaults, see <xref uid=\"com.microsoft.azure.storage.table.TableRequestOptions.setTablePayloadFormat(com.microsoft.azure.storage.table.TablePayloadFormat)\" data-throw-if-not-resolved=\"false\">#setTablePayloadFormat(TablePayloadFormat)</xref>."
  syntax:
    content: "public TablePayloadFormat getTablePayloadFormat()"
    return:
      type: "com.microsoft.azure.storage.table.TablePayloadFormat"
      description: "The <xref uid=\"com.microsoft.azure.storage.table.TablePayloadFormat\" data-throw-if-not-resolved=\"false\">TablePayloadFormat</xref> used by this <xref uid=\"com.microsoft.azure.storage.table.TableRequest\" data-throw-if-not-resolved=\"false\">TableRequest</xref>."
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.populateAndApplyDefaults(com.microsoft.azure.storage.table.TableRequestOptions,com.microsoft.azure.storage.table.CloudTableClient)"
  id: "populateAndApplyDefaults(com.microsoft.azure.storage.table.TableRequestOptions,com.microsoft.azure.storage.table.CloudTableClient)"
  parent: "com.microsoft.azure.storage.table.TableRequestOptions"
  langs:
  - "java"
  name: "populateAndApplyDefaults(TableRequestOptions options, CloudTableClient client)"
  nameWithType: "TableRequestOptions.populateAndApplyDefaults(TableRequestOptions options, CloudTableClient client)"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.populateAndApplyDefaults(TableRequestOptions options, CloudTableClient client)"
  overload: "com.microsoft.azure.storage.table.TableRequestOptions.populateAndApplyDefaults*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Initializes the values for this `TableRequestOptions` instance, if they are currently `null`, using the values specified in the <xref uid=\"com.microsoft.azure.storage.table.CloudTableClient\" data-throw-if-not-resolved=\"false\">CloudTableClient</xref> parameter."
  syntax:
    content: "protected static final TableRequestOptions populateAndApplyDefaults(TableRequestOptions options, CloudTableClient client)"
    parameters:
    - id: "options"
      type: "com.microsoft.azure.storage.table.TableRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.table.TableRequestOptions\" data-throw-if-not-resolved=\"false\">TableRequestOptions</xref> object which represents the input options to copy from when applying\n            defaults."
    - id: "client"
      type: "com.microsoft.azure.storage.table.CloudTableClient"
      description: "A <xref uid=\"com.microsoft.azure.storage.table.CloudTableClient\" data-throw-if-not-resolved=\"false\">CloudTableClient</xref> object from which to copy the timeout and retry policy."
    return:
      type: "com.microsoft.azure.storage.table.TableRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.table.TableRequestOptions\" data-throw-if-not-resolved=\"false\">TableRequestOptions</xref> object."
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.setDateBackwardCompatibility(java.lang.Boolean)"
  id: "setDateBackwardCompatibility(java.lang.Boolean)"
  parent: "com.microsoft.azure.storage.table.TableRequestOptions"
  langs:
  - "java"
  name: "setDateBackwardCompatibility(Boolean dateBackwardCompatibility)"
  nameWithType: "TableRequestOptions.setDateBackwardCompatibility(Boolean dateBackwardCompatibility)"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.setDateBackwardCompatibility(Boolean dateBackwardCompatibility)"
  overload: "com.microsoft.azure.storage.table.TableRequestOptions.setDateBackwardCompatibility*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Sets whether the client should look to correct Date values stored on a <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref> that may have been written using versions of this library prior to 2.0.0.\n\n<xref uid=\"\" data-throw-if-not-resolved=\"false\">#dateBackwardCompatibility</xref> is by default `false`, indicating a post 2.0.0 version or mixed- platform usage. You can change the <xref uid=\"\" data-throw-if-not-resolved=\"false\">#dateBackwardCompatibility</xref> on this request by setting this property. You can also change the value on the <xref uid=\"com.microsoft.azure.storage.table.CloudTableClient.getDefaultRequestOptions()\" data-throw-if-not-resolved=\"false\">CloudTableClient#getDefaultRequestOptions()</xref> object so that all subsequent requests made via the service client will use that <xref uid=\"\" data-throw-if-not-resolved=\"false\">#dateBackwardCompatibility</xref>.\n\nSee [here][] for more details.\n\n\n[here]: http://go.microsoft.com/fwlink/?LinkId=523753"
  syntax:
    content: "public void setDateBackwardCompatibility(Boolean dateBackwardCompatibility)"
    parameters:
    - id: "dateBackwardCompatibility"
      type: "java.lang.Boolean"
      description: "<code>true</code> to enable <code>dateBackwardCompatibility</code>; otherwise, <code>false</code>"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionPolicy(com.microsoft.azure.storage.table.TableEncryptionPolicy)"
  id: "setEncryptionPolicy(com.microsoft.azure.storage.table.TableEncryptionPolicy)"
  parent: "com.microsoft.azure.storage.table.TableRequestOptions"
  langs:
  - "java"
  name: "setEncryptionPolicy(TableEncryptionPolicy encryptionPolicy)"
  nameWithType: "TableRequestOptions.setEncryptionPolicy(TableEncryptionPolicy encryptionPolicy)"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionPolicy(TableEncryptionPolicy encryptionPolicy)"
  overload: "com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionPolicy*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Sets the TableEncryptionPolicy object to use for this request.\n\nThe default TableEncryptionPolicy is set in the client and is by default null, indicating no encryption. You can change the TableEncryptionPolicy on this request by setting this property. You can also change the value on the <xref uid=\"com.microsoft.azure.storage.ServiceClient.getDefaultRequestOptions()\" data-throw-if-not-resolved=\"false\">ServiceClient#getDefaultRequestOptions()</xref> object so that all subsequent requests made via the service client will use that TableEncryptionPolicy."
  syntax:
    content: "public void setEncryptionPolicy(TableEncryptionPolicy encryptionPolicy)"
    parameters:
    - id: "encryptionPolicy"
      type: "com.microsoft.azure.storage.table.TableEncryptionPolicy"
      description: "the TableEncryptionPolicy object to use when making service requests."
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionResolver(com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver)"
  id: "setEncryptionResolver(com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver)"
  parent: "com.microsoft.azure.storage.table.TableRequestOptions"
  langs:
  - "java"
  name: "setEncryptionResolver(TableRequestOptions.EncryptionResolver encryptionResolver)"
  nameWithType: "TableRequestOptions.setEncryptionResolver(TableRequestOptions.EncryptionResolver encryptionResolver)"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionResolver(TableRequestOptions.EncryptionResolver encryptionResolver)"
  overload: "com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionResolver*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Sets the interface that contains a function which is used to get the value indicating whether a property should be encrypted or not given the partition key, row key, and the property name. A <xref uid=\"\" data-throw-if-not-resolved=\"false\">EncryptionResolver</xref> is required if a <xref uid=\"com.microsoft.azure.storage.table.TableEncryptionPolicy\" data-throw-if-not-resolved=\"false\">TableEncryptionPolicy</xref> is specified.\n\nYou can change the <xref uid=\"\" data-throw-if-not-resolved=\"false\">EncryptionResolver</xref> on this request by setting this property. You can also change the value on the <xref uid=\"com.microsoft.azure.storage.table.CloudTableClient.getDefaultRequestOptions()\" data-throw-if-not-resolved=\"false\">CloudTableClient#getDefaultRequestOptions()</xref> object so that all subsequent requests made via the service client will use that <xref uid=\"\" data-throw-if-not-resolved=\"false\">EncryptionResolver</xref>."
  syntax:
    content: "public void setEncryptionResolver(TableRequestOptions.EncryptionResolver encryptionResolver)"
    parameters:
    - id: "encryptionResolver"
      type: "com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver"
      description: "Specifies the <xref uid=\"\" data-throw-if-not-resolved=\"false\">EncryptionResolver</xref> to set."
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.setPropertyResolver(com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver)"
  id: "setPropertyResolver(com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver)"
  parent: "com.microsoft.azure.storage.table.TableRequestOptions"
  langs:
  - "java"
  name: "setPropertyResolver(TableRequestOptions.PropertyResolver propertyResolver)"
  nameWithType: "TableRequestOptions.setPropertyResolver(TableRequestOptions.PropertyResolver propertyResolver)"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.setPropertyResolver(TableRequestOptions.PropertyResolver propertyResolver)"
  overload: "com.microsoft.azure.storage.table.TableRequestOptions.setPropertyResolver*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Sets the interface that contains a function which is used to get the <xref uid=\"com.microsoft.azure.storage.table.EdmType\" data-throw-if-not-resolved=\"false\">EdmType</xref> for an entity property given the partition key, row, key, and the property name.\n\nThe default <xref uid=\"\" data-throw-if-not-resolved=\"false\">PropertyResolver</xref> is set in the client and is by default null, indicating not to use a property resolver. You can change the <xref uid=\"\" data-throw-if-not-resolved=\"false\">PropertyResolver</xref> on this request by setting this property. You can also change the value on the <xref uid=\"com.microsoft.azure.storage.table.CloudTableClient.getDefaultRequestOptions()\" data-throw-if-not-resolved=\"false\">CloudTableClient#getDefaultRequestOptions()</xref> object so that all subsequent requests made via the service client will use that <xref uid=\"\" data-throw-if-not-resolved=\"false\">PropertyResolver</xref>."
  syntax:
    content: "public void setPropertyResolver(TableRequestOptions.PropertyResolver propertyResolver)"
    parameters:
    - id: "propertyResolver"
      type: "com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver"
      description: "Specifies the <xref uid=\"\" data-throw-if-not-resolved=\"false\">PropertyResolver</xref> to set."
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.setTablePayloadFormat(com.microsoft.azure.storage.table.TablePayloadFormat)"
  id: "setTablePayloadFormat(com.microsoft.azure.storage.table.TablePayloadFormat)"
  parent: "com.microsoft.azure.storage.table.TableRequestOptions"
  langs:
  - "java"
  name: "setTablePayloadFormat(TablePayloadFormat payloadFormat)"
  nameWithType: "TableRequestOptions.setTablePayloadFormat(TablePayloadFormat payloadFormat)"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.setTablePayloadFormat(TablePayloadFormat payloadFormat)"
  overload: "com.microsoft.azure.storage.table.TableRequestOptions.setTablePayloadFormat*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Sets the <xref uid=\"com.microsoft.azure.storage.table.TablePayloadFormat\" data-throw-if-not-resolved=\"false\">TablePayloadFormat</xref> to be used.\n\nThe default <xref uid=\"com.microsoft.azure.storage.table.TablePayloadFormat\" data-throw-if-not-resolved=\"false\">TablePayloadFormat</xref> is set in the client and is by default <xref uid=\"com.microsoft.azure.storage.table.TablePayloadFormat.Json\" data-throw-if-not-resolved=\"false\">TablePayloadFormat#Json</xref>. You can change the <xref uid=\"com.microsoft.azure.storage.table.TablePayloadFormat\" data-throw-if-not-resolved=\"false\">TablePayloadFormat</xref> on this request by setting this property. You can also change the value on the <xref uid=\"com.microsoft.azure.storage.table.CloudTableClient.getDefaultRequestOptions()\" data-throw-if-not-resolved=\"false\">CloudTableClient#getDefaultRequestOptions()</xref> object so that all subsequent requests made via the service client will use that <xref uid=\"com.microsoft.azure.storage.table.TablePayloadFormat\" data-throw-if-not-resolved=\"false\">TablePayloadFormat</xref>."
  syntax:
    content: "public void setTablePayloadFormat(TablePayloadFormat payloadFormat)"
    parameters:
    - id: "payloadFormat"
      type: "com.microsoft.azure.storage.table.TablePayloadFormat"
      description: "Specifies the <xref uid=\"com.microsoft.azure.storage.table.TablePayloadFormat\" data-throw-if-not-resolved=\"false\">TablePayloadFormat</xref> to set."
references:
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.TableRequestOptions*"
  name: "TableRequestOptions"
  nameWithType: "TableRequestOptions.TableRequestOptions"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.TableRequestOptions"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.CloudTableClient"
  name: "CloudTableClient"
  nameWithType: "CloudTableClient"
  fullName: "com.microsoft.azure.storage.table.CloudTableClient"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.populateAndApplyDefaults*"
  name: "populateAndApplyDefaults"
  nameWithType: "TableRequestOptions.populateAndApplyDefaults"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.populateAndApplyDefaults"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.clearEncryption*"
  name: "clearEncryption"
  nameWithType: "TableRequestOptions.clearEncryption"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.clearEncryption"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.applyDefaults*"
  name: "applyDefaults"
  nameWithType: "TableRequestOptions.applyDefaults"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.applyDefaults"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TablePayloadFormat"
  name: "TablePayloadFormat"
  nameWithType: "TablePayloadFormat"
  fullName: "com.microsoft.azure.storage.table.TablePayloadFormat"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.getTablePayloadFormat*"
  name: "getTablePayloadFormat"
  nameWithType: "TableRequestOptions.getTablePayloadFormat"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.getTablePayloadFormat"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver"
  name: "TableRequestOptions.PropertyResolver"
  nameWithType: "TableRequestOptions.PropertyResolver"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.getPropertyResolver*"
  name: "getPropertyResolver"
  nameWithType: "TableRequestOptions.getPropertyResolver"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.getPropertyResolver"
  package: "com.microsoft.azure.storage.table"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.getDateBackwardCompatibility*"
  name: "getDateBackwardCompatibility"
  nameWithType: "TableRequestOptions.getDateBackwardCompatibility"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.getDateBackwardCompatibility"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy"
  name: "TableEncryptionPolicy"
  nameWithType: "TableEncryptionPolicy"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.getEncryptionPolicy*"
  name: "getEncryptionPolicy"
  nameWithType: "TableRequestOptions.getEncryptionPolicy"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.getEncryptionPolicy"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver"
  name: "TableRequestOptions.EncryptionResolver"
  nameWithType: "TableRequestOptions.EncryptionResolver"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.getEncryptionResolver*"
  name: "getEncryptionResolver"
  nameWithType: "TableRequestOptions.getEncryptionResolver"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.getEncryptionResolver"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.setTablePayloadFormat*"
  name: "setTablePayloadFormat"
  nameWithType: "TableRequestOptions.setTablePayloadFormat"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.setTablePayloadFormat"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.setPropertyResolver*"
  name: "setPropertyResolver"
  nameWithType: "TableRequestOptions.setPropertyResolver"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.setPropertyResolver"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.setDateBackwardCompatibility*"
  name: "setDateBackwardCompatibility"
  nameWithType: "TableRequestOptions.setDateBackwardCompatibility"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.setDateBackwardCompatibility"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionPolicy*"
  name: "setEncryptionPolicy"
  nameWithType: "TableRequestOptions.setEncryptionPolicy"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionPolicy"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionResolver*"
  name: "setEncryptionResolver"
  nameWithType: "TableRequestOptions.setEncryptionResolver"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionResolver"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.assertNoEncryptionPolicyOrStrictMode*"
  name: "assertNoEncryptionPolicyOrStrictMode"
  nameWithType: "TableRequestOptions.assertNoEncryptionPolicyOrStrictMode"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.assertNoEncryptionPolicyOrStrictMode"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.assertPolicyIfRequired*"
  name: "assertPolicyIfRequired"
  nameWithType: "TableRequestOptions.assertPolicyIfRequired"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.assertPolicyIfRequired"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.RequestOptions"
  name: "RequestOptions"
  nameWithType: "RequestOptions"
  fullName: "com.microsoft.azure.storage.RequestOptions"
- uid: "com.microsoft.azure.storage.RequestOptions.setRequireEncryption(java.lang.Boolean)"
  name: "RequestOptions.setRequireEncryption(Boolean)"
  nameWithType: "RequestOptions.setRequireEncryption(Boolean)"
  fullName: "com.microsoft.azure.storage.RequestOptions.setRequireEncryption(java.lang.Boolean)"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "com.microsoft.azure.storage.RequestOptions.requireEncryption()"
  name: "RequestOptions.requireEncryption()"
  nameWithType: "RequestOptions.requireEncryption()"
  fullName: "com.microsoft.azure.storage.RequestOptions.requireEncryption()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "com.microsoft.azure.storage.RequestOptions.getTimeoutIntervalInMs()"
  name: "RequestOptions.getTimeoutIntervalInMs()"
  nameWithType: "RequestOptions.getTimeoutIntervalInMs()"
  fullName: "com.microsoft.azure.storage.RequestOptions.getTimeoutIntervalInMs()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "com.microsoft.azure.storage.RequestOptions.getOperationExpiryTimeInMs()"
  name: "RequestOptions.getOperationExpiryTimeInMs()"
  nameWithType: "RequestOptions.getOperationExpiryTimeInMs()"
  fullName: "com.microsoft.azure.storage.RequestOptions.getOperationExpiryTimeInMs()"
- uid: "com.microsoft.azure.storage.RequestOptions.getRetryPolicyFactory()"
  name: "RequestOptions.getRetryPolicyFactory()"
  nameWithType: "RequestOptions.getRetryPolicyFactory()"
  fullName: "com.microsoft.azure.storage.RequestOptions.getRetryPolicyFactory()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.microsoft.azure.storage.RequestOptions.setTimeoutIntervalInMs(java.lang.Integer)"
  name: "RequestOptions.setTimeoutIntervalInMs(Integer)"
  nameWithType: "RequestOptions.setTimeoutIntervalInMs(Integer)"
  fullName: "com.microsoft.azure.storage.RequestOptions.setTimeoutIntervalInMs(java.lang.Integer)"
- uid: "com.microsoft.azure.storage.RequestOptions.setLocationMode(com.microsoft.azure.storage.LocationMode)"
  name: "RequestOptions.setLocationMode(LocationMode)"
  nameWithType: "RequestOptions.setLocationMode(LocationMode)"
  fullName: "com.microsoft.azure.storage.RequestOptions.setLocationMode(com.microsoft.azure.storage.LocationMode)"
- uid: "com.microsoft.azure.storage.RequestOptions.applyBaseDefaultsInternal(com.microsoft.azure.storage.RequestOptions)"
  name: "RequestOptions.applyBaseDefaultsInternal(RequestOptions)"
  nameWithType: "RequestOptions.applyBaseDefaultsInternal(RequestOptions)"
  fullName: "com.microsoft.azure.storage.RequestOptions.applyBaseDefaultsInternal(com.microsoft.azure.storage.RequestOptions)"
- uid: "com.microsoft.azure.storage.RequestOptions.setRetryPolicyFactory(com.microsoft.azure.storage.RetryPolicyFactory)"
  name: "RequestOptions.setRetryPolicyFactory(RetryPolicyFactory)"
  nameWithType: "RequestOptions.setRetryPolicyFactory(RetryPolicyFactory)"
  fullName: "com.microsoft.azure.storage.RequestOptions.setRetryPolicyFactory(com.microsoft.azure.storage.RetryPolicyFactory)"
- uid: "com.microsoft.azure.storage.RequestOptions.populateRequestOptions(com.microsoft.azure.storage.RequestOptions,com.microsoft.azure.storage.RequestOptions,boolean)"
  name: "RequestOptions.populateRequestOptions(RequestOptions,RequestOptions,boolean)"
  nameWithType: "RequestOptions.populateRequestOptions(RequestOptions,RequestOptions,boolean)"
  fullName: "com.microsoft.azure.storage.RequestOptions.populateRequestOptions(com.microsoft.azure.storage.RequestOptions,com.microsoft.azure.storage.RequestOptions,boolean)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "com.microsoft.azure.storage.RequestOptions.setMaximumExecutionTimeInMs(java.lang.Integer)"
  name: "RequestOptions.setMaximumExecutionTimeInMs(Integer)"
  nameWithType: "RequestOptions.setMaximumExecutionTimeInMs(Integer)"
  fullName: "com.microsoft.azure.storage.RequestOptions.setMaximumExecutionTimeInMs(java.lang.Integer)"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.RequestOptions.getMaximumExecutionTimeInMs()"
  name: "RequestOptions.getMaximumExecutionTimeInMs()"
  nameWithType: "RequestOptions.getMaximumExecutionTimeInMs()"
  fullName: "com.microsoft.azure.storage.RequestOptions.getMaximumExecutionTimeInMs()"
- uid: "com.microsoft.azure.storage.RequestOptions.getLocationMode()"
  name: "RequestOptions.getLocationMode()"
  nameWithType: "RequestOptions.getLocationMode()"
  fullName: "com.microsoft.azure.storage.RequestOptions.getLocationMode()"
