### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy"
  id: "PartitionKeyMismatchRetryPolicy"
  parent: "com.azure.cosmos.internal"
  children:
  - "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.PartitionKeyMismatchRetryPolicy(com.azure.cosmos.internal.caches.RxClientCollectionCache,com.azure.cosmos.internal.IDocumentClientRetryPolicy,java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.onBeforeSendRequest(com.azure.cosmos.internal.RxDocumentServiceRequest)"
  - "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.shouldRetry(java.lang.Exception)"
  langs:
  - "java"
  name: "PartitionKeyMismatchRetryPolicy"
  nameWithType: "PartitionKeyMismatchRetryPolicy"
  fullName: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy"
  type: "Class"
  package: "com.azure.cosmos.internal"
  summary: "While this class is public, but it is not part of our published public APIs. This is meant to be internally used only by our sdk. A RetryPolicy implementation that ensures the PartitionKeyDefinitionMap is up-to-date. Entries in the PartitionKeyDefinitionMap can become stale if a collection is deleted and then recreated with the same name but a different partition key definition, if the request is made using name-based links. TODO: verify with Sergii, other than collection deleted and recreated with the same name is there any other scenario which this should be used?"
  syntax:
    content: "public class PartitionKeyMismatchRetryPolicy implements IDocumentClientRetryPolicy"
  inheritance:
  - "java.lang.Object"
  implements:
  - "com.azure.cosmos.internal.IDocumentClientRetryPolicy"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.PartitionKeyMismatchRetryPolicy(com.azure.cosmos.internal.caches.RxClientCollectionCache,com.azure.cosmos.internal.IDocumentClientRetryPolicy,java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "PartitionKeyMismatchRetryPolicy(com.azure.cosmos.internal.caches.RxClientCollectionCache,com.azure.cosmos.internal.IDocumentClientRetryPolicy,java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy"
  langs:
  - "java"
  name: "PartitionKeyMismatchRetryPolicy(RxClientCollectionCache clientCollectionCache, IDocumentClientRetryPolicy nextRetryPolicy, String resourceFullName, RequestOptions requestOptions)"
  nameWithType: "PartitionKeyMismatchRetryPolicy.PartitionKeyMismatchRetryPolicy(RxClientCollectionCache clientCollectionCache, IDocumentClientRetryPolicy nextRetryPolicy, String resourceFullName, RequestOptions requestOptions)"
  fullName: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.PartitionKeyMismatchRetryPolicy(RxClientCollectionCache clientCollectionCache, IDocumentClientRetryPolicy nextRetryPolicy, String resourceFullName, RequestOptions requestOptions)"
  overload: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.PartitionKeyMismatchRetryPolicy*"
  type: "Constructor"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public PartitionKeyMismatchRetryPolicy(RxClientCollectionCache clientCollectionCache, IDocumentClientRetryPolicy nextRetryPolicy, String resourceFullName, RequestOptions requestOptions)"
    parameters:
    - id: "clientCollectionCache"
      type: "com.azure.cosmos.internal.caches.RxClientCollectionCache"
    - id: "nextRetryPolicy"
      type: "com.azure.cosmos.internal.IDocumentClientRetryPolicy"
    - id: "resourceFullName"
      type: "java.lang.String"
    - id: "requestOptions"
      type: "com.azure.cosmos.internal.RequestOptions"
- uid: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.onBeforeSendRequest(com.azure.cosmos.internal.RxDocumentServiceRequest)"
  id: "onBeforeSendRequest(com.azure.cosmos.internal.RxDocumentServiceRequest)"
  parent: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy"
  langs:
  - "java"
  name: "onBeforeSendRequest(RxDocumentServiceRequest request)"
  nameWithType: "PartitionKeyMismatchRetryPolicy.onBeforeSendRequest(RxDocumentServiceRequest request)"
  fullName: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.onBeforeSendRequest(RxDocumentServiceRequest request)"
  overload: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.onBeforeSendRequest*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public void onBeforeSendRequest(RxDocumentServiceRequest request)"
    parameters:
    - id: "request"
      type: "com.azure.cosmos.internal.RxDocumentServiceRequest"
- uid: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.shouldRetry(java.lang.Exception)"
  id: "shouldRetry(java.lang.Exception)"
  parent: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy"
  langs:
  - "java"
  name: "shouldRetry(Exception exception)"
  nameWithType: "PartitionKeyMismatchRetryPolicy.shouldRetry(Exception exception)"
  fullName: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.shouldRetry(Exception exception)"
  overload: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.shouldRetry*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public Mono<IRetryPolicy.ShouldRetryResult> shouldRetry(Exception exception)"
    parameters:
    - id: "exception"
      type: "java.lang.Exception"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.internal.IRetryPolicy.ShouldRetryResult>"
references:
- uid: "com.azure.cosmos.internal.caches.RxClientCollectionCache"
  name: "RxClientCollectionCache"
  nameWithType: "RxClientCollectionCache"
  fullName: "com.azure.cosmos.internal.caches.RxClientCollectionCache"
- uid: "com.azure.cosmos.internal.IDocumentClientRetryPolicy"
  name: "IDocumentClientRetryPolicy"
  nameWithType: "IDocumentClientRetryPolicy"
  fullName: "com.azure.cosmos.internal.IDocumentClientRetryPolicy"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.cosmos.internal.RequestOptions"
  name: "RequestOptions"
  nameWithType: "RequestOptions"
  fullName: "com.azure.cosmos.internal.RequestOptions"
- uid: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.PartitionKeyMismatchRetryPolicy*"
  name: "PartitionKeyMismatchRetryPolicy"
  nameWithType: "PartitionKeyMismatchRetryPolicy.PartitionKeyMismatchRetryPolicy"
  fullName: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.PartitionKeyMismatchRetryPolicy"
  package: "com.azure.cosmos.internal"
- uid: "java.lang.Exception"
  spec.java:
  - uid: "java.lang.Exception"
    name: "Exception"
    fullName: "java.lang.Exception"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.internal.IRetryPolicy.ShouldRetryResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.IRetryPolicy.ShouldRetryResult"
    name: "ShouldRetryResult"
    fullName: "com.azure.cosmos.internal.IRetryPolicy.ShouldRetryResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.shouldRetry*"
  name: "shouldRetry"
  nameWithType: "PartitionKeyMismatchRetryPolicy.shouldRetry"
  fullName: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.shouldRetry"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.RxDocumentServiceRequest"
  name: "RxDocumentServiceRequest"
  nameWithType: "RxDocumentServiceRequest"
  fullName: "com.azure.cosmos.internal.RxDocumentServiceRequest"
- uid: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.onBeforeSendRequest*"
  name: "onBeforeSendRequest"
  nameWithType: "PartitionKeyMismatchRetryPolicy.onBeforeSendRequest"
  fullName: "com.azure.cosmos.internal.PartitionKeyMismatchRetryPolicy.onBeforeSendRequest"
  package: "com.azure.cosmos.internal"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.cosmos.internal.IRetryPolicy.ShouldRetryResult"
  name: "IRetryPolicy.ShouldRetryResult"
  nameWithType: "IRetryPolicy.ShouldRetryResult"
  fullName: "com.azure.cosmos.internal.IRetryPolicy.ShouldRetryResult"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
