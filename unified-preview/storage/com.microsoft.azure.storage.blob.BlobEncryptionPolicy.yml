### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy"
  id: "BlobEncryptionPolicy"
  parent: "com.microsoft.azure.storage.blob"
  children:
  - "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.BlobEncryptionPolicy(com.microsoft.azure.keyvault.core.IKey,com.microsoft.azure.keyvault.core.IKeyResolver)"
  - "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.createAndSetEncryptionContext(java.util.Map<java.lang.String,java.lang.String>,boolean)"
  - "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.decryptBlob(java.io.OutputStream,java.util.Map<java.lang.String,java.lang.String>,java.lang.Boolean,byte[],boolean)"
  - "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKey()"
  - "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKeyResolver()"
  - "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.keyResolver"
  - "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.keyWrapper"
  - "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKey(com.microsoft.azure.keyvault.core.IKey)"
  - "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKeyResolver(com.microsoft.azure.keyvault.core.IKeyResolver)"
  - "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.wrapUserStreamWithDecryptStream(com.microsoft.azure.storage.blob.CloudBlob,java.io.OutputStream,com.microsoft.azure.storage.blob.BlobRequestOptions,java.util.Map<java.lang.String,java.lang.String>,long,boolean,java.lang.Long,java.lang.Long,int,boolean)"
  langs:
  - "java"
  name: "BlobEncryptionPolicy"
  nameWithType: "BlobEncryptionPolicy"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy"
  type: "Class"
  package: "com.microsoft.azure.storage.blob"
  summary: "Represents a blob encryption policy that is used to perform envelope encryption/decryption of Azure blobs."
  syntax:
    content: "public final class BlobEncryptionPolicy"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.BlobEncryptionPolicy(com.microsoft.azure.keyvault.core.IKey,com.microsoft.azure.keyvault.core.IKeyResolver)"
  id: "BlobEncryptionPolicy(com.microsoft.azure.keyvault.core.IKey,com.microsoft.azure.keyvault.core.IKeyResolver)"
  parent: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy"
  langs:
  - "java"
  name: "BlobEncryptionPolicy(IKey key, IKeyResolver keyResolver)"
  nameWithType: "BlobEncryptionPolicy.BlobEncryptionPolicy(IKey key, IKeyResolver keyResolver)"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.BlobEncryptionPolicy(IKey key, IKeyResolver keyResolver)"
  overload: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.BlobEncryptionPolicy*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  summary: "Initializes a new instance of the <xref uid=\"com.microsoft.azure.storage.blob.BlobEncryptionPolicy\" data-throw-if-not-resolved=\"false\">BlobEncryptionPolicy</xref> class with the specified key and resolver.\n\nIf the generated policy is intended to be used for encryption, users are expected to provide a key at the minimum. The absence of key will cause an exception to be thrown during encryption. If the generated policy is intended to be used for decryption, users can provide a keyResolver. The client library will - 1. Invoke the key resolver if specified to get the key. 2. If resolver is not specified but a key is specified, match the key id on the key and use it."
  syntax:
    content: "public BlobEncryptionPolicy(IKey key, IKeyResolver keyResolver)"
    parameters:
    - id: "key"
      type: "com.microsoft.azure.keyvault.core.IKey"
      description: "An object of type <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> that is used to wrap/unwrap the content encryption key."
    - id: "keyResolver"
      type: "com.microsoft.azure.keyvault.core.IKeyResolver"
      description: "The key resolver used to select the correct key for decrypting existing blobs."
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.createAndSetEncryptionContext(java.util.Map<java.lang.String,java.lang.String>,boolean)"
  id: "createAndSetEncryptionContext(java.util.Map<java.lang.String,java.lang.String>,boolean)"
  parent: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy"
  langs:
  - "java"
  name: "createAndSetEncryptionContext(Map<String,String> metadata, boolean noPadding)"
  nameWithType: "BlobEncryptionPolicy.createAndSetEncryptionContext(Map<String,String> metadata, boolean noPadding)"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.createAndSetEncryptionContext(Map<String,String> metadata, boolean noPadding)"
  overload: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.createAndSetEncryptionContext*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Set up the encryption context required for encrypting blobs."
  syntax:
    content: " Cipher createAndSetEncryptionContext(Map<String,String> metadata, boolean noPadding)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Reference to blob metadata object that is used to set the encryption materials."
    - id: "noPadding"
      type: "boolean"
      description: "Value indicating if the padding mode should be set or not."
    return:
      type: "javax.crypto.Cipher"
      description: "The Cipher to use to decrypt the blob."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "An exception representing any error which occurred during the operation."
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.decryptBlob(java.io.OutputStream,java.util.Map<java.lang.String,java.lang.String>,java.lang.Boolean,byte[],boolean)"
  id: "decryptBlob(java.io.OutputStream,java.util.Map<java.lang.String,java.lang.String>,java.lang.Boolean,byte[],boolean)"
  parent: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy"
  langs:
  - "java"
  name: "decryptBlob(OutputStream userProvidedStream, Map<String,String> metadata, Boolean requireEncryption, byte[] iv, boolean noPadding)"
  nameWithType: "BlobEncryptionPolicy.decryptBlob(OutputStream userProvidedStream, Map<String,String> metadata, Boolean requireEncryption, byte[] iv, boolean noPadding)"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.decryptBlob(OutputStream userProvidedStream, Map<String,String> metadata, Boolean requireEncryption, byte[] iv, boolean noPadding)"
  overload: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.decryptBlob*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Return a reference to a <xref uid=\"java.io.OutputStream\" data-throw-if-not-resolved=\"false\">OutputStream</xref> given a user stream. This method is used for decrypting blobs."
  syntax:
    content: " OutputStream decryptBlob(OutputStream userProvidedStream, Map<String,String> metadata, Boolean requireEncryption, byte[] iv, boolean noPadding)"
    parameters:
    - id: "userProvidedStream"
      type: "java.io.OutputStream"
      description: "The output stream provided by the user."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Reference to blob metadata object that is used to get the encryption materials."
    - id: "requireEncryption"
      type: "java.lang.Boolean"
      description: "A value to indicate that the data read from the server should be encrypted."
    - id: "iv"
      type: "byte[]"
      description: "The iv to use if pre-buffered. Used only for range reads."
    - id: "noPadding"
      type: "boolean"
      description: "Value indicating if the padding mode should be set or not."
    return:
      type: "java.io.OutputStream"
      description: "A reference to a <xref uid=\"java.io.OutputStream\" data-throw-if-not-resolved=\"false\">OutputStream</xref> that will be written to."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "An exception representing any error which occurred during the operation."
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKey()"
  id: "getKey()"
  parent: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy"
  langs:
  - "java"
  name: "getKey()"
  nameWithType: "BlobEncryptionPolicy.getKey()"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKey()"
  overload: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKey*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Gets the <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> that is used to wrap/unwrap the content key during encryption."
  syntax:
    content: "public IKey getKey()"
    return:
      type: "com.microsoft.azure.keyvault.core.IKey"
      description: "An <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> object."
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKeyResolver()"
  id: "getKeyResolver()"
  parent: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy"
  langs:
  - "java"
  name: "getKeyResolver()"
  nameWithType: "BlobEncryptionPolicy.getKeyResolver()"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKeyResolver()"
  overload: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKeyResolver*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Gets the key resolver used to select the correct key for decrypting existing blobs."
  syntax:
    content: "public IKeyResolver getKeyResolver()"
    return:
      type: "com.microsoft.azure.keyvault.core.IKeyResolver"
      description: "A resolver that returns an <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> given a keyId."
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.keyResolver"
  id: "keyResolver"
  parent: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy"
  langs:
  - "java"
  name: "keyResolver"
  nameWithType: "BlobEncryptionPolicy.keyResolver"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.keyResolver"
  type: "Field"
  package: "com.microsoft.azure.storage.blob"
  summary: "The <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKeyResolver</xref> used to select the correct key for decrypting existing blobs."
  syntax:
    content: "public IKeyResolver keyResolver"
    return:
      type: "com.microsoft.azure.keyvault.core.IKeyResolver"
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.keyWrapper"
  id: "keyWrapper"
  parent: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy"
  langs:
  - "java"
  name: "keyWrapper"
  nameWithType: "BlobEncryptionPolicy.keyWrapper"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.keyWrapper"
  type: "Field"
  package: "com.microsoft.azure.storage.blob"
  summary: "An object of type <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> that is used to wrap/unwrap the content key during encryption."
  syntax:
    content: "public IKey keyWrapper"
    return:
      type: "com.microsoft.azure.keyvault.core.IKey"
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKey(com.microsoft.azure.keyvault.core.IKey)"
  id: "setKey(com.microsoft.azure.keyvault.core.IKey)"
  parent: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy"
  langs:
  - "java"
  name: "setKey(IKey key)"
  nameWithType: "BlobEncryptionPolicy.setKey(IKey key)"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKey(IKey key)"
  overload: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKey*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Sets the <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> that is used to wrap/unwrap the content key during encryption."
  syntax:
    content: "public void setKey(IKey key)"
    parameters:
    - id: "key"
      type: "com.microsoft.azure.keyvault.core.IKey"
      description: "An <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> object."
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKeyResolver(com.microsoft.azure.keyvault.core.IKeyResolver)"
  id: "setKeyResolver(com.microsoft.azure.keyvault.core.IKeyResolver)"
  parent: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy"
  langs:
  - "java"
  name: "setKeyResolver(IKeyResolver keyResolver)"
  nameWithType: "BlobEncryptionPolicy.setKeyResolver(IKeyResolver keyResolver)"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKeyResolver(IKeyResolver keyResolver)"
  overload: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKeyResolver*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Sets the key resolver used to select the correct key for decrypting existing blobs."
  syntax:
    content: "public void setKeyResolver(IKeyResolver keyResolver)"
    parameters:
    - id: "keyResolver"
      type: "com.microsoft.azure.keyvault.core.IKeyResolver"
      description: "A resolver that returns an <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> given a keyId."
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.wrapUserStreamWithDecryptStream(com.microsoft.azure.storage.blob.CloudBlob,java.io.OutputStream,com.microsoft.azure.storage.blob.BlobRequestOptions,java.util.Map<java.lang.String,java.lang.String>,long,boolean,java.lang.Long,java.lang.Long,int,boolean)"
  id: "wrapUserStreamWithDecryptStream(com.microsoft.azure.storage.blob.CloudBlob,java.io.OutputStream,com.microsoft.azure.storage.blob.BlobRequestOptions,java.util.Map<java.lang.String,java.lang.String>,long,boolean,java.lang.Long,java.lang.Long,int,boolean)"
  parent: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy"
  langs:
  - "java"
  name: "wrapUserStreamWithDecryptStream(CloudBlob blob, OutputStream userProvidedStream, BlobRequestOptions options, Map<String,String> metadata, long blobLength, boolean rangeRead, Long endOffset, Long userSpecifiedLength, int discardFirst, boolean bufferIV)"
  nameWithType: "BlobEncryptionPolicy.wrapUserStreamWithDecryptStream(CloudBlob blob, OutputStream userProvidedStream, BlobRequestOptions options, Map<String,String> metadata, long blobLength, boolean rangeRead, Long endOffset, Long userSpecifiedLength, int discardFirst, boolean bufferIV)"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.wrapUserStreamWithDecryptStream(CloudBlob blob, OutputStream userProvidedStream, BlobRequestOptions options, Map<String,String> metadata, long blobLength, boolean rangeRead, Long endOffset, Long userSpecifiedLength, int discardFirst, boolean bufferIV)"
  overload: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.wrapUserStreamWithDecryptStream*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Internal helper method to wrap a user provided stream with the appropriate crypto stream."
  syntax:
    content: "static OutputStream wrapUserStreamWithDecryptStream(CloudBlob blob, OutputStream userProvidedStream, BlobRequestOptions options, Map<String,String> metadata, long blobLength, boolean rangeRead, Long endOffset, Long userSpecifiedLength, int discardFirst, boolean bufferIV)"
    parameters:
    - id: "blob"
      type: "com.microsoft.azure.storage.blob.CloudBlob"
    - id: "userProvidedStream"
      type: "java.io.OutputStream"
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    - id: "blobLength"
      type: "long"
    - id: "rangeRead"
      type: "boolean"
    - id: "endOffset"
      type: "java.lang.Long"
    - id: "userSpecifiedLength"
      type: "java.lang.Long"
    - id: "discardFirst"
      type: "int"
    - id: "bufferIV"
      type: "boolean"
    return:
      type: "java.io.OutputStream"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
references:
- uid: "com.microsoft.azure.keyvault.core.IKey"
  spec.java:
  - uid: "com.microsoft.azure.keyvault.core.IKey"
    name: "IKey"
    fullName: "com.microsoft.azure.keyvault.core.IKey"
- uid: "com.microsoft.azure.keyvault.core.IKeyResolver"
  spec.java:
  - uid: "com.microsoft.azure.keyvault.core.IKeyResolver"
    name: "IKeyResolver"
    fullName: "com.microsoft.azure.keyvault.core.IKeyResolver"
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.BlobEncryptionPolicy*"
  name: "BlobEncryptionPolicy"
  nameWithType: "BlobEncryptionPolicy.BlobEncryptionPolicy"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.BlobEncryptionPolicy"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKey*"
  name: "getKey"
  nameWithType: "BlobEncryptionPolicy.getKey"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKey"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKeyResolver*"
  name: "getKeyResolver"
  nameWithType: "BlobEncryptionPolicy.getKeyResolver"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.getKeyResolver"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKey*"
  name: "setKey"
  nameWithType: "BlobEncryptionPolicy.setKey"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKey"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKeyResolver*"
  name: "setKeyResolver"
  nameWithType: "BlobEncryptionPolicy.setKeyResolver"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.setKeyResolver"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.StorageException"
  name: "StorageException"
  nameWithType: "StorageException"
  fullName: "com.microsoft.azure.storage.StorageException"
- uid: "java.io.OutputStream"
  spec.java:
  - uid: "java.io.OutputStream"
    name: "OutputStream"
    fullName: "java.io.OutputStream"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.decryptBlob*"
  name: "decryptBlob"
  nameWithType: "BlobEncryptionPolicy.decryptBlob"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.decryptBlob"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudBlob"
  name: "CloudBlob"
  nameWithType: "CloudBlob"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob"
- uid: "com.microsoft.azure.storage.blob.BlobRequestOptions"
  name: "BlobRequestOptions"
  nameWithType: "BlobRequestOptions"
  fullName: "com.microsoft.azure.storage.blob.BlobRequestOptions"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "java.lang.Long"
  spec.java:
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.wrapUserStreamWithDecryptStream*"
  name: "wrapUserStreamWithDecryptStream"
  nameWithType: "BlobEncryptionPolicy.wrapUserStreamWithDecryptStream"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.wrapUserStreamWithDecryptStream"
  package: "com.microsoft.azure.storage.blob"
- uid: "javax.crypto.Cipher"
  spec.java:
  - uid: "javax.crypto.Cipher"
    name: "Cipher"
    fullName: "javax.crypto.Cipher"
- uid: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.createAndSetEncryptionContext*"
  name: "createAndSetEncryptionContext"
  nameWithType: "BlobEncryptionPolicy.createAndSetEncryptionContext"
  fullName: "com.microsoft.azure.storage.blob.BlobEncryptionPolicy.createAndSetEncryptionContext"
  package: "com.microsoft.azure.storage.blob"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
