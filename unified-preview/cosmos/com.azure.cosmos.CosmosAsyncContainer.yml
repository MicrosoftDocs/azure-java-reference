### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.CosmosAsyncContainer"
  id: "CosmosAsyncContainer"
  parent: "com.azure.cosmos"
  children:
  - "com.azure.cosmos.CosmosAsyncContainer.CosmosAsyncContainer(java.lang.String,com.azure.cosmos.CosmosAsyncDatabase)"
  - "com.azure.cosmos.CosmosAsyncContainer.URIPathSegment()"
  - "com.azure.cosmos.CosmosAsyncContainer.createItem(java.lang.Object)"
  - "com.azure.cosmos.CosmosAsyncContainer.createItem(java.lang.Object,com.azure.cosmos.CosmosItemRequestOptions)"
  - "com.azure.cosmos.CosmosAsyncContainer.delete()"
  - "com.azure.cosmos.CosmosAsyncContainer.delete(com.azure.cosmos.CosmosContainerRequestOptions)"
  - "com.azure.cosmos.CosmosAsyncContainer.getConflict(java.lang.String)"
  - "com.azure.cosmos.CosmosAsyncContainer.getDatabase()"
  - "com.azure.cosmos.CosmosAsyncContainer.getId()"
  - "com.azure.cosmos.CosmosAsyncContainer.getItem(java.lang.String,java.lang.Object)"
  - "com.azure.cosmos.CosmosAsyncContainer.getLink()"
  - "com.azure.cosmos.CosmosAsyncContainer.getScripts()"
  - "com.azure.cosmos.CosmosAsyncContainer.parentLink()"
  - "com.azure.cosmos.CosmosAsyncContainer.queryChangeFeedItems(com.azure.cosmos.ChangeFeedOptions)"
  - "com.azure.cosmos.CosmosAsyncContainer.queryConflicts(java.lang.String)"
  - "com.azure.cosmos.CosmosAsyncContainer.queryConflicts(java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.CosmosAsyncContainer.queryItems(com.azure.cosmos.SqlQuerySpec)"
  - "com.azure.cosmos.CosmosAsyncContainer.queryItems(com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.CosmosAsyncContainer.queryItems(java.lang.String)"
  - "com.azure.cosmos.CosmosAsyncContainer.queryItems(java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.CosmosAsyncContainer.read()"
  - "com.azure.cosmos.CosmosAsyncContainer.read(com.azure.cosmos.CosmosContainerRequestOptions)"
  - "com.azure.cosmos.CosmosAsyncContainer.readAllConflicts(com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.CosmosAsyncContainer.readAllItems()"
  - "com.azure.cosmos.CosmosAsyncContainer.readAllItems(com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.CosmosAsyncContainer.readProvisionedThroughput()"
  - "com.azure.cosmos.CosmosAsyncContainer.replace(com.azure.cosmos.CosmosContainerProperties)"
  - "com.azure.cosmos.CosmosAsyncContainer.replace(com.azure.cosmos.CosmosContainerProperties,com.azure.cosmos.CosmosContainerRequestOptions)"
  - "com.azure.cosmos.CosmosAsyncContainer.replaceProvisionedThroughput(int)"
  - "com.azure.cosmos.CosmosAsyncContainer.setId(java.lang.String)"
  - "com.azure.cosmos.CosmosAsyncContainer.upsertItem(java.lang.Object)"
  - "com.azure.cosmos.CosmosAsyncContainer.upsertItem(java.lang.Object,com.azure.cosmos.CosmosItemRequestOptions)"
  langs:
  - "java"
  name: "CosmosAsyncContainer"
  nameWithType: "CosmosAsyncContainer"
  fullName: "com.azure.cosmos.CosmosAsyncContainer"
  type: "Class"
  package: "com.azure.cosmos"
  summary: "Provides methods for reading, deleting, and replacing existing Containers. Provides methods for interacting with child resources (Items, Scripts, Conflicts)"
  syntax:
    content: "public class CosmosAsyncContainer"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.CosmosAsyncContainer.CosmosAsyncContainer(java.lang.String,com.azure.cosmos.CosmosAsyncDatabase)"
  id: "CosmosAsyncContainer(java.lang.String,com.azure.cosmos.CosmosAsyncDatabase)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "CosmosAsyncContainer(String id, CosmosAsyncDatabase database)"
  nameWithType: "CosmosAsyncContainer.CosmosAsyncContainer(String id, CosmosAsyncDatabase database)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.CosmosAsyncContainer(String id, CosmosAsyncDatabase database)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.CosmosAsyncContainer*"
  type: "Constructor"
  package: "com.azure.cosmos"
  syntax:
    content: " CosmosAsyncContainer(String id, CosmosAsyncDatabase database)"
    parameters:
    - id: "id"
      type: "java.lang.String"
    - id: "database"
      type: "com.azure.cosmos.CosmosAsyncDatabase"
- uid: "com.azure.cosmos.CosmosAsyncContainer.URIPathSegment()"
  id: "URIPathSegment()"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "URIPathSegment()"
  nameWithType: "CosmosAsyncContainer.URIPathSegment()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.URIPathSegment()"
  overload: "com.azure.cosmos.CosmosAsyncContainer.URIPathSegment*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String URIPathSegment()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncContainer.createItem(java.lang.Object)"
  id: "createItem(java.lang.Object)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "createItem(Object item)"
  nameWithType: "CosmosAsyncContainer.createItem(Object item)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.createItem(Object item)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.createItem*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a cosmos item. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the created cosmos item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncItemResponse> createItem(Object item)"
    parameters:
    - id: "item"
      type: "java.lang.Object"
      description: "the cosmos item represented as a POJO or cosmos item object."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncItemResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response with the\n         created cosmos item or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.createItem(java.lang.Object,com.azure.cosmos.CosmosItemRequestOptions)"
  id: "createItem(java.lang.Object,com.azure.cosmos.CosmosItemRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "createItem(Object item, CosmosItemRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.createItem(Object item, CosmosItemRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.createItem(Object item, CosmosItemRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.createItem*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a cosmos item. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the created cosmos item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncItemResponse> createItem(Object item, CosmosItemRequestOptions options)"
    parameters:
    - id: "item"
      type: "java.lang.Object"
      description: "the cosmos item represented as a POJO or cosmos item object."
    - id: "options"
      type: "com.azure.cosmos.CosmosItemRequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncItemResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response with the\n         created cosmos item or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.delete()"
  id: "delete()"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "delete()"
  nameWithType: "CosmosAsyncContainer.delete()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.delete()"
  overload: "com.azure.cosmos.CosmosAsyncContainer.delete*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Deletes the item container After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single cosmos container response for the deleted container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncContainerResponse> delete()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncContainerResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos container response for\n         the deleted container or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.delete(com.azure.cosmos.CosmosContainerRequestOptions)"
  id: "delete(com.azure.cosmos.CosmosContainerRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "delete(CosmosContainerRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.delete(CosmosContainerRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.delete(CosmosContainerRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.delete*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Deletes the item container After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single cosmos container response for the deleted database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncContainerResponse> delete(CosmosContainerRequestOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.CosmosContainerRequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncContainerResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos container response for\n         the deleted database or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.getConflict(java.lang.String)"
  id: "getConflict(java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "getConflict(String id)"
  nameWithType: "CosmosAsyncContainer.getConflict(String id)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.getConflict(String id)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.getConflict*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets a CosmosAsyncConflict object without making a service call"
  syntax:
    content: "public CosmosAsyncConflict getConflict(String id)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "id of the cosmos conflict"
    return:
      type: "com.azure.cosmos.CosmosAsyncConflict"
      description: "a cosmos conflict"
- uid: "com.azure.cosmos.CosmosAsyncContainer.getDatabase()"
  id: "getDatabase()"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "getDatabase()"
  nameWithType: "CosmosAsyncContainer.getDatabase()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.getDatabase()"
  overload: "com.azure.cosmos.CosmosAsyncContainer.getDatabase*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the parent Database"
  syntax:
    content: "public CosmosAsyncDatabase getDatabase()"
    return:
      type: "com.azure.cosmos.CosmosAsyncDatabase"
      description: "the <xref uid=\"com.azure.cosmos.CosmosAsyncDatabase\" data-throw-if-not-resolved=\"false\">CosmosAsyncDatabase</xref>"
- uid: "com.azure.cosmos.CosmosAsyncContainer.getId()"
  id: "getId()"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "getId()"
  nameWithType: "CosmosAsyncContainer.getId()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.getId()"
  overload: "com.azure.cosmos.CosmosAsyncContainer.getId*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Get the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncContainer\" data-throw-if-not-resolved=\"false\">CosmosAsyncContainer</xref>"
  syntax:
    content: "public String getId()"
    return:
      type: "java.lang.String"
      description: "the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncContainer\" data-throw-if-not-resolved=\"false\">CosmosAsyncContainer</xref>"
- uid: "com.azure.cosmos.CosmosAsyncContainer.getItem(java.lang.String,java.lang.Object)"
  id: "getItem(java.lang.String,java.lang.Object)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "getItem(String id, Object partitionKey)"
  nameWithType: "CosmosAsyncContainer.getItem(String id, Object partitionKey)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.getItem(String id, Object partitionKey)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.getItem*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets a CosmosAsyncItem object without making a service call"
  syntax:
    content: "public CosmosAsyncItem getItem(String id, Object partitionKey)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "id of the item"
    - id: "partitionKey"
      type: "java.lang.Object"
      description: "the partition key"
    return:
      type: "com.azure.cosmos.CosmosAsyncItem"
      description: "a cosmos item"
- uid: "com.azure.cosmos.CosmosAsyncContainer.getLink()"
  id: "getLink()"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "getLink()"
  nameWithType: "CosmosAsyncContainer.getLink()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.getLink()"
  overload: "com.azure.cosmos.CosmosAsyncContainer.getLink*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String getLink()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncContainer.getScripts()"
  id: "getScripts()"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "getScripts()"
  nameWithType: "CosmosAsyncContainer.getScripts()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.getScripts()"
  overload: "com.azure.cosmos.CosmosAsyncContainer.getScripts*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: "public CosmosAsyncScripts getScripts()"
    return:
      type: "com.azure.cosmos.CosmosAsyncScripts"
- uid: "com.azure.cosmos.CosmosAsyncContainer.parentLink()"
  id: "parentLink()"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "parentLink()"
  nameWithType: "CosmosAsyncContainer.parentLink()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.parentLink()"
  overload: "com.azure.cosmos.CosmosAsyncContainer.parentLink*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String parentLink()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncContainer.queryChangeFeedItems(com.azure.cosmos.ChangeFeedOptions)"
  id: "queryChangeFeedItems(com.azure.cosmos.ChangeFeedOptions)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "queryChangeFeedItems(ChangeFeedOptions changeFeedOptions)"
  nameWithType: "CosmosAsyncContainer.queryChangeFeedItems(ChangeFeedOptions changeFeedOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.queryChangeFeedItems(ChangeFeedOptions changeFeedOptions)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.queryChangeFeedItems*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query for documents in a items in a container After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public Flux<FeedResponse<CosmosItemProperties>> queryChangeFeedItems(ChangeFeedOptions changeFeedOptions)"
    parameters:
    - id: "changeFeedOptions"
      type: "com.azure.cosmos.ChangeFeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.CosmosItemProperties>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the\n         obtained items or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.queryConflicts(java.lang.String)"
  id: "queryConflicts(java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "queryConflicts(String query)"
  nameWithType: "CosmosAsyncContainer.queryConflicts(String query)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.queryConflicts(String query)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.queryConflicts*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Queries all the conflicts in the container"
  syntax:
    content: "public Flux<FeedResponse<CosmosConflictProperties>> queryConflicts(String query)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "the query"
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.CosmosConflictProperties>>"
      description: "a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the\n         obtained conflicts or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.queryConflicts(java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "queryConflicts(java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "queryConflicts(String query, FeedOptions options)"
  nameWithType: "CosmosAsyncContainer.queryConflicts(String query, FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.queryConflicts(String query, FeedOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.queryConflicts*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Queries all the conflicts in the container"
  syntax:
    content: "public Flux<FeedResponse<CosmosConflictProperties>> queryConflicts(String query, FeedOptions options)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "the query"
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options"
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.CosmosConflictProperties>>"
      description: "a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the\n         obtained conflicts or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.queryItems(com.azure.cosmos.SqlQuerySpec)"
  id: "queryItems(com.azure.cosmos.SqlQuerySpec)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "queryItems(SqlQuerySpec querySpec)"
  nameWithType: "CosmosAsyncContainer.queryItems(SqlQuerySpec querySpec)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.queryItems(SqlQuerySpec querySpec)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.queryItems*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query for documents in a items in a container After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public Flux<FeedResponse<CosmosItemProperties>> queryItems(SqlQuerySpec querySpec)"
    parameters:
    - id: "querySpec"
      type: "com.azure.cosmos.SqlQuerySpec"
      description: "the SQL query specification."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.CosmosItemProperties>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the\n         obtained items or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.queryItems(com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  id: "queryItems(com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "queryItems(SqlQuerySpec querySpec, FeedOptions options)"
  nameWithType: "CosmosAsyncContainer.queryItems(SqlQuerySpec querySpec, FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.queryItems(SqlQuerySpec querySpec, FeedOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.queryItems*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query for documents in a items in a container After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public Flux<FeedResponse<CosmosItemProperties>> queryItems(SqlQuerySpec querySpec, FeedOptions options)"
    parameters:
    - id: "querySpec"
      type: "com.azure.cosmos.SqlQuerySpec"
      description: "the SQL query specification."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.CosmosItemProperties>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the\n         obtained items or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.queryItems(java.lang.String)"
  id: "queryItems(java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "queryItems(String query)"
  nameWithType: "CosmosAsyncContainer.queryItems(String query)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.queryItems(String query)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.queryItems*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query for documents in a items in a container After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public Flux<FeedResponse<CosmosItemProperties>> queryItems(String query)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "the query."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.CosmosItemProperties>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the\n         obtained items or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.queryItems(java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "queryItems(java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "queryItems(String query, FeedOptions options)"
  nameWithType: "CosmosAsyncContainer.queryItems(String query, FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.queryItems(String query, FeedOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.queryItems*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query for documents in a items in a container After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public Flux<FeedResponse<CosmosItemProperties>> queryItems(String query, FeedOptions options)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "the query."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.CosmosItemProperties>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the\n         obtained items or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.read()"
  id: "read()"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "read()"
  nameWithType: "CosmosAsyncContainer.read()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.read()"
  overload: "com.azure.cosmos.CosmosAsyncContainer.read*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads the document container After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single cosmos container response with the read container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncContainerResponse> read()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncContainerResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos container response with\n         the read container or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.read(com.azure.cosmos.CosmosContainerRequestOptions)"
  id: "read(com.azure.cosmos.CosmosContainerRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "read(CosmosContainerRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.read(CosmosContainerRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.read(CosmosContainerRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.read*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads the document container by the container link. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single cosmos container response with the read container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncContainerResponse> read(CosmosContainerRequestOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.CosmosContainerRequestOptions"
      description: "The cosmos container request options."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncContainerResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos container response with\n         the read container or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.readAllConflicts(com.azure.cosmos.FeedOptions)"
  id: "readAllConflicts(com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "readAllConflicts(FeedOptions options)"
  nameWithType: "CosmosAsyncContainer.readAllConflicts(FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.readAllConflicts(FeedOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.readAllConflicts*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Lists all the conflicts in the container"
  syntax:
    content: "public Flux<FeedResponse<CosmosConflictProperties>> readAllConflicts(FeedOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options"
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.CosmosConflictProperties>>"
      description: "a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the\n         obtained conflicts or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.readAllItems()"
  id: "readAllItems()"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "readAllItems()"
  nameWithType: "CosmosAsyncContainer.readAllItems()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.readAllItems()"
  overload: "com.azure.cosmos.CosmosAsyncContainer.readAllItems*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads all cosmos items in the container. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response of the read cosmos items. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public Flux<FeedResponse<CosmosItemProperties>> readAllItems()"
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.CosmosItemProperties>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the\n         read cosmos items or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.readAllItems(com.azure.cosmos.FeedOptions)"
  id: "readAllItems(com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "readAllItems(FeedOptions options)"
  nameWithType: "CosmosAsyncContainer.readAllItems(FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.readAllItems(FeedOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.readAllItems*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads all cosmos items in a container. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response of the read cosmos items. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public Flux<FeedResponse<CosmosItemProperties>> readAllItems(FeedOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.CosmosItemProperties>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the\n         read cosmos items or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.readProvisionedThroughput()"
  id: "readProvisionedThroughput()"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "readProvisionedThroughput()"
  nameWithType: "CosmosAsyncContainer.readProvisionedThroughput()"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.readProvisionedThroughput()"
  overload: "com.azure.cosmos.CosmosAsyncContainer.readProvisionedThroughput*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the throughput of the container"
  syntax:
    content: "public Mono<Integer> readProvisionedThroughput()"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Integer>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing throughput or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.replace(com.azure.cosmos.CosmosContainerProperties)"
  id: "replace(com.azure.cosmos.CosmosContainerProperties)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "replace(CosmosContainerProperties containerSettings)"
  nameWithType: "CosmosAsyncContainer.replace(CosmosContainerProperties containerSettings)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.replace(CosmosContainerProperties containerSettings)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.replace*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Replaces a document container. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single cosmos container response with the replaced document container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncContainerResponse> replace(CosmosContainerProperties containerSettings)"
    parameters:
    - id: "containerSettings"
      type: "com.azure.cosmos.CosmosContainerProperties"
      description: "the item container properties"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncContainerResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos container response with\n         the replaced document container or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.replace(com.azure.cosmos.CosmosContainerProperties,com.azure.cosmos.CosmosContainerRequestOptions)"
  id: "replace(com.azure.cosmos.CosmosContainerProperties,com.azure.cosmos.CosmosContainerRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "replace(CosmosContainerProperties containerSettings, CosmosContainerRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.replace(CosmosContainerProperties containerSettings, CosmosContainerRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.replace(CosmosContainerProperties containerSettings, CosmosContainerRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.replace*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Replaces a document container. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single cosmos container response with the replaced document container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncContainerResponse> replace(CosmosContainerProperties containerSettings, CosmosContainerRequestOptions options)"
    parameters:
    - id: "containerSettings"
      type: "com.azure.cosmos.CosmosContainerProperties"
      description: "the item container properties"
    - id: "options"
      type: "com.azure.cosmos.CosmosContainerRequestOptions"
      description: "the cosmos container request options."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncContainerResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos container response with\n         the replaced document container or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.replaceProvisionedThroughput(int)"
  id: "replaceProvisionedThroughput(int)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "replaceProvisionedThroughput(int requestUnitsPerSecond)"
  nameWithType: "CosmosAsyncContainer.replaceProvisionedThroughput(int requestUnitsPerSecond)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.replaceProvisionedThroughput(int requestUnitsPerSecond)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.replaceProvisionedThroughput*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets throughput provisioned for a container in measurement of Requests-per-Unit in the Azure Cosmos service."
  syntax:
    content: "public Mono<Integer> replaceProvisionedThroughput(int requestUnitsPerSecond)"
    parameters:
    - id: "requestUnitsPerSecond"
      type: "int"
      description: "the cosmos container throughput, expressed in\n                              Request Units per second"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Integer>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing throughput or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.setId(java.lang.String)"
  id: "setId(java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "setId(String id)"
  nameWithType: "CosmosAsyncContainer.setId(String id)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.setId(String id)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.setId*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Set the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncContainer\" data-throw-if-not-resolved=\"false\">CosmosAsyncContainer</xref>"
  syntax:
    content: " CosmosAsyncContainer setId(String id)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncContainer\" data-throw-if-not-resolved=\"false\">CosmosAsyncContainer</xref>"
    return:
      type: "com.azure.cosmos.CosmosAsyncContainer"
      description: "the same <xref uid=\"com.azure.cosmos.CosmosAsyncContainer\" data-throw-if-not-resolved=\"false\">CosmosAsyncContainer</xref> that had the id set"
- uid: "com.azure.cosmos.CosmosAsyncContainer.upsertItem(java.lang.Object)"
  id: "upsertItem(java.lang.Object)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "upsertItem(Object item)"
  nameWithType: "CosmosAsyncContainer.upsertItem(Object item)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.upsertItem(Object item)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.upsertItem*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Upserts an item. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the upserted item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncItemResponse> upsertItem(Object item)"
    parameters:
    - id: "item"
      type: "java.lang.Object"
      description: "the item represented as a POJO or Item object to upsert."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncItemResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response with the\n         upserted document or an error."
- uid: "com.azure.cosmos.CosmosAsyncContainer.upsertItem(java.lang.Object,com.azure.cosmos.CosmosItemRequestOptions)"
  id: "upsertItem(java.lang.Object,com.azure.cosmos.CosmosItemRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncContainer"
  langs:
  - "java"
  name: "upsertItem(Object item, CosmosItemRequestOptions options)"
  nameWithType: "CosmosAsyncContainer.upsertItem(Object item, CosmosItemRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.upsertItem(Object item, CosmosItemRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncContainer.upsertItem*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Upserts a cosmos item. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the upserted item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncItemResponse> upsertItem(Object item, CosmosItemRequestOptions options)"
    parameters:
    - id: "item"
      type: "java.lang.Object"
      description: "the item represented as a POJO or Item object to upsert."
    - id: "options"
      type: "com.azure.cosmos.CosmosItemRequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncItemResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response with the\n         upserted document or an error."
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncDatabase"
  name: "CosmosAsyncDatabase"
  nameWithType: "CosmosAsyncDatabase"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase"
- uid: "com.azure.cosmos.CosmosAsyncContainer.CosmosAsyncContainer*"
  name: "CosmosAsyncContainer"
  nameWithType: "CosmosAsyncContainer.CosmosAsyncContainer"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.CosmosAsyncContainer"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncContainer.getId*"
  name: "getId"
  nameWithType: "CosmosAsyncContainer.getId"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.getId"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncContainer.setId*"
  name: "setId"
  nameWithType: "CosmosAsyncContainer.setId"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.setId"
  package: "com.azure.cosmos"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncContainerResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.CosmosAsyncContainerResponse"
    name: "CosmosAsyncContainerResponse"
    fullName: "com.azure.cosmos.CosmosAsyncContainerResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncContainer.read*"
  name: "read"
  nameWithType: "CosmosAsyncContainer.read"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.read"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosContainerRequestOptions"
  name: "CosmosContainerRequestOptions"
  nameWithType: "CosmosContainerRequestOptions"
  fullName: "com.azure.cosmos.CosmosContainerRequestOptions"
- uid: "com.azure.cosmos.CosmosAsyncContainer.delete*"
  name: "delete"
  nameWithType: "CosmosAsyncContainer.delete"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.delete"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosContainerProperties"
  name: "CosmosContainerProperties"
  nameWithType: "CosmosContainerProperties"
  fullName: "com.azure.cosmos.CosmosContainerProperties"
- uid: "com.azure.cosmos.CosmosAsyncContainer.replace*"
  name: "replace"
  nameWithType: "CosmosAsyncContainer.replace"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.replace"
  package: "com.azure.cosmos"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncItemResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.CosmosAsyncItemResponse"
    name: "CosmosAsyncItemResponse"
    fullName: "com.azure.cosmos.CosmosAsyncItemResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncContainer.createItem*"
  name: "createItem"
  nameWithType: "CosmosAsyncContainer.createItem"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.createItem"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosItemRequestOptions"
  name: "CosmosItemRequestOptions"
  nameWithType: "CosmosItemRequestOptions"
  fullName: "com.azure.cosmos.CosmosItemRequestOptions"
- uid: "com.azure.cosmos.CosmosAsyncContainer.upsertItem*"
  name: "upsertItem"
  nameWithType: "CosmosAsyncContainer.upsertItem"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.upsertItem"
  package: "com.azure.cosmos"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.CosmosItemProperties>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.FeedResponse"
    name: "FeedResponse"
    fullName: "com.azure.cosmos.FeedResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.CosmosItemProperties"
    name: "CosmosItemProperties"
    fullName: "com.azure.cosmos.CosmosItemProperties"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncContainer.readAllItems*"
  name: "readAllItems"
  nameWithType: "CosmosAsyncContainer.readAllItems"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.readAllItems"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.FeedOptions"
  name: "FeedOptions"
  nameWithType: "FeedOptions"
  fullName: "com.azure.cosmos.FeedOptions"
- uid: "com.azure.cosmos.CosmosAsyncContainer.queryItems*"
  name: "queryItems"
  nameWithType: "CosmosAsyncContainer.queryItems"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.queryItems"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.SqlQuerySpec"
  name: "SqlQuerySpec"
  nameWithType: "SqlQuerySpec"
  fullName: "com.azure.cosmos.SqlQuerySpec"
- uid: "com.azure.cosmos.ChangeFeedOptions"
  name: "ChangeFeedOptions"
  nameWithType: "ChangeFeedOptions"
  fullName: "com.azure.cosmos.ChangeFeedOptions"
- uid: "com.azure.cosmos.CosmosAsyncContainer.queryChangeFeedItems*"
  name: "queryChangeFeedItems"
  nameWithType: "CosmosAsyncContainer.queryChangeFeedItems"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.queryChangeFeedItems"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncItem"
  name: "CosmosAsyncItem"
  nameWithType: "CosmosAsyncItem"
  fullName: "com.azure.cosmos.CosmosAsyncItem"
- uid: "com.azure.cosmos.CosmosAsyncContainer.getItem*"
  name: "getItem"
  nameWithType: "CosmosAsyncContainer.getItem"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.getItem"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncScripts"
  name: "CosmosAsyncScripts"
  nameWithType: "CosmosAsyncScripts"
  fullName: "com.azure.cosmos.CosmosAsyncScripts"
- uid: "com.azure.cosmos.CosmosAsyncContainer.getScripts*"
  name: "getScripts"
  nameWithType: "CosmosAsyncContainer.getScripts"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.getScripts"
  package: "com.azure.cosmos"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.CosmosConflictProperties>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.FeedResponse"
    name: "FeedResponse"
    fullName: "com.azure.cosmos.FeedResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.CosmosConflictProperties"
    name: "CosmosConflictProperties"
    fullName: "com.azure.cosmos.CosmosConflictProperties"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncContainer.readAllConflicts*"
  name: "readAllConflicts"
  nameWithType: "CosmosAsyncContainer.readAllConflicts"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.readAllConflicts"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncContainer.queryConflicts*"
  name: "queryConflicts"
  nameWithType: "CosmosAsyncContainer.queryConflicts"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.queryConflicts"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncConflict"
  name: "CosmosAsyncConflict"
  nameWithType: "CosmosAsyncConflict"
  fullName: "com.azure.cosmos.CosmosAsyncConflict"
- uid: "com.azure.cosmos.CosmosAsyncContainer.getConflict*"
  name: "getConflict"
  nameWithType: "CosmosAsyncContainer.getConflict"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.getConflict"
  package: "com.azure.cosmos"
- uid: "reactor.core.publisher.Mono<java.lang.Integer>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncContainer.readProvisionedThroughput*"
  name: "readProvisionedThroughput"
  nameWithType: "CosmosAsyncContainer.readProvisionedThroughput"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.readProvisionedThroughput"
  package: "com.azure.cosmos"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.azure.cosmos.CosmosAsyncContainer.replaceProvisionedThroughput*"
  name: "replaceProvisionedThroughput"
  nameWithType: "CosmosAsyncContainer.replaceProvisionedThroughput"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.replaceProvisionedThroughput"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncContainer.getDatabase*"
  name: "getDatabase"
  nameWithType: "CosmosAsyncContainer.getDatabase"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.getDatabase"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncContainer.URIPathSegment*"
  name: "URIPathSegment"
  nameWithType: "CosmosAsyncContainer.URIPathSegment"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.URIPathSegment"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncContainer.parentLink*"
  name: "parentLink"
  nameWithType: "CosmosAsyncContainer.parentLink"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.parentLink"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncContainer.getLink*"
  name: "getLink"
  nameWithType: "CosmosAsyncContainer.getLink"
  fullName: "com.azure.cosmos.CosmosAsyncContainer.getLink"
  package: "com.azure.cosmos"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.cosmos.CosmosAsyncContainerResponse"
  name: "CosmosAsyncContainerResponse"
  nameWithType: "CosmosAsyncContainerResponse"
  fullName: "com.azure.cosmos.CosmosAsyncContainerResponse"
- uid: "com.azure.cosmos.CosmosAsyncItemResponse"
  name: "CosmosAsyncItemResponse"
  nameWithType: "CosmosAsyncItemResponse"
  fullName: "com.azure.cosmos.CosmosAsyncItemResponse"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "com.azure.cosmos.FeedResponse"
  name: "FeedResponse"
  nameWithType: "FeedResponse"
  fullName: "com.azure.cosmos.FeedResponse"
- uid: "com.azure.cosmos.CosmosItemProperties"
  name: "CosmosItemProperties"
  nameWithType: "CosmosItemProperties"
  fullName: "com.azure.cosmos.CosmosItemProperties"
- uid: "com.azure.cosmos.CosmosConflictProperties"
  name: "CosmosConflictProperties"
  nameWithType: "CosmosConflictProperties"
  fullName: "com.azure.cosmos.CosmosConflictProperties"
- uid: "java.lang.Integer"
  name: "Integer"
  nameWithType: "Integer"
  fullName: "java.lang.Integer"
