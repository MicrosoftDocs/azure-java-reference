### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.file.datalake.models.RolePermissions"
  id: "RolePermissions"
  parent: "com.azure.storage.file.datalake.models"
  children:
  - "com.azure.storage.file.datalake.models.RolePermissions.RolePermissions()"
  - "com.azure.storage.file.datalake.models.RolePermissions.RolePermissions(boolean,boolean,boolean)"
  - "com.azure.storage.file.datalake.models.RolePermissions.RolePermissions(com.azure.storage.file.datalake.models.RolePermissions)"
  - "com.azure.storage.file.datalake.models.RolePermissions.equals(java.lang.Object)"
  - "com.azure.storage.file.datalake.models.RolePermissions.execute()"
  - "com.azure.storage.file.datalake.models.RolePermissions.execute(boolean)"
  - "com.azure.storage.file.datalake.models.RolePermissions.hashCode()"
  - "com.azure.storage.file.datalake.models.RolePermissions.parseOctal(int)"
  - "com.azure.storage.file.datalake.models.RolePermissions.parseSymbolic(java.lang.String,boolean)"
  - "com.azure.storage.file.datalake.models.RolePermissions.read()"
  - "com.azure.storage.file.datalake.models.RolePermissions.read(boolean)"
  - "com.azure.storage.file.datalake.models.RolePermissions.toOctal()"
  - "com.azure.storage.file.datalake.models.RolePermissions.toSymbolic()"
  - "com.azure.storage.file.datalake.models.RolePermissions.write()"
  - "com.azure.storage.file.datalake.models.RolePermissions.write(boolean)"
  langs:
  - "java"
  name: "RolePermissions"
  nameWithType: "RolePermissions"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions"
  type: "Class"
  package: "com.azure.storage.file.datalake.models"
  summary: "Represents the POSIX-style permissions on given resource for an arbitrary role. Each role can have any combination of read, write, and execute permissions. Manipulating resource permissions is only supported when ADLS interop and Hierarchical Namespace are enabled."
  syntax:
    content: "public class RolePermissions"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.RolePermissions()"
  id: "RolePermissions()"
  parent: "com.azure.storage.file.datalake.models.RolePermissions"
  langs:
  - "java"
  name: "RolePermissions()"
  nameWithType: "RolePermissions.RolePermissions()"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.RolePermissions()"
  overload: "com.azure.storage.file.datalake.models.RolePermissions.RolePermissions*"
  type: "Constructor"
  package: "com.azure.storage.file.datalake.models"
  summary: "Initializes an instance of `RolePermissions` with all values set to false."
  syntax:
    content: "public RolePermissions()"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.RolePermissions(boolean,boolean,boolean)"
  id: "RolePermissions(boolean,boolean,boolean)"
  parent: "com.azure.storage.file.datalake.models.RolePermissions"
  langs:
  - "java"
  name: "RolePermissions(boolean read, boolean write, boolean execute)"
  nameWithType: "RolePermissions.RolePermissions(boolean read, boolean write, boolean execute)"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.RolePermissions(boolean read, boolean write, boolean execute)"
  overload: "com.azure.storage.file.datalake.models.RolePermissions.RolePermissions*"
  type: "Constructor"
  package: "com.azure.storage.file.datalake.models"
  summary: "Initializes an instance of `RolePermissions` with the given values."
  syntax:
    content: "public RolePermissions(boolean read, boolean write, boolean execute)"
    parameters:
    - id: "read"
      type: "boolean"
      description: "Grants read permissions to this role."
    - id: "write"
      type: "boolean"
      description: "Grants write permissions to this role."
    - id: "execute"
      type: "boolean"
      description: "Grants execute permissions to this role."
- uid: "com.azure.storage.file.datalake.models.RolePermissions.RolePermissions(com.azure.storage.file.datalake.models.RolePermissions)"
  id: "RolePermissions(com.azure.storage.file.datalake.models.RolePermissions)"
  parent: "com.azure.storage.file.datalake.models.RolePermissions"
  langs:
  - "java"
  name: "RolePermissions(RolePermissions other)"
  nameWithType: "RolePermissions.RolePermissions(RolePermissions other)"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.RolePermissions(RolePermissions other)"
  overload: "com.azure.storage.file.datalake.models.RolePermissions.RolePermissions*"
  type: "Constructor"
  package: "com.azure.storage.file.datalake.models"
  summary: "Initializs an instance of `RolePermissions` with values copied from the passed instance."
  syntax:
    content: "public RolePermissions(RolePermissions other)"
    parameters:
    - id: "other"
      type: "com.azure.storage.file.datalake.models.RolePermissions"
      description: "The instance with values to copy."
- uid: "com.azure.storage.file.datalake.models.RolePermissions.equals(java.lang.Object)"
  id: "equals(java.lang.Object)"
  parent: "com.azure.storage.file.datalake.models.RolePermissions"
  langs:
  - "java"
  name: "equals(Object o)"
  nameWithType: "RolePermissions.equals(Object o)"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.equals(Object o)"
  overload: "com.azure.storage.file.datalake.models.RolePermissions.equals*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  syntax:
    content: "public boolean equals(Object o)"
    parameters:
    - id: "o"
      type: "java.lang.Object"
    return:
      type: "boolean"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.execute()"
  id: "execute()"
  parent: "com.azure.storage.file.datalake.models.RolePermissions"
  langs:
  - "java"
  name: "execute()"
  nameWithType: "RolePermissions.execute()"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.execute()"
  overload: "com.azure.storage.file.datalake.models.RolePermissions.execute*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Grants the role execute permissions on the resource."
  syntax:
    content: "public boolean execute()"
    return:
      type: "boolean"
      description: "Whether or not the role has execute permissions on the resource."
- uid: "com.azure.storage.file.datalake.models.RolePermissions.execute(boolean)"
  id: "execute(boolean)"
  parent: "com.azure.storage.file.datalake.models.RolePermissions"
  langs:
  - "java"
  name: "execute(boolean execute)"
  nameWithType: "RolePermissions.execute(boolean execute)"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.execute(boolean execute)"
  overload: "com.azure.storage.file.datalake.models.RolePermissions.execute*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Grants the role execute permissions on the resource."
  syntax:
    content: "public RolePermissions execute(boolean execute)"
    parameters:
    - id: "execute"
      type: "boolean"
      description: "<code>true</code> if execute permissions should be granted."
    return:
      type: "com.azure.storage.file.datalake.models.RolePermissions"
      description: "The updated RolePermissions object."
- uid: "com.azure.storage.file.datalake.models.RolePermissions.hashCode()"
  id: "hashCode()"
  parent: "com.azure.storage.file.datalake.models.RolePermissions"
  langs:
  - "java"
  name: "hashCode()"
  nameWithType: "RolePermissions.hashCode()"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.hashCode()"
  overload: "com.azure.storage.file.datalake.models.RolePermissions.hashCode*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  syntax:
    content: "public int hashCode()"
    return:
      type: "int"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.parseOctal(int)"
  id: "parseOctal(int)"
  parent: "com.azure.storage.file.datalake.models.RolePermissions"
  langs:
  - "java"
  name: "parseOctal(int octal)"
  nameWithType: "RolePermissions.parseOctal(int octal)"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.parseOctal(int octal)"
  overload: "com.azure.storage.file.datalake.models.RolePermissions.parseOctal*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Convert an octal representation of permissions for a given role into an `RolePermissions` instance."
  syntax:
    content: "public static RolePermissions parseOctal(int octal)"
    parameters:
    - id: "octal"
      type: "int"
      description: "The octal digit representing the permissions for the given role."
    return:
      type: "com.azure.storage.file.datalake.models.RolePermissions"
      description: "An <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\">RolePermissions</xref> instance with appropriate fields set."
- uid: "com.azure.storage.file.datalake.models.RolePermissions.parseSymbolic(java.lang.String,boolean)"
  id: "parseSymbolic(java.lang.String,boolean)"
  parent: "com.azure.storage.file.datalake.models.RolePermissions"
  langs:
  - "java"
  name: "parseSymbolic(String str, boolean allowStickyBit)"
  nameWithType: "RolePermissions.parseSymbolic(String str, boolean allowStickyBit)"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.parseSymbolic(String str, boolean allowStickyBit)"
  overload: "com.azure.storage.file.datalake.models.RolePermissions.parseSymbolic*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Convert a symbolic representation of permissions for a given role into an `RolePermissions` instance."
  syntax:
    content: "public static RolePermissions parseSymbolic(String str, boolean allowStickyBit)"
    parameters:
    - id: "str"
      type: "java.lang.String"
      description: "The string representing the permissions for the given role."
    - id: "allowStickyBit"
      type: "boolean"
      description: "Indicates whether or not the parsing should tolerate the sticky bit. The sticky bit is only\n valid as the last character of permissions for \"other\" in a <code>String</code> representing full permissions for a\n resource."
    return:
      type: "com.azure.storage.file.datalake.models.RolePermissions"
      description: "An <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\">RolePermissions</xref> instance with appropriate fields set."
- uid: "com.azure.storage.file.datalake.models.RolePermissions.read()"
  id: "read()"
  parent: "com.azure.storage.file.datalake.models.RolePermissions"
  langs:
  - "java"
  name: "read()"
  nameWithType: "RolePermissions.read()"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.read()"
  overload: "com.azure.storage.file.datalake.models.RolePermissions.read*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Grants the role read permissions on the resource."
  syntax:
    content: "public boolean read()"
    return:
      type: "boolean"
      description: "Whether or not the role has read permissions on the resource."
- uid: "com.azure.storage.file.datalake.models.RolePermissions.read(boolean)"
  id: "read(boolean)"
  parent: "com.azure.storage.file.datalake.models.RolePermissions"
  langs:
  - "java"
  name: "read(boolean read)"
  nameWithType: "RolePermissions.read(boolean read)"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.read(boolean read)"
  overload: "com.azure.storage.file.datalake.models.RolePermissions.read*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Grants the role read permissions on the resource."
  syntax:
    content: "public RolePermissions read(boolean read)"
    parameters:
    - id: "read"
      type: "boolean"
      description: "<code>true</code> if read permissions should be granted."
    return:
      type: "com.azure.storage.file.datalake.models.RolePermissions"
      description: "The updated RolePermissions object."
- uid: "com.azure.storage.file.datalake.models.RolePermissions.toOctal()"
  id: "toOctal()"
  parent: "com.azure.storage.file.datalake.models.RolePermissions"
  langs:
  - "java"
  name: "toOctal()"
  nameWithType: "RolePermissions.toOctal()"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.toOctal()"
  overload: "com.azure.storage.file.datalake.models.RolePermissions.toOctal*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Converts the `RolePermissions` instance into its octal representation."
  syntax:
    content: "public String toOctal()"
    return:
      type: "java.lang.String"
      description: "The <code>String</code> representation of the permissions."
- uid: "com.azure.storage.file.datalake.models.RolePermissions.toSymbolic()"
  id: "toSymbolic()"
  parent: "com.azure.storage.file.datalake.models.RolePermissions"
  langs:
  - "java"
  name: "toSymbolic()"
  nameWithType: "RolePermissions.toSymbolic()"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.toSymbolic()"
  overload: "com.azure.storage.file.datalake.models.RolePermissions.toSymbolic*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Converts the `RolePermissions` instance into its symbolic representation."
  syntax:
    content: "public String toSymbolic()"
    return:
      type: "java.lang.String"
      description: "The <code>String</code> representation of the permission."
- uid: "com.azure.storage.file.datalake.models.RolePermissions.write()"
  id: "write()"
  parent: "com.azure.storage.file.datalake.models.RolePermissions"
  langs:
  - "java"
  name: "write()"
  nameWithType: "RolePermissions.write()"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.write()"
  overload: "com.azure.storage.file.datalake.models.RolePermissions.write*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Grants the role write permissions on the resource."
  syntax:
    content: "public boolean write()"
    return:
      type: "boolean"
      description: "Whether or not the role has write permissions on the resource."
- uid: "com.azure.storage.file.datalake.models.RolePermissions.write(boolean)"
  id: "write(boolean)"
  parent: "com.azure.storage.file.datalake.models.RolePermissions"
  langs:
  - "java"
  name: "write(boolean write)"
  nameWithType: "RolePermissions.write(boolean write)"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.write(boolean write)"
  overload: "com.azure.storage.file.datalake.models.RolePermissions.write*"
  type: "Method"
  package: "com.azure.storage.file.datalake.models"
  summary: "Grants the role execute permissions on the resource."
  syntax:
    content: "public RolePermissions write(boolean write)"
    parameters:
    - id: "write"
      type: "boolean"
      description: "<code>true</code> if write permissions should be granted."
    return:
      type: "com.azure.storage.file.datalake.models.RolePermissions"
      description: "The updated RolePermissions object."
references:
- uid: "com.azure.storage.file.datalake.models.RolePermissions.RolePermissions*"
  name: "RolePermissions"
  nameWithType: "RolePermissions.RolePermissions"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.RolePermissions"
  package: "com.azure.storage.file.datalake.models"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.parseOctal*"
  name: "parseOctal"
  nameWithType: "RolePermissions.parseOctal"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.parseOctal"
  package: "com.azure.storage.file.datalake.models"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.parseSymbolic*"
  name: "parseSymbolic"
  nameWithType: "RolePermissions.parseSymbolic"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.parseSymbolic"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.toOctal*"
  name: "toOctal"
  nameWithType: "RolePermissions.toOctal"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.toOctal"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.toSymbolic*"
  name: "toSymbolic"
  nameWithType: "RolePermissions.toSymbolic"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.toSymbolic"
  package: "com.azure.storage.file.datalake.models"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.equals*"
  name: "equals"
  nameWithType: "RolePermissions.equals"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.equals"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.hashCode*"
  name: "hashCode"
  nameWithType: "RolePermissions.hashCode"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.hashCode"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.read*"
  name: "read"
  nameWithType: "RolePermissions.read"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.read"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.write*"
  name: "write"
  nameWithType: "RolePermissions.write"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.write"
  package: "com.azure.storage.file.datalake.models"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.execute*"
  name: "execute"
  nameWithType: "RolePermissions.execute"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.execute"
  package: "com.azure.storage.file.datalake.models"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
