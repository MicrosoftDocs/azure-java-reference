### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.CosmosAsyncItem"
  id: "CosmosAsyncItem"
  parent: "com.azure.cosmos"
  children:
  - "com.azure.cosmos.CosmosAsyncItem.CosmosAsyncItem(java.lang.String,java.lang.Object,com.azure.cosmos.CosmosAsyncContainer)"
  - "com.azure.cosmos.CosmosAsyncItem.URIPathSegment()"
  - "com.azure.cosmos.CosmosAsyncItem.delete()"
  - "com.azure.cosmos.CosmosAsyncItem.delete(com.azure.cosmos.CosmosItemRequestOptions)"
  - "com.azure.cosmos.CosmosAsyncItem.getId()"
  - "com.azure.cosmos.CosmosAsyncItem.getLink()"
  - "com.azure.cosmos.CosmosAsyncItem.parentLink()"
  - "com.azure.cosmos.CosmosAsyncItem.read()"
  - "com.azure.cosmos.CosmosAsyncItem.read(com.azure.cosmos.CosmosItemRequestOptions)"
  - "com.azure.cosmos.CosmosAsyncItem.replace(java.lang.Object)"
  - "com.azure.cosmos.CosmosAsyncItem.replace(java.lang.Object,com.azure.cosmos.CosmosItemRequestOptions)"
  - "com.azure.cosmos.CosmosAsyncItem.setContainer(com.azure.cosmos.CosmosAsyncContainer)"
  - "com.azure.cosmos.CosmosAsyncItem.setId(java.lang.String)"
  langs:
  - "java"
  name: "CosmosAsyncItem"
  nameWithType: "CosmosAsyncItem"
  fullName: "com.azure.cosmos.CosmosAsyncItem"
  type: "Class"
  package: "com.azure.cosmos"
  syntax:
    content: "public class CosmosAsyncItem"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.CosmosAsyncItem.CosmosAsyncItem(java.lang.String,java.lang.Object,com.azure.cosmos.CosmosAsyncContainer)"
  id: "CosmosAsyncItem(java.lang.String,java.lang.Object,com.azure.cosmos.CosmosAsyncContainer)"
  parent: "com.azure.cosmos.CosmosAsyncItem"
  langs:
  - "java"
  name: "CosmosAsyncItem(String id, Object partitionKey, CosmosAsyncContainer container)"
  nameWithType: "CosmosAsyncItem.CosmosAsyncItem(String id, Object partitionKey, CosmosAsyncContainer container)"
  fullName: "com.azure.cosmos.CosmosAsyncItem.CosmosAsyncItem(String id, Object partitionKey, CosmosAsyncContainer container)"
  overload: "com.azure.cosmos.CosmosAsyncItem.CosmosAsyncItem*"
  type: "Constructor"
  package: "com.azure.cosmos"
  syntax:
    content: " CosmosAsyncItem(String id, Object partitionKey, CosmosAsyncContainer container)"
    parameters:
    - id: "id"
      type: "java.lang.String"
    - id: "partitionKey"
      type: "java.lang.Object"
    - id: "container"
      type: "com.azure.cosmos.CosmosAsyncContainer"
- uid: "com.azure.cosmos.CosmosAsyncItem.URIPathSegment()"
  id: "URIPathSegment()"
  parent: "com.azure.cosmos.CosmosAsyncItem"
  langs:
  - "java"
  name: "URIPathSegment()"
  nameWithType: "CosmosAsyncItem.URIPathSegment()"
  fullName: "com.azure.cosmos.CosmosAsyncItem.URIPathSegment()"
  overload: "com.azure.cosmos.CosmosAsyncItem.URIPathSegment*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String URIPathSegment()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncItem.delete()"
  id: "delete()"
  parent: "com.azure.cosmos.CosmosAsyncItem"
  langs:
  - "java"
  name: "delete()"
  nameWithType: "CosmosAsyncItem.delete()"
  fullName: "com.azure.cosmos.CosmosAsyncItem.delete()"
  overload: "com.azure.cosmos.CosmosAsyncItem.delete*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Deletes the item. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single cosmos item response with the replaced item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncItemResponse> delete()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncItemResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the  cosmos item resource response."
- uid: "com.azure.cosmos.CosmosAsyncItem.delete(com.azure.cosmos.CosmosItemRequestOptions)"
  id: "delete(com.azure.cosmos.CosmosItemRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncItem"
  langs:
  - "java"
  name: "delete(CosmosItemRequestOptions options)"
  nameWithType: "CosmosAsyncItem.delete(CosmosItemRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncItem.delete(CosmosItemRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncItem.delete*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Deletes the item. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single cosmos item response with the replaced item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncItemResponse> delete(CosmosItemRequestOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.CosmosItemRequestOptions"
      description: "the request options"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncItemResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the  cosmos item resource response."
- uid: "com.azure.cosmos.CosmosAsyncItem.getId()"
  id: "getId()"
  parent: "com.azure.cosmos.CosmosAsyncItem"
  langs:
  - "java"
  name: "getId()"
  nameWithType: "CosmosAsyncItem.getId()"
  fullName: "com.azure.cosmos.CosmosAsyncItem.getId()"
  overload: "com.azure.cosmos.CosmosAsyncItem.getId*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Get the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncItem\" data-throw-if-not-resolved=\"false\">CosmosAsyncItem</xref>"
  syntax:
    content: "public String getId()"
    return:
      type: "java.lang.String"
      description: "the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncItem\" data-throw-if-not-resolved=\"false\">CosmosAsyncItem</xref>"
- uid: "com.azure.cosmos.CosmosAsyncItem.getLink()"
  id: "getLink()"
  parent: "com.azure.cosmos.CosmosAsyncItem"
  langs:
  - "java"
  name: "getLink()"
  nameWithType: "CosmosAsyncItem.getLink()"
  fullName: "com.azure.cosmos.CosmosAsyncItem.getLink()"
  overload: "com.azure.cosmos.CosmosAsyncItem.getLink*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String getLink()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncItem.parentLink()"
  id: "parentLink()"
  parent: "com.azure.cosmos.CosmosAsyncItem"
  langs:
  - "java"
  name: "parentLink()"
  nameWithType: "CosmosAsyncItem.parentLink()"
  fullName: "com.azure.cosmos.CosmosAsyncItem.parentLink()"
  overload: "com.azure.cosmos.CosmosAsyncItem.parentLink*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String parentLink()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncItem.read()"
  id: "read()"
  parent: "com.azure.cosmos.CosmosAsyncItem"
  langs:
  - "java"
  name: "read()"
  nameWithType: "CosmosAsyncItem.read()"
  fullName: "com.azure.cosmos.CosmosAsyncItem.read()"
  overload: "com.azure.cosmos.CosmosAsyncItem.read*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads an item. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a cosmos item response with the read item In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncItemResponse> read()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncItemResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the cosmos item response with the read item or an error"
- uid: "com.azure.cosmos.CosmosAsyncItem.read(com.azure.cosmos.CosmosItemRequestOptions)"
  id: "read(com.azure.cosmos.CosmosItemRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncItem"
  langs:
  - "java"
  name: "read(CosmosItemRequestOptions options)"
  nameWithType: "CosmosAsyncItem.read(CosmosItemRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncItem.read(CosmosItemRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncItem.read*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads an item. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a cosmos item response with the read item In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncItemResponse> read(CosmosItemRequestOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.CosmosItemRequestOptions"
      description: "the request comosItemRequestOptions"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncItemResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the cosmos item response with the read item or an error"
- uid: "com.azure.cosmos.CosmosAsyncItem.replace(java.lang.Object)"
  id: "replace(java.lang.Object)"
  parent: "com.azure.cosmos.CosmosAsyncItem"
  langs:
  - "java"
  name: "replace(Object item)"
  nameWithType: "CosmosAsyncItem.replace(Object item)"
  fullName: "com.azure.cosmos.CosmosAsyncItem.replace(Object item)"
  overload: "com.azure.cosmos.CosmosAsyncItem.replace*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Replaces an item with the passed in item. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single cosmos item response with the replaced item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncItemResponse> replace(Object item)"
    parameters:
    - id: "item"
      type: "java.lang.Object"
      description: "the item to replace (containing the document id)."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncItemResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the  cosmos item resource response with the replaced item or an error."
- uid: "com.azure.cosmos.CosmosAsyncItem.replace(java.lang.Object,com.azure.cosmos.CosmosItemRequestOptions)"
  id: "replace(java.lang.Object,com.azure.cosmos.CosmosItemRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncItem"
  langs:
  - "java"
  name: "replace(Object item, CosmosItemRequestOptions options)"
  nameWithType: "CosmosAsyncItem.replace(Object item, CosmosItemRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncItem.replace(Object item, CosmosItemRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncItem.replace*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Replaces an item with the passed in item. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single cosmos item response with the replaced item. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncItemResponse> replace(Object item, CosmosItemRequestOptions options)"
    parameters:
    - id: "item"
      type: "java.lang.Object"
      description: "the item to replace (containing the document id)."
    - id: "options"
      type: "com.azure.cosmos.CosmosItemRequestOptions"
      description: "the request comosItemRequestOptions"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncItemResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the  cosmos item resource response with the replaced item or an error."
- uid: "com.azure.cosmos.CosmosAsyncItem.setContainer(com.azure.cosmos.CosmosAsyncContainer)"
  id: "setContainer(com.azure.cosmos.CosmosAsyncContainer)"
  parent: "com.azure.cosmos.CosmosAsyncItem"
  langs:
  - "java"
  name: "setContainer(CosmosAsyncContainer container)"
  nameWithType: "CosmosAsyncItem.setContainer(CosmosAsyncContainer container)"
  fullName: "com.azure.cosmos.CosmosAsyncItem.setContainer(CosmosAsyncContainer container)"
  overload: "com.azure.cosmos.CosmosAsyncItem.setContainer*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " void setContainer(CosmosAsyncContainer container)"
    parameters:
    - id: "container"
      type: "com.azure.cosmos.CosmosAsyncContainer"
- uid: "com.azure.cosmos.CosmosAsyncItem.setId(java.lang.String)"
  id: "setId(java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncItem"
  langs:
  - "java"
  name: "setId(String id)"
  nameWithType: "CosmosAsyncItem.setId(String id)"
  fullName: "com.azure.cosmos.CosmosAsyncItem.setId(String id)"
  overload: "com.azure.cosmos.CosmosAsyncItem.setId*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Set the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncItem\" data-throw-if-not-resolved=\"false\">CosmosAsyncItem</xref>"
  syntax:
    content: " CosmosAsyncItem setId(String id)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncItem\" data-throw-if-not-resolved=\"false\">CosmosAsyncItem</xref>"
    return:
      type: "com.azure.cosmos.CosmosAsyncItem"
      description: "the same <xref uid=\"com.azure.cosmos.CosmosAsyncItem\" data-throw-if-not-resolved=\"false\">CosmosAsyncItem</xref> that had the id set"
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "com.azure.cosmos.CosmosAsyncContainer"
  name: "CosmosAsyncContainer"
  nameWithType: "CosmosAsyncContainer"
  fullName: "com.azure.cosmos.CosmosAsyncContainer"
- uid: "com.azure.cosmos.CosmosAsyncItem.CosmosAsyncItem*"
  name: "CosmosAsyncItem"
  nameWithType: "CosmosAsyncItem.CosmosAsyncItem"
  fullName: "com.azure.cosmos.CosmosAsyncItem.CosmosAsyncItem"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncItem.getId*"
  name: "getId"
  nameWithType: "CosmosAsyncItem.getId"
  fullName: "com.azure.cosmos.CosmosAsyncItem.getId"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncItem.setId*"
  name: "setId"
  nameWithType: "CosmosAsyncItem.setId"
  fullName: "com.azure.cosmos.CosmosAsyncItem.setId"
  package: "com.azure.cosmos"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.CosmosAsyncItemResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.CosmosAsyncItemResponse"
    name: "CosmosAsyncItemResponse"
    fullName: "com.azure.cosmos.CosmosAsyncItemResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncItem.read*"
  name: "read"
  nameWithType: "CosmosAsyncItem.read"
  fullName: "com.azure.cosmos.CosmosAsyncItem.read"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosItemRequestOptions"
  name: "CosmosItemRequestOptions"
  nameWithType: "CosmosItemRequestOptions"
  fullName: "com.azure.cosmos.CosmosItemRequestOptions"
- uid: "com.azure.cosmos.CosmosAsyncItem.replace*"
  name: "replace"
  nameWithType: "CosmosAsyncItem.replace"
  fullName: "com.azure.cosmos.CosmosAsyncItem.replace"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncItem.delete*"
  name: "delete"
  nameWithType: "CosmosAsyncItem.delete"
  fullName: "com.azure.cosmos.CosmosAsyncItem.delete"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncItem.setContainer*"
  name: "setContainer"
  nameWithType: "CosmosAsyncItem.setContainer"
  fullName: "com.azure.cosmos.CosmosAsyncItem.setContainer"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncItem.URIPathSegment*"
  name: "URIPathSegment"
  nameWithType: "CosmosAsyncItem.URIPathSegment"
  fullName: "com.azure.cosmos.CosmosAsyncItem.URIPathSegment"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncItem.parentLink*"
  name: "parentLink"
  nameWithType: "CosmosAsyncItem.parentLink"
  fullName: "com.azure.cosmos.CosmosAsyncItem.parentLink"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncItem.getLink*"
  name: "getLink"
  nameWithType: "CosmosAsyncItem.getLink"
  fullName: "com.azure.cosmos.CosmosAsyncItem.getLink"
  package: "com.azure.cosmos"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.cosmos.CosmosAsyncItemResponse"
  name: "CosmosAsyncItemResponse"
  nameWithType: "CosmosAsyncItemResponse"
  fullName: "com.azure.cosmos.CosmosAsyncItemResponse"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
