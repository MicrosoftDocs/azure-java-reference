### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.internal.Utils"
  id: "Utils"
  parent: "com.azure.cosmos.internal"
  children:
  - "com.azure.cosmos.internal.Utils.<K,V>immutableMapOf()"
  - "com.azure.cosmos.internal.Utils.<K,V>immutableMapOf(K,V)"
  - "com.azure.cosmos.internal.Utils.<K,V>tryGetValue(java.util.Map<K,V>,K,com.azure.cosmos.internal.Utils.ValueHolder<V>)"
  - "com.azure.cosmos.internal.Utils.<K,V>tryRemove(java.util.Map<K,V>,K,com.azure.cosmos.internal.Utils.ValueHolder<V>)"
  - "com.azure.cosmos.internal.Utils.<O,I>as(I,java.lang.Class<O>)"
  - "com.azure.cosmos.internal.Utils.<V>firstOrDefault(java.util.List<V>)"
  - "com.azure.cosmos.internal.Utils.<V>immutableListOf()"
  - "com.azure.cosmos.internal.Utils.<V>immutableListOf(V)"
  - "com.azure.cosmos.internal.Utils.Base64Decoder"
  - "com.azure.cosmos.internal.Utils.Base64Encoder"
  - "com.azure.cosmos.internal.Utils.IsResourceType(java.lang.String)"
  - "com.azure.cosmos.internal.Utils.Utils()"
  - "com.azure.cosmos.internal.Utils.ValueHolder"
  - "com.azure.cosmos.internal.Utils.checkNotNullOrThrow(java.lang.Object,java.lang.String,java.lang.String)"
  - "com.azure.cosmos.internal.Utils.checkRequestOrReturnException(boolean,java.lang.String,java.lang.String)"
  - "com.azure.cosmos.internal.Utils.checkRequestOrReturnException(boolean,java.lang.String,java.lang.String,java.lang.Object...)"
  - "com.azure.cosmos.internal.Utils.checkStateOrReturnException(boolean,java.lang.String,java.lang.String)"
  - "com.azure.cosmos.internal.Utils.checkStateOrReturnException(boolean,java.lang.String,java.lang.String,java.lang.Object...)"
  - "com.azure.cosmos.internal.Utils.checkStateOrThrow(boolean,java.lang.String,java.lang.String)"
  - "com.azure.cosmos.internal.Utils.checkStateOrThrow(boolean,java.lang.String,java.lang.String,java.lang.Object...)"
  - "com.azure.cosmos.internal.Utils.createQuery(java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.cosmos.internal.Utils.encodeBase64String(byte[])"
  - "com.azure.cosmos.internal.Utils.getCollectionName(java.lang.String)"
  - "com.azure.cosmos.internal.Utils.getSimpleObjectMapper()"
  - "com.azure.cosmos.internal.Utils.getUTF8Bytes(java.lang.String)"
  - "com.azure.cosmos.internal.Utils.getUserAgent(java.lang.String,java.lang.String)"
  - "com.azure.cosmos.internal.Utils.getValueOrDefault(java.lang.Integer,int)"
  - "com.azure.cosmos.internal.Utils.isCollectionChild(com.azure.cosmos.internal.ResourceType)"
  - "com.azure.cosmos.internal.Utils.isCollectionPartitioned(com.azure.cosmos.internal.DocumentCollection)"
  - "com.azure.cosmos.internal.Utils.isDatabaseLink(java.lang.String)"
  - "com.azure.cosmos.internal.Utils.isFeedRequest(com.azure.cosmos.internal.OperationType)"
  - "com.azure.cosmos.internal.Utils.isNameBased(java.lang.String)"
  - "com.azure.cosmos.internal.Utils.isValidConsistency(com.azure.cosmos.ConsistencyLevel,com.azure.cosmos.ConsistencyLevel)"
  - "com.azure.cosmos.internal.Utils.isWriteOperation(com.azure.cosmos.internal.OperationType)"
  - "com.azure.cosmos.internal.Utils.joinPath(java.lang.String,java.lang.String)"
  - "com.azure.cosmos.internal.Utils.nowAsRFC1123()"
  - "com.azure.cosmos.internal.Utils.paramEncode(java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.cosmos.internal.Utils.randomUUID()"
  - "com.azure.cosmos.internal.Utils.setQuery(java.lang.String,java.lang.String)"
  - "com.azure.cosmos.internal.Utils.trimBeginningAndEndingSlashes(java.lang.String)"
  - "com.azure.cosmos.internal.Utils.zonedDateTimeAsUTCRFC1123(java.time.OffsetDateTime)"
  langs:
  - "java"
  name: "Utils"
  nameWithType: "Utils"
  fullName: "com.azure.cosmos.internal.Utils"
  type: "Class"
  package: "com.azure.cosmos.internal"
  summary: "While this class is public, but it is not part of our published public APIs. This is meant to be internally used only by our sdk."
  syntax:
    content: "public class Utils"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.internal.Utils.<K,V>immutableMapOf()"
  id: "<K,V>immutableMapOf()"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "<K,V>immutableMapOf()"
  nameWithType: "Utils.<K,V>immutableMapOf()"
  fullName: "com.azure.cosmos.internal.Utils.<K,V>immutableMapOf()"
  overload: "com.azure.cosmos.internal.Utils.immutableMapOf*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static Map<K,V> <K,V>immutableMapOf()"
    return:
      type: "java.util.Map<K,V>"
- uid: "com.azure.cosmos.internal.Utils.<K,V>immutableMapOf(K,V)"
  id: "<K,V>immutableMapOf(K,V)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "<K,V>immutableMapOf(K k1, V v1)"
  nameWithType: "Utils.<K,V>immutableMapOf(K k1, V v1)"
  fullName: "com.azure.cosmos.internal.Utils.<K,V>immutableMapOf(K k1, V v1)"
  overload: "com.azure.cosmos.internal.Utils.immutableMapOf*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static Map<K,V> <K,V>immutableMapOf(K k1, V v1)"
    parameters:
    - id: "k1"
      type: "K"
    - id: "v1"
      type: "V"
    return:
      type: "java.util.Map<K,V>"
- uid: "com.azure.cosmos.internal.Utils.<K,V>tryGetValue(java.util.Map<K,V>,K,com.azure.cosmos.internal.Utils.ValueHolder<V>)"
  id: "<K,V>tryGetValue(java.util.Map<K,V>,K,com.azure.cosmos.internal.Utils.ValueHolder<V>)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "<K,V>tryGetValue(Map<K,V> dictionary, K key, Utils.ValueHolder<V> holder)"
  nameWithType: "Utils.<K,V>tryGetValue(Map<K,V> dictionary, K key, Utils.ValueHolder<V> holder)"
  fullName: "com.azure.cosmos.internal.Utils.<K,V>tryGetValue(Map<K,V> dictionary, K key, Utils.ValueHolder<V> holder)"
  overload: "com.azure.cosmos.internal.Utils.tryGetValue*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static boolean <K,V>tryGetValue(Map<K,V> dictionary, K key, Utils.ValueHolder<V> holder)"
    parameters:
    - id: "dictionary"
      type: "java.util.Map<K,V>"
    - id: "key"
      type: "K"
    - id: "holder"
      type: "com.azure.cosmos.internal.Utils.ValueHolder<V>"
    return:
      type: "boolean"
- uid: "com.azure.cosmos.internal.Utils.<K,V>tryRemove(java.util.Map<K,V>,K,com.azure.cosmos.internal.Utils.ValueHolder<V>)"
  id: "<K,V>tryRemove(java.util.Map<K,V>,K,com.azure.cosmos.internal.Utils.ValueHolder<V>)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "<K,V>tryRemove(Map<K,V> dictionary, K key, Utils.ValueHolder<V> holder)"
  nameWithType: "Utils.<K,V>tryRemove(Map<K,V> dictionary, K key, Utils.ValueHolder<V> holder)"
  fullName: "com.azure.cosmos.internal.Utils.<K,V>tryRemove(Map<K,V> dictionary, K key, Utils.ValueHolder<V> holder)"
  overload: "com.azure.cosmos.internal.Utils.tryRemove*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static boolean <K,V>tryRemove(Map<K,V> dictionary, K key, Utils.ValueHolder<V> holder)"
    parameters:
    - id: "dictionary"
      type: "java.util.Map<K,V>"
    - id: "key"
      type: "K"
    - id: "holder"
      type: "com.azure.cosmos.internal.Utils.ValueHolder<V>"
    return:
      type: "boolean"
- uid: "com.azure.cosmos.internal.Utils.<O,I>as(I,java.lang.Class<O>)"
  id: "<O,I>as(I,java.lang.Class<O>)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "<O,I>as(I i, Class<O> klass)"
  nameWithType: "Utils.<O,I>as(I i, Class<O> klass)"
  fullName: "com.azure.cosmos.internal.Utils.<O,I>as(I i, Class<O> klass)"
  overload: "com.azure.cosmos.internal.Utils.as*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static O <O,I>as(I i, Class<O> klass)"
    parameters:
    - id: "i"
      type: "I"
    - id: "klass"
      type: "java.lang.Class<O>"
    return:
      type: "O"
- uid: "com.azure.cosmos.internal.Utils.<V>firstOrDefault(java.util.List<V>)"
  id: "<V>firstOrDefault(java.util.List<V>)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "<V>firstOrDefault(List<V> list)"
  nameWithType: "Utils.<V>firstOrDefault(List<V> list)"
  fullName: "com.azure.cosmos.internal.Utils.<V>firstOrDefault(List<V> list)"
  overload: "com.azure.cosmos.internal.Utils.firstOrDefault*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static V <V>firstOrDefault(List<V> list)"
    parameters:
    - id: "list"
      type: "java.util.List<V>"
    return:
      type: "V"
- uid: "com.azure.cosmos.internal.Utils.<V>immutableListOf()"
  id: "<V>immutableListOf()"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "<V>immutableListOf()"
  nameWithType: "Utils.<V>immutableListOf()"
  fullName: "com.azure.cosmos.internal.Utils.<V>immutableListOf()"
  overload: "com.azure.cosmos.internal.Utils.immutableListOf*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static List<V> <V>immutableListOf()"
    return:
      type: "java.util.List<V>"
- uid: "com.azure.cosmos.internal.Utils.<V>immutableListOf(V)"
  id: "<V>immutableListOf(V)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "<V>immutableListOf(V v1)"
  nameWithType: "Utils.<V>immutableListOf(V v1)"
  fullName: "com.azure.cosmos.internal.Utils.<V>immutableListOf(V v1)"
  overload: "com.azure.cosmos.internal.Utils.immutableListOf*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static List<V> <V>immutableListOf(V v1)"
    parameters:
    - id: "v1"
      type: "V"
    return:
      type: "java.util.List<V>"
- uid: "com.azure.cosmos.internal.Utils.Base64Decoder"
  id: "Base64Decoder"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "Base64Decoder"
  nameWithType: "Utils.Base64Decoder"
  fullName: "com.azure.cosmos.internal.Utils.Base64Decoder"
  type: "Field"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static final Base64.Decoder Base64Decoder"
    return:
      type: "java.util.Base64.Decoder"
- uid: "com.azure.cosmos.internal.Utils.Base64Encoder"
  id: "Base64Encoder"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "Base64Encoder"
  nameWithType: "Utils.Base64Encoder"
  fullName: "com.azure.cosmos.internal.Utils.Base64Encoder"
  type: "Field"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static final Base64.Encoder Base64Encoder"
    return:
      type: "java.util.Base64.Encoder"
- uid: "com.azure.cosmos.internal.Utils.IsResourceType(java.lang.String)"
  id: "IsResourceType(java.lang.String)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "IsResourceType(String resourcePathSegment)"
  nameWithType: "Utils.IsResourceType(String resourcePathSegment)"
  fullName: "com.azure.cosmos.internal.Utils.IsResourceType(String resourcePathSegment)"
  overload: "com.azure.cosmos.internal.Utils.IsResourceType*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Checks whether the specified path segment is a resource type"
  syntax:
    content: "public static boolean IsResourceType(String resourcePathSegment)"
    parameters:
    - id: "resourcePathSegment"
      type: "java.lang.String"
      description: "the path segment to analyze."
    return:
      type: "boolean"
      description: "true or false"
- uid: "com.azure.cosmos.internal.Utils.Utils()"
  id: "Utils()"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "Utils()"
  nameWithType: "Utils.Utils()"
  fullName: "com.azure.cosmos.internal.Utils.Utils()"
  overload: "com.azure.cosmos.internal.Utils.Utils*"
  type: "Constructor"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public Utils()"
- uid: "com.azure.cosmos.internal.Utils.checkNotNullOrThrow(java.lang.Object,java.lang.String,java.lang.String)"
  id: "checkNotNullOrThrow(java.lang.Object,java.lang.String,java.lang.String)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "checkNotNullOrThrow(Object val, String argumentName, String message)"
  nameWithType: "Utils.checkNotNullOrThrow(Object val, String argumentName, String message)"
  fullName: "com.azure.cosmos.internal.Utils.checkNotNullOrThrow(Object val, String argumentName, String message)"
  overload: "com.azure.cosmos.internal.Utils.checkNotNullOrThrow*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static void checkNotNullOrThrow(Object val, String argumentName, String message)"
    parameters:
    - id: "val"
      type: "java.lang.Object"
    - id: "argumentName"
      type: "java.lang.String"
    - id: "message"
      type: "java.lang.String"
  exceptions:
  - type: "java.lang.NullPointerException"
- uid: "com.azure.cosmos.internal.Utils.checkRequestOrReturnException(boolean,java.lang.String,java.lang.String)"
  id: "checkRequestOrReturnException(boolean,java.lang.String,java.lang.String)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "checkRequestOrReturnException(boolean value, String argumentName, String message)"
  nameWithType: "Utils.checkRequestOrReturnException(boolean value, String argumentName, String message)"
  fullName: "com.azure.cosmos.internal.Utils.checkRequestOrReturnException(boolean value, String argumentName, String message)"
  overload: "com.azure.cosmos.internal.Utils.checkRequestOrReturnException*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static BadRequestException checkRequestOrReturnException(boolean value, String argumentName, String message)"
    parameters:
    - id: "value"
      type: "boolean"
    - id: "argumentName"
      type: "java.lang.String"
    - id: "message"
      type: "java.lang.String"
    return:
      type: "com.azure.cosmos.BadRequestException"
- uid: "com.azure.cosmos.internal.Utils.checkRequestOrReturnException(boolean,java.lang.String,java.lang.String,java.lang.Object...)"
  id: "checkRequestOrReturnException(boolean,java.lang.String,java.lang.String,java.lang.Object...)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "checkRequestOrReturnException(boolean value, String argumentName, String messageTemplate, Object[] messageTemplateParams)"
  nameWithType: "Utils.checkRequestOrReturnException(boolean value, String argumentName, String messageTemplate, Object[] messageTemplateParams)"
  fullName: "com.azure.cosmos.internal.Utils.checkRequestOrReturnException(boolean value, String argumentName, String messageTemplate, Object[] messageTemplateParams)"
  overload: "com.azure.cosmos.internal.Utils.checkRequestOrReturnException*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static BadRequestException checkRequestOrReturnException(boolean value, String argumentName, String messageTemplate, Object[] messageTemplateParams)"
    parameters:
    - id: "value"
      type: "boolean"
    - id: "argumentName"
      type: "java.lang.String"
    - id: "messageTemplate"
      type: "java.lang.String"
    - id: "messageTemplateParams"
      type: "java.lang.Object[]"
    return:
      type: "com.azure.cosmos.BadRequestException"
- uid: "com.azure.cosmos.internal.Utils.checkStateOrReturnException(boolean,java.lang.String,java.lang.String)"
  id: "checkStateOrReturnException(boolean,java.lang.String,java.lang.String)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "checkStateOrReturnException(boolean value, String argumentName, String message)"
  nameWithType: "Utils.checkStateOrReturnException(boolean value, String argumentName, String message)"
  fullName: "com.azure.cosmos.internal.Utils.checkStateOrReturnException(boolean value, String argumentName, String message)"
  overload: "com.azure.cosmos.internal.Utils.checkStateOrReturnException*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static IllegalArgumentException checkStateOrReturnException(boolean value, String argumentName, String message)"
    parameters:
    - id: "value"
      type: "boolean"
    - id: "argumentName"
      type: "java.lang.String"
    - id: "message"
      type: "java.lang.String"
    return:
      type: "java.lang.IllegalArgumentException"
- uid: "com.azure.cosmos.internal.Utils.checkStateOrReturnException(boolean,java.lang.String,java.lang.String,java.lang.Object...)"
  id: "checkStateOrReturnException(boolean,java.lang.String,java.lang.String,java.lang.Object...)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "checkStateOrReturnException(boolean value, String argumentName, String messageTemplate, Object[] messageTemplateParams)"
  nameWithType: "Utils.checkStateOrReturnException(boolean value, String argumentName, String messageTemplate, Object[] messageTemplateParams)"
  fullName: "com.azure.cosmos.internal.Utils.checkStateOrReturnException(boolean value, String argumentName, String messageTemplate, Object[] messageTemplateParams)"
  overload: "com.azure.cosmos.internal.Utils.checkStateOrReturnException*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static IllegalArgumentException checkStateOrReturnException(boolean value, String argumentName, String messageTemplate, Object[] messageTemplateParams)"
    parameters:
    - id: "value"
      type: "boolean"
    - id: "argumentName"
      type: "java.lang.String"
    - id: "messageTemplate"
      type: "java.lang.String"
    - id: "messageTemplateParams"
      type: "java.lang.Object[]"
    return:
      type: "java.lang.IllegalArgumentException"
- uid: "com.azure.cosmos.internal.Utils.checkStateOrThrow(boolean,java.lang.String,java.lang.String)"
  id: "checkStateOrThrow(boolean,java.lang.String,java.lang.String)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "checkStateOrThrow(boolean value, String argumentName, String message)"
  nameWithType: "Utils.checkStateOrThrow(boolean value, String argumentName, String message)"
  fullName: "com.azure.cosmos.internal.Utils.checkStateOrThrow(boolean value, String argumentName, String message)"
  overload: "com.azure.cosmos.internal.Utils.checkStateOrThrow*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static void checkStateOrThrow(boolean value, String argumentName, String message)"
    parameters:
    - id: "value"
      type: "boolean"
    - id: "argumentName"
      type: "java.lang.String"
    - id: "message"
      type: "java.lang.String"
  exceptions:
  - type: "java.lang.IllegalArgumentException"
- uid: "com.azure.cosmos.internal.Utils.checkStateOrThrow(boolean,java.lang.String,java.lang.String,java.lang.Object...)"
  id: "checkStateOrThrow(boolean,java.lang.String,java.lang.String,java.lang.Object...)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "checkStateOrThrow(boolean value, String argumentName, String messageTemplate, Object[] messageTemplateParams)"
  nameWithType: "Utils.checkStateOrThrow(boolean value, String argumentName, String messageTemplate, Object[] messageTemplateParams)"
  fullName: "com.azure.cosmos.internal.Utils.checkStateOrThrow(boolean value, String argumentName, String messageTemplate, Object[] messageTemplateParams)"
  overload: "com.azure.cosmos.internal.Utils.checkStateOrThrow*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static void checkStateOrThrow(boolean value, String argumentName, String messageTemplate, Object[] messageTemplateParams)"
    parameters:
    - id: "value"
      type: "boolean"
    - id: "argumentName"
      type: "java.lang.String"
    - id: "messageTemplate"
      type: "java.lang.String"
    - id: "messageTemplateParams"
      type: "java.lang.Object[]"
  exceptions:
  - type: "java.lang.IllegalArgumentException"
- uid: "com.azure.cosmos.internal.Utils.createQuery(java.util.Map<java.lang.String,java.lang.String>)"
  id: "createQuery(java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "createQuery(Map<String,String> queryParameters)"
  nameWithType: "Utils.createQuery(Map<String,String> queryParameters)"
  fullName: "com.azure.cosmos.internal.Utils.createQuery(Map<String,String> queryParameters)"
  overload: "com.azure.cosmos.internal.Utils.createQuery*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static String createQuery(Map<String,String> queryParameters)"
    parameters:
    - id: "queryParameters"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.internal.Utils.encodeBase64String(byte[])"
  id: "encodeBase64String(byte[])"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "encodeBase64String(byte[] binaryData)"
  nameWithType: "Utils.encodeBase64String(byte[] binaryData)"
  fullName: "com.azure.cosmos.internal.Utils.encodeBase64String(byte[] binaryData)"
  overload: "com.azure.cosmos.internal.Utils.encodeBase64String*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static String encodeBase64String(byte[] binaryData)"
    parameters:
    - id: "binaryData"
      type: "byte[]"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.internal.Utils.getCollectionName(java.lang.String)"
  id: "getCollectionName(java.lang.String)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "getCollectionName(String resourceFullName)"
  nameWithType: "Utils.getCollectionName(String resourceFullName)"
  fullName: "com.azure.cosmos.internal.Utils.getCollectionName(String resourceFullName)"
  overload: "com.azure.cosmos.internal.Utils.getCollectionName*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Given the full path to a resource, extract the collection path."
  syntax:
    content: "public static String getCollectionName(String resourceFullName)"
    parameters:
    - id: "resourceFullName"
      type: "java.lang.String"
      description: "the full path to the resource."
    return:
      type: "java.lang.String"
      description: "the path of the collection in which the resource is."
- uid: "com.azure.cosmos.internal.Utils.getSimpleObjectMapper()"
  id: "getSimpleObjectMapper()"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "getSimpleObjectMapper()"
  nameWithType: "Utils.getSimpleObjectMapper()"
  fullName: "com.azure.cosmos.internal.Utils.getSimpleObjectMapper()"
  overload: "com.azure.cosmos.internal.Utils.getSimpleObjectMapper*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static ObjectMapper getSimpleObjectMapper()"
    return:
      type: "com.fasterxml.jackson.databind.ObjectMapper"
- uid: "com.azure.cosmos.internal.Utils.getUTF8Bytes(java.lang.String)"
  id: "getUTF8Bytes(java.lang.String)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "getUTF8Bytes(String str)"
  nameWithType: "Utils.getUTF8Bytes(String str)"
  fullName: "com.azure.cosmos.internal.Utils.getUTF8Bytes(String str)"
  overload: "com.azure.cosmos.internal.Utils.getUTF8Bytes*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static byte[] getUTF8Bytes(String str)"
    parameters:
    - id: "str"
      type: "java.lang.String"
    return:
      type: "byte[]"
  exceptions:
  - type: "java.io.UnsupportedEncodingException"
- uid: "com.azure.cosmos.internal.Utils.getUserAgent(java.lang.String,java.lang.String)"
  id: "getUserAgent(java.lang.String,java.lang.String)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "getUserAgent(String sdkName, String sdkVersion)"
  nameWithType: "Utils.getUserAgent(String sdkName, String sdkVersion)"
  fullName: "com.azure.cosmos.internal.Utils.getUserAgent(String sdkName, String sdkVersion)"
  overload: "com.azure.cosmos.internal.Utils.getUserAgent*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static String getUserAgent(String sdkName, String sdkVersion)"
    parameters:
    - id: "sdkName"
      type: "java.lang.String"
    - id: "sdkVersion"
      type: "java.lang.String"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.internal.Utils.getValueOrDefault(java.lang.Integer,int)"
  id: "getValueOrDefault(java.lang.Integer,int)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "getValueOrDefault(Integer val, int defaultValue)"
  nameWithType: "Utils.getValueOrDefault(Integer val, int defaultValue)"
  fullName: "com.azure.cosmos.internal.Utils.getValueOrDefault(Integer val, int defaultValue)"
  overload: "com.azure.cosmos.internal.Utils.getValueOrDefault*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static int getValueOrDefault(Integer val, int defaultValue)"
    parameters:
    - id: "val"
      type: "java.lang.Integer"
    - id: "defaultValue"
      type: "int"
    return:
      type: "int"
- uid: "com.azure.cosmos.internal.Utils.isCollectionChild(com.azure.cosmos.internal.ResourceType)"
  id: "isCollectionChild(com.azure.cosmos.internal.ResourceType)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "isCollectionChild(ResourceType type)"
  nameWithType: "Utils.isCollectionChild(ResourceType type)"
  fullName: "com.azure.cosmos.internal.Utils.isCollectionChild(ResourceType type)"
  overload: "com.azure.cosmos.internal.Utils.isCollectionChild*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static boolean isCollectionChild(ResourceType type)"
    parameters:
    - id: "type"
      type: "com.azure.cosmos.internal.ResourceType"
    return:
      type: "boolean"
- uid: "com.azure.cosmos.internal.Utils.isCollectionPartitioned(com.azure.cosmos.internal.DocumentCollection)"
  id: "isCollectionPartitioned(com.azure.cosmos.internal.DocumentCollection)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "isCollectionPartitioned(DocumentCollection collection)"
  nameWithType: "Utils.isCollectionPartitioned(DocumentCollection collection)"
  fullName: "com.azure.cosmos.internal.Utils.isCollectionPartitioned(DocumentCollection collection)"
  overload: "com.azure.cosmos.internal.Utils.isCollectionPartitioned*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static Boolean isCollectionPartitioned(DocumentCollection collection)"
    parameters:
    - id: "collection"
      type: "com.azure.cosmos.internal.DocumentCollection"
    return:
      type: "java.lang.Boolean"
- uid: "com.azure.cosmos.internal.Utils.isDatabaseLink(java.lang.String)"
  id: "isDatabaseLink(java.lang.String)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "isDatabaseLink(String link)"
  nameWithType: "Utils.isDatabaseLink(String link)"
  fullName: "com.azure.cosmos.internal.Utils.isDatabaseLink(String link)"
  overload: "com.azure.cosmos.internal.Utils.isDatabaseLink*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Checks whether the specified link is a Database Self Link or a Database ID based link"
  syntax:
    content: "public static boolean isDatabaseLink(String link)"
    parameters:
    - id: "link"
      type: "java.lang.String"
      description: "the link to analyze."
    return:
      type: "boolean"
      description: "true or false"
- uid: "com.azure.cosmos.internal.Utils.isFeedRequest(com.azure.cosmos.internal.OperationType)"
  id: "isFeedRequest(com.azure.cosmos.internal.OperationType)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "isFeedRequest(OperationType requestOperationType)"
  nameWithType: "Utils.isFeedRequest(OperationType requestOperationType)"
  fullName: "com.azure.cosmos.internal.Utils.isFeedRequest(OperationType requestOperationType)"
  overload: "com.azure.cosmos.internal.Utils.isFeedRequest*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static boolean isFeedRequest(OperationType requestOperationType)"
    parameters:
    - id: "requestOperationType"
      type: "com.azure.cosmos.internal.OperationType"
    return:
      type: "boolean"
- uid: "com.azure.cosmos.internal.Utils.isNameBased(java.lang.String)"
  id: "isNameBased(java.lang.String)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "isNameBased(String link)"
  nameWithType: "Utils.isNameBased(String link)"
  fullName: "com.azure.cosmos.internal.Utils.isNameBased(String link)"
  overload: "com.azure.cosmos.internal.Utils.isNameBased*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Checks whether the specified link is Name based or not"
  syntax:
    content: "public static boolean isNameBased(String link)"
    parameters:
    - id: "link"
      type: "java.lang.String"
      description: "the link to analyze."
    return:
      type: "boolean"
      description: "true or false"
- uid: "com.azure.cosmos.internal.Utils.isValidConsistency(com.azure.cosmos.ConsistencyLevel,com.azure.cosmos.ConsistencyLevel)"
  id: "isValidConsistency(com.azure.cosmos.ConsistencyLevel,com.azure.cosmos.ConsistencyLevel)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "isValidConsistency(ConsistencyLevel backendConsistency, ConsistencyLevel desiredConsistency)"
  nameWithType: "Utils.isValidConsistency(ConsistencyLevel backendConsistency, ConsistencyLevel desiredConsistency)"
  fullName: "com.azure.cosmos.internal.Utils.isValidConsistency(ConsistencyLevel backendConsistency, ConsistencyLevel desiredConsistency)"
  overload: "com.azure.cosmos.internal.Utils.isValidConsistency*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static boolean isValidConsistency(ConsistencyLevel backendConsistency, ConsistencyLevel desiredConsistency)"
    parameters:
    - id: "backendConsistency"
      type: "com.azure.cosmos.ConsistencyLevel"
    - id: "desiredConsistency"
      type: "com.azure.cosmos.ConsistencyLevel"
    return:
      type: "boolean"
- uid: "com.azure.cosmos.internal.Utils.isWriteOperation(com.azure.cosmos.internal.OperationType)"
  id: "isWriteOperation(com.azure.cosmos.internal.OperationType)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "isWriteOperation(OperationType operationType)"
  nameWithType: "Utils.isWriteOperation(OperationType operationType)"
  fullName: "com.azure.cosmos.internal.Utils.isWriteOperation(OperationType operationType)"
  overload: "com.azure.cosmos.internal.Utils.isWriteOperation*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static boolean isWriteOperation(OperationType operationType)"
    parameters:
    - id: "operationType"
      type: "com.azure.cosmos.internal.OperationType"
    return:
      type: "boolean"
- uid: "com.azure.cosmos.internal.Utils.joinPath(java.lang.String,java.lang.String)"
  id: "joinPath(java.lang.String,java.lang.String)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "joinPath(String path1, String path2)"
  nameWithType: "Utils.joinPath(String path1, String path2)"
  fullName: "com.azure.cosmos.internal.Utils.joinPath(String path1, String path2)"
  overload: "com.azure.cosmos.internal.Utils.joinPath*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Joins the specified paths by appropriately padding them with '/'"
  syntax:
    content: "public static String joinPath(String path1, String path2)"
    parameters:
    - id: "path1"
      type: "java.lang.String"
      description: "the first path segment to join."
    - id: "path2"
      type: "java.lang.String"
      description: "the second path segment to join."
    return:
      type: "java.lang.String"
      description: "the concatenated path with '/'"
- uid: "com.azure.cosmos.internal.Utils.nowAsRFC1123()"
  id: "nowAsRFC1123()"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "nowAsRFC1123()"
  nameWithType: "Utils.nowAsRFC1123()"
  fullName: "com.azure.cosmos.internal.Utils.nowAsRFC1123()"
  overload: "com.azure.cosmos.internal.Utils.nowAsRFC1123*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Returns Current Time in RFC 1123 format, e.g, Fri, 01 Dec 2017 19:22:30 GMT."
  syntax:
    content: "public static String nowAsRFC1123()"
    return:
      type: "java.lang.String"
      description: "an instance of STRING"
- uid: "com.azure.cosmos.internal.Utils.paramEncode(java.util.Map<java.lang.String,java.lang.String>)"
  id: "paramEncode(java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "paramEncode(Map<String,String> queryParams)"
  nameWithType: "Utils.paramEncode(Map<String,String> queryParams)"
  fullName: "com.azure.cosmos.internal.Utils.paramEncode(Map<String,String> queryParams)"
  overload: "com.azure.cosmos.internal.Utils.paramEncode*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static Map<String,String> paramEncode(Map<String,String> queryParams)"
    parameters:
    - id: "queryParams"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    return:
      type: "java.util.Map<java.lang.String,java.lang.String>"
- uid: "com.azure.cosmos.internal.Utils.randomUUID()"
  id: "randomUUID()"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "randomUUID()"
  nameWithType: "Utils.randomUUID()"
  fullName: "com.azure.cosmos.internal.Utils.randomUUID()"
  overload: "com.azure.cosmos.internal.Utils.randomUUID*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static UUID randomUUID()"
    return:
      type: "java.util.UUID"
- uid: "com.azure.cosmos.internal.Utils.setQuery(java.lang.String,java.lang.String)"
  id: "setQuery(java.lang.String,java.lang.String)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "setQuery(String urlString, String query)"
  nameWithType: "Utils.setQuery(String urlString, String query)"
  fullName: "com.azure.cosmos.internal.Utils.setQuery(String urlString, String query)"
  overload: "com.azure.cosmos.internal.Utils.setQuery*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static URL setQuery(String urlString, String query)"
    parameters:
    - id: "urlString"
      type: "java.lang.String"
    - id: "query"
      type: "java.lang.String"
    return:
      type: "java.net.URL"
- uid: "com.azure.cosmos.internal.Utils.trimBeginningAndEndingSlashes(java.lang.String)"
  id: "trimBeginningAndEndingSlashes(java.lang.String)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "trimBeginningAndEndingSlashes(String path)"
  nameWithType: "Utils.trimBeginningAndEndingSlashes(String path)"
  fullName: "com.azure.cosmos.internal.Utils.trimBeginningAndEndingSlashes(String path)"
  overload: "com.azure.cosmos.internal.Utils.trimBeginningAndEndingSlashes*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Trims the beginning and ending '/' from the given path"
  syntax:
    content: "public static String trimBeginningAndEndingSlashes(String path)"
    parameters:
    - id: "path"
      type: "java.lang.String"
      description: "the path to trim for beginning and ending slashes"
    return:
      type: "java.lang.String"
      description: "the path without beginning and ending '/'"
- uid: "com.azure.cosmos.internal.Utils.zonedDateTimeAsUTCRFC1123(java.time.OffsetDateTime)"
  id: "zonedDateTimeAsUTCRFC1123(java.time.OffsetDateTime)"
  parent: "com.azure.cosmos.internal.Utils"
  langs:
  - "java"
  name: "zonedDateTimeAsUTCRFC1123(OffsetDateTime offsetDateTime)"
  nameWithType: "Utils.zonedDateTimeAsUTCRFC1123(OffsetDateTime offsetDateTime)"
  fullName: "com.azure.cosmos.internal.Utils.zonedDateTimeAsUTCRFC1123(OffsetDateTime offsetDateTime)"
  overload: "com.azure.cosmos.internal.Utils.zonedDateTimeAsUTCRFC1123*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  syntax:
    content: "public static String zonedDateTimeAsUTCRFC1123(OffsetDateTime offsetDateTime)"
    parameters:
    - id: "offsetDateTime"
      type: "java.time.OffsetDateTime"
    return:
      type: "java.lang.String"
references:
- uid: "com.azure.cosmos.internal.Utils.Utils*"
  name: "Utils"
  nameWithType: "Utils.Utils"
  fullName: "com.azure.cosmos.internal.Utils.Utils"
  package: "com.azure.cosmos.internal"
- uid: "java.io.UnsupportedEncodingException"
  spec.java:
  - uid: "java.io.UnsupportedEncodingException"
    name: "UnsupportedEncodingException"
    fullName: "java.io.UnsupportedEncodingException"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.cosmos.internal.Utils.getUTF8Bytes*"
  name: "getUTF8Bytes"
  nameWithType: "Utils.getUTF8Bytes"
  fullName: "com.azure.cosmos.internal.Utils.getUTF8Bytes"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.Utils.encodeBase64String*"
  name: "encodeBase64String"
  nameWithType: "Utils.encodeBase64String"
  fullName: "com.azure.cosmos.internal.Utils.encodeBase64String"
  package: "com.azure.cosmos.internal"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.cosmos.internal.Utils.isNameBased*"
  name: "isNameBased"
  nameWithType: "Utils.isNameBased"
  fullName: "com.azure.cosmos.internal.Utils.isNameBased"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.Utils.isDatabaseLink*"
  name: "isDatabaseLink"
  nameWithType: "Utils.isDatabaseLink"
  fullName: "com.azure.cosmos.internal.Utils.isDatabaseLink"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.Utils.IsResourceType*"
  name: "IsResourceType"
  nameWithType: "Utils.IsResourceType"
  fullName: "com.azure.cosmos.internal.Utils.IsResourceType"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.Utils.joinPath*"
  name: "joinPath"
  nameWithType: "Utils.joinPath"
  fullName: "com.azure.cosmos.internal.Utils.joinPath"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.Utils.trimBeginningAndEndingSlashes*"
  name: "trimBeginningAndEndingSlashes"
  nameWithType: "Utils.trimBeginningAndEndingSlashes"
  fullName: "com.azure.cosmos.internal.Utils.trimBeginningAndEndingSlashes"
  package: "com.azure.cosmos.internal"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.Utils.paramEncode*"
  name: "paramEncode"
  nameWithType: "Utils.paramEncode"
  fullName: "com.azure.cosmos.internal.Utils.paramEncode"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.Utils.createQuery*"
  name: "createQuery"
  nameWithType: "Utils.createQuery"
  fullName: "com.azure.cosmos.internal.Utils.createQuery"
  package: "com.azure.cosmos.internal"
- uid: "java.net.URL"
  spec.java:
  - uid: "java.net.URL"
    name: "URL"
    fullName: "java.net.URL"
- uid: "com.azure.cosmos.internal.Utils.setQuery*"
  name: "setQuery"
  nameWithType: "Utils.setQuery"
  fullName: "com.azure.cosmos.internal.Utils.setQuery"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.Utils.getCollectionName*"
  name: "getCollectionName"
  nameWithType: "Utils.getCollectionName"
  fullName: "com.azure.cosmos.internal.Utils.getCollectionName"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.DocumentCollection"
  name: "DocumentCollection"
  nameWithType: "DocumentCollection"
  fullName: "com.azure.cosmos.internal.DocumentCollection"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.azure.cosmos.internal.Utils.isCollectionPartitioned*"
  name: "isCollectionPartitioned"
  nameWithType: "Utils.isCollectionPartitioned"
  fullName: "com.azure.cosmos.internal.Utils.isCollectionPartitioned"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.ResourceType"
  name: "ResourceType"
  nameWithType: "ResourceType"
  fullName: "com.azure.cosmos.internal.ResourceType"
- uid: "com.azure.cosmos.internal.Utils.isCollectionChild*"
  name: "isCollectionChild"
  nameWithType: "Utils.isCollectionChild"
  fullName: "com.azure.cosmos.internal.Utils.isCollectionChild"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.OperationType"
  name: "OperationType"
  nameWithType: "OperationType"
  fullName: "com.azure.cosmos.internal.OperationType"
- uid: "com.azure.cosmos.internal.Utils.isWriteOperation*"
  name: "isWriteOperation"
  nameWithType: "Utils.isWriteOperation"
  fullName: "com.azure.cosmos.internal.Utils.isWriteOperation"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.Utils.isFeedRequest*"
  name: "isFeedRequest"
  nameWithType: "Utils.isFeedRequest"
  fullName: "com.azure.cosmos.internal.Utils.isFeedRequest"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.ConsistencyLevel"
  name: "ConsistencyLevel"
  nameWithType: "ConsistencyLevel"
  fullName: "com.azure.cosmos.ConsistencyLevel"
- uid: "com.azure.cosmos.internal.Utils.isValidConsistency*"
  name: "isValidConsistency"
  nameWithType: "Utils.isValidConsistency"
  fullName: "com.azure.cosmos.internal.Utils.isValidConsistency"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.Utils.getUserAgent*"
  name: "getUserAgent"
  nameWithType: "Utils.getUserAgent"
  fullName: "com.azure.cosmos.internal.Utils.getUserAgent"
  package: "com.azure.cosmos.internal"
- uid: "com.fasterxml.jackson.databind.ObjectMapper"
  spec.java:
  - uid: "com.fasterxml.jackson.databind.ObjectMapper"
    name: "ObjectMapper"
    fullName: "com.fasterxml.jackson.databind.ObjectMapper"
- uid: "com.azure.cosmos.internal.Utils.getSimpleObjectMapper*"
  name: "getSimpleObjectMapper"
  nameWithType: "Utils.getSimpleObjectMapper"
  fullName: "com.azure.cosmos.internal.Utils.getSimpleObjectMapper"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.Utils.nowAsRFC1123*"
  name: "nowAsRFC1123"
  nameWithType: "Utils.nowAsRFC1123"
  fullName: "com.azure.cosmos.internal.Utils.nowAsRFC1123"
  package: "com.azure.cosmos.internal"
- uid: "java.util.UUID"
  spec.java:
  - uid: "java.util.UUID"
    name: "UUID"
    fullName: "java.util.UUID"
- uid: "com.azure.cosmos.internal.Utils.randomUUID*"
  name: "randomUUID"
  nameWithType: "Utils.randomUUID"
  fullName: "com.azure.cosmos.internal.Utils.randomUUID"
  package: "com.azure.cosmos.internal"
- uid: "java.time.OffsetDateTime"
  spec.java:
  - uid: "java.time.OffsetDateTime"
    name: "OffsetDateTime"
    fullName: "java.time.OffsetDateTime"
- uid: "com.azure.cosmos.internal.Utils.zonedDateTimeAsUTCRFC1123*"
  name: "zonedDateTimeAsUTCRFC1123"
  nameWithType: "Utils.zonedDateTimeAsUTCRFC1123"
  fullName: "com.azure.cosmos.internal.Utils.zonedDateTimeAsUTCRFC1123"
  package: "com.azure.cosmos.internal"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.azure.cosmos.internal.Utils.getValueOrDefault*"
  name: "getValueOrDefault"
  nameWithType: "Utils.getValueOrDefault"
  fullName: "com.azure.cosmos.internal.Utils.getValueOrDefault"
  package: "com.azure.cosmos.internal"
- uid: "java.lang.IllegalArgumentException"
  spec.java:
  - uid: "java.lang.IllegalArgumentException"
    name: "IllegalArgumentException"
    fullName: "java.lang.IllegalArgumentException"
- uid: "com.azure.cosmos.internal.Utils.checkStateOrThrow*"
  name: "checkStateOrThrow"
  nameWithType: "Utils.checkStateOrThrow"
  fullName: "com.azure.cosmos.internal.Utils.checkStateOrThrow"
  package: "com.azure.cosmos.internal"
- uid: "java.lang.NullPointerException"
  spec.java:
  - uid: "java.lang.NullPointerException"
    name: "NullPointerException"
    fullName: "java.lang.NullPointerException"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "com.azure.cosmos.internal.Utils.checkNotNullOrThrow*"
  name: "checkNotNullOrThrow"
  nameWithType: "Utils.checkNotNullOrThrow"
  fullName: "com.azure.cosmos.internal.Utils.checkNotNullOrThrow"
  package: "com.azure.cosmos.internal"
- uid: "java.lang.Object[]"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.cosmos.internal.Utils.checkStateOrReturnException*"
  name: "checkStateOrReturnException"
  nameWithType: "Utils.checkStateOrReturnException"
  fullName: "com.azure.cosmos.internal.Utils.checkStateOrReturnException"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.BadRequestException"
  name: "BadRequestException"
  nameWithType: "BadRequestException"
  fullName: "com.azure.cosmos.BadRequestException"
- uid: "com.azure.cosmos.internal.Utils.checkRequestOrReturnException*"
  name: "checkRequestOrReturnException"
  nameWithType: "Utils.checkRequestOrReturnException"
  fullName: "com.azure.cosmos.internal.Utils.checkRequestOrReturnException"
  package: "com.azure.cosmos.internal"
- uid: "I"
  spec.java:
  - uid: "I"
    name: "I"
    fullName: "I"
- uid: "java.lang.Class<O>"
  spec.java:
  - uid: "java.lang.Class"
    name: "Class"
    fullName: "java.lang.Class"
  - name: "<"
    fullName: "<"
  - uid: "O"
    name: "O"
    fullName: "O"
  - name: ">"
    fullName: ">"
- uid: "O"
  spec.java:
  - uid: "O"
    name: "O"
    fullName: "O"
- uid: "com.azure.cosmos.internal.Utils.as*"
  name: "<O,I>as"
  nameWithType: "Utils.<O,I>as"
  fullName: "com.azure.cosmos.internal.Utils.<O,I>as"
  package: "com.azure.cosmos.internal"
- uid: "java.util.List<V>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "V"
    name: "V"
    fullName: "V"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.Utils.immutableListOf*"
  name: "<V>immutableListOf"
  nameWithType: "Utils.<V>immutableListOf"
  fullName: "com.azure.cosmos.internal.Utils.<V>immutableListOf"
  package: "com.azure.cosmos.internal"
- uid: "V"
  spec.java:
  - uid: "V"
    name: "V"
    fullName: "V"
- uid: "java.util.Map<K,V>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "K"
    name: "K"
    fullName: "K"
  - name: ","
    fullName: ","
  - uid: "V"
    name: "V"
    fullName: "V"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.Utils.immutableMapOf*"
  name: "<K,V>immutableMapOf"
  nameWithType: "Utils.<K,V>immutableMapOf"
  fullName: "com.azure.cosmos.internal.Utils.<K,V>immutableMapOf"
  package: "com.azure.cosmos.internal"
- uid: "K"
  spec.java:
  - uid: "K"
    name: "K"
    fullName: "K"
- uid: "com.azure.cosmos.internal.Utils.firstOrDefault*"
  name: "<V>firstOrDefault"
  nameWithType: "Utils.<V>firstOrDefault"
  fullName: "com.azure.cosmos.internal.Utils.<V>firstOrDefault"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.Utils.ValueHolder<V>"
  spec.java:
  - uid: "com.azure.cosmos.internal.Utils.ValueHolder"
    name: "ValueHolder"
    fullName: "com.azure.cosmos.internal.Utils.ValueHolder"
  - name: "<"
    fullName: "<"
  - uid: "V"
    name: "V"
    fullName: "V"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.Utils.tryGetValue*"
  name: "<K,V>tryGetValue"
  nameWithType: "Utils.<K,V>tryGetValue"
  fullName: "com.azure.cosmos.internal.Utils.<K,V>tryGetValue"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.Utils.tryRemove*"
  name: "<K,V>tryRemove"
  nameWithType: "Utils.<K,V>tryRemove"
  fullName: "com.azure.cosmos.internal.Utils.<K,V>tryRemove"
  package: "com.azure.cosmos.internal"
- uid: "java.util.Base64.Encoder"
  spec.java:
  - uid: "java.util.Base64.Encoder"
    name: "Encoder"
    fullName: "java.util.Base64.Encoder"
- uid: "java.util.Base64.Decoder"
  spec.java:
  - uid: "java.util.Base64.Decoder"
    name: "Decoder"
    fullName: "java.util.Base64.Decoder"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.cosmos.internal.Utils.ValueHolder"
  name: "Utils.ValueHolder<V>"
  nameWithType: "Utils.ValueHolder<V>"
  fullName: "com.azure.cosmos.internal.Utils.ValueHolder<V>"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
- uid: "java.lang.Class"
  name: "Class"
  nameWithType: "Class"
  fullName: "java.lang.Class"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "K,V"
  name: "K,V"
  nameWithType: "K,V"
  fullName: "K,V"
