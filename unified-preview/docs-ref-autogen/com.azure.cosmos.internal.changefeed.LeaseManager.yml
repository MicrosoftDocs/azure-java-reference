### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.internal.changefeed.LeaseManager"
  id: "LeaseManager"
  parent: "com.azure.cosmos.internal.changefeed"
  children:
  - "com.azure.cosmos.internal.changefeed.LeaseManager.acquire(com.azure.cosmos.internal.changefeed.Lease)"
  - "com.azure.cosmos.internal.changefeed.LeaseManager.createLeaseIfNotExist(java.lang.String,java.lang.String)"
  - "com.azure.cosmos.internal.changefeed.LeaseManager.delete(com.azure.cosmos.internal.changefeed.Lease)"
  - "com.azure.cosmos.internal.changefeed.LeaseManager.release(com.azure.cosmos.internal.changefeed.Lease)"
  - "com.azure.cosmos.internal.changefeed.LeaseManager.renew(com.azure.cosmos.internal.changefeed.Lease)"
  - "com.azure.cosmos.internal.changefeed.LeaseManager.updateProperties(com.azure.cosmos.internal.changefeed.Lease)"
  langs:
  - "java"
  name: "LeaseManager"
  nameWithType: "LeaseManager"
  fullName: "com.azure.cosmos.internal.changefeed.LeaseManager"
  type: "Interface"
  package: "com.azure.cosmos.internal.changefeed"
  summary: "It defines a way to perform operations with <xref uid=\"com.azure.cosmos.internal.changefeed.Lease\" data-throw-if-not-resolved=\"false\">Lease</xref>."
  syntax:
    content: "public interface LeaseManager"
- uid: "com.azure.cosmos.internal.changefeed.LeaseManager.acquire(com.azure.cosmos.internal.changefeed.Lease)"
  id: "acquire(com.azure.cosmos.internal.changefeed.Lease)"
  parent: "com.azure.cosmos.internal.changefeed.LeaseManager"
  langs:
  - "java"
  name: "acquire(Lease lease)"
  nameWithType: "LeaseManager.acquire(Lease lease)"
  fullName: "com.azure.cosmos.internal.changefeed.LeaseManager.acquire(Lease lease)"
  overload: "com.azure.cosmos.internal.changefeed.LeaseManager.acquire*"
  type: "Method"
  package: "com.azure.cosmos.internal.changefeed"
  summary: "Acquires ownership of the lease. It can throw <xref uid=\"com.azure.cosmos.internal.changefeed.exceptions.LeaseLostException\" data-throw-if-not-resolved=\"false\">LeaseLostException</xref> if other host acquired concurrently the lease."
  syntax:
    content: "public abstract Mono<Lease> acquire(Lease lease)"
    parameters:
    - id: "lease"
      type: "com.azure.cosmos.internal.changefeed.Lease"
      description: "the lease to acquire."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.internal.changefeed.Lease>"
      description: "the updated lease."
- uid: "com.azure.cosmos.internal.changefeed.LeaseManager.createLeaseIfNotExist(java.lang.String,java.lang.String)"
  id: "createLeaseIfNotExist(java.lang.String,java.lang.String)"
  parent: "com.azure.cosmos.internal.changefeed.LeaseManager"
  langs:
  - "java"
  name: "createLeaseIfNotExist(String leaseToken, String continuationToken)"
  nameWithType: "LeaseManager.createLeaseIfNotExist(String leaseToken, String continuationToken)"
  fullName: "com.azure.cosmos.internal.changefeed.LeaseManager.createLeaseIfNotExist(String leaseToken, String continuationToken)"
  overload: "com.azure.cosmos.internal.changefeed.LeaseManager.createLeaseIfNotExist*"
  type: "Method"
  package: "com.azure.cosmos.internal.changefeed"
  summary: "Checks whether the lease exists and creates it if it does not exist."
  syntax:
    content: "public abstract Mono<Lease> createLeaseIfNotExist(String leaseToken, String continuationToken)"
    parameters:
    - id: "leaseToken"
      type: "java.lang.String"
      description: "the lease token to work with."
    - id: "continuationToken"
      type: "java.lang.String"
      description: "the continuation token if it exists."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.internal.changefeed.Lease>"
      description: "the lease."
- uid: "com.azure.cosmos.internal.changefeed.LeaseManager.delete(com.azure.cosmos.internal.changefeed.Lease)"
  id: "delete(com.azure.cosmos.internal.changefeed.Lease)"
  parent: "com.azure.cosmos.internal.changefeed.LeaseManager"
  langs:
  - "java"
  name: "delete(Lease lease)"
  nameWithType: "LeaseManager.delete(Lease lease)"
  fullName: "com.azure.cosmos.internal.changefeed.LeaseManager.delete(Lease lease)"
  overload: "com.azure.cosmos.internal.changefeed.LeaseManager.delete*"
  type: "Method"
  package: "com.azure.cosmos.internal.changefeed"
  summary: "Deletes the lease."
  syntax:
    content: "public abstract Mono<Void> delete(Lease lease)"
    parameters:
    - id: "lease"
      type: "com.azure.cosmos.internal.changefeed.Lease"
      description: "the lease to delete."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "a deferred computation of this call."
- uid: "com.azure.cosmos.internal.changefeed.LeaseManager.release(com.azure.cosmos.internal.changefeed.Lease)"
  id: "release(com.azure.cosmos.internal.changefeed.Lease)"
  parent: "com.azure.cosmos.internal.changefeed.LeaseManager"
  langs:
  - "java"
  name: "release(Lease lease)"
  nameWithType: "LeaseManager.release(Lease lease)"
  fullName: "com.azure.cosmos.internal.changefeed.LeaseManager.release(Lease lease)"
  overload: "com.azure.cosmos.internal.changefeed.LeaseManager.release*"
  type: "Method"
  package: "com.azure.cosmos.internal.changefeed"
  summary: "It releases ownership of the lease. It can throw <xref uid=\"com.azure.cosmos.internal.changefeed.exceptions.LeaseLostException\" data-throw-if-not-resolved=\"false\">LeaseLostException</xref> if other host acquired the lease."
  syntax:
    content: "public abstract Mono<Void> release(Lease lease)"
    parameters:
    - id: "lease"
      type: "com.azure.cosmos.internal.changefeed.Lease"
      description: "the lease to acquire."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "a deferred computation of this call."
- uid: "com.azure.cosmos.internal.changefeed.LeaseManager.renew(com.azure.cosmos.internal.changefeed.Lease)"
  id: "renew(com.azure.cosmos.internal.changefeed.Lease)"
  parent: "com.azure.cosmos.internal.changefeed.LeaseManager"
  langs:
  - "java"
  name: "renew(Lease lease)"
  nameWithType: "LeaseManager.renew(Lease lease)"
  fullName: "com.azure.cosmos.internal.changefeed.LeaseManager.renew(Lease lease)"
  overload: "com.azure.cosmos.internal.changefeed.LeaseManager.renew*"
  type: "Method"
  package: "com.azure.cosmos.internal.changefeed"
  summary: "Renew the lease; leases are periodically renewed to prevent expiration. It can throw <xref uid=\"com.azure.cosmos.internal.changefeed.exceptions.LeaseLostException\" data-throw-if-not-resolved=\"false\">LeaseLostException</xref> if other host acquired the lease."
  syntax:
    content: "public abstract Mono<Lease> renew(Lease lease)"
    parameters:
    - id: "lease"
      type: "com.azure.cosmos.internal.changefeed.Lease"
      description: "the lease to renew."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.internal.changefeed.Lease>"
      description: "the updated lease."
- uid: "com.azure.cosmos.internal.changefeed.LeaseManager.updateProperties(com.azure.cosmos.internal.changefeed.Lease)"
  id: "updateProperties(com.azure.cosmos.internal.changefeed.Lease)"
  parent: "com.azure.cosmos.internal.changefeed.LeaseManager"
  langs:
  - "java"
  name: "updateProperties(Lease leaseToUpdatePropertiesFrom)"
  nameWithType: "LeaseManager.updateProperties(Lease leaseToUpdatePropertiesFrom)"
  fullName: "com.azure.cosmos.internal.changefeed.LeaseManager.updateProperties(Lease leaseToUpdatePropertiesFrom)"
  overload: "com.azure.cosmos.internal.changefeed.LeaseManager.updateProperties*"
  type: "Method"
  package: "com.azure.cosmos.internal.changefeed"
  summary: "REPLACE item from the specified lease. It can throw <xref uid=\"com.azure.cosmos.internal.changefeed.exceptions.LeaseLostException\" data-throw-if-not-resolved=\"false\">LeaseLostException</xref> if other host acquired the lease."
  syntax:
    content: "public abstract Mono<Lease> updateProperties(Lease leaseToUpdatePropertiesFrom)"
    parameters:
    - id: "leaseToUpdatePropertiesFrom"
      type: "com.azure.cosmos.internal.changefeed.Lease"
      description: "the new item."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.internal.changefeed.Lease>"
      description: "updated lease."
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.internal.changefeed.Lease>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.changefeed.Lease"
    name: "Lease"
    fullName: "com.azure.cosmos.internal.changefeed.Lease"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.changefeed.LeaseManager.createLeaseIfNotExist*"
  name: "createLeaseIfNotExist"
  nameWithType: "LeaseManager.createLeaseIfNotExist"
  fullName: "com.azure.cosmos.internal.changefeed.LeaseManager.createLeaseIfNotExist"
  package: "com.azure.cosmos.internal.changefeed"
- uid: "com.azure.cosmos.internal.changefeed.Lease"
  name: "Lease"
  nameWithType: "Lease"
  fullName: "com.azure.cosmos.internal.changefeed.Lease"
- uid: "reactor.core.publisher.Mono<java.lang.Void>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.changefeed.LeaseManager.delete*"
  name: "delete"
  nameWithType: "LeaseManager.delete"
  fullName: "com.azure.cosmos.internal.changefeed.LeaseManager.delete"
  package: "com.azure.cosmos.internal.changefeed"
- uid: "com.azure.cosmos.internal.changefeed.LeaseManager.acquire*"
  name: "acquire"
  nameWithType: "LeaseManager.acquire"
  fullName: "com.azure.cosmos.internal.changefeed.LeaseManager.acquire"
  package: "com.azure.cosmos.internal.changefeed"
- uid: "com.azure.cosmos.internal.changefeed.LeaseManager.release*"
  name: "release"
  nameWithType: "LeaseManager.release"
  fullName: "com.azure.cosmos.internal.changefeed.LeaseManager.release"
  package: "com.azure.cosmos.internal.changefeed"
- uid: "com.azure.cosmos.internal.changefeed.LeaseManager.renew*"
  name: "renew"
  nameWithType: "LeaseManager.renew"
  fullName: "com.azure.cosmos.internal.changefeed.LeaseManager.renew"
  package: "com.azure.cosmos.internal.changefeed"
- uid: "com.azure.cosmos.internal.changefeed.LeaseManager.updateProperties*"
  name: "updateProperties"
  nameWithType: "LeaseManager.updateProperties"
  fullName: "com.azure.cosmos.internal.changefeed.LeaseManager.updateProperties"
  package: "com.azure.cosmos.internal.changefeed"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
