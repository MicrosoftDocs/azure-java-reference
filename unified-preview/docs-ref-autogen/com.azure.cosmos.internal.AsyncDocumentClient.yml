### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.internal.AsyncDocumentClient"
  id: "AsyncDocumentClient"
  parent: "com.azure.cosmos.internal"
  children:
  - "com.azure.cosmos.internal.AsyncDocumentClient.Builder"
  - "com.azure.cosmos.internal.AsyncDocumentClient.close()"
  - "com.azure.cosmos.internal.AsyncDocumentClient.createCollection(java.lang.String,com.azure.cosmos.internal.DocumentCollection,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.createDatabase(com.azure.cosmos.internal.Database,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.createDocument(java.lang.String,java.lang.Object,com.azure.cosmos.internal.RequestOptions,boolean)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.createPermission(java.lang.String,com.azure.cosmos.internal.Permission,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.createStoredProcedure(java.lang.String,com.azure.cosmos.internal.StoredProcedure,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.createTrigger(java.lang.String,com.azure.cosmos.internal.Trigger,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.createUser(java.lang.String,com.azure.cosmos.internal.User,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.createUserDefinedFunction(java.lang.String,com.azure.cosmos.internal.UserDefinedFunction,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.deleteCollection(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.deleteConflict(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.deleteDatabase(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.deleteDocument(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.deletePermission(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.deleteStoredProcedure(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.deleteTrigger(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.deleteUser(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.deleteUserDefinedFunction(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.executeStoredProcedure(java.lang.String,com.azure.cosmos.internal.RequestOptions,java.lang.Object[])"
  - "com.azure.cosmos.internal.AsyncDocumentClient.executeStoredProcedure(java.lang.String,java.lang.Object[])"
  - "com.azure.cosmos.internal.AsyncDocumentClient.getConnectionPolicy()"
  - "com.azure.cosmos.internal.AsyncDocumentClient.getDatabaseAccount()"
  - "com.azure.cosmos.internal.AsyncDocumentClient.getReadEndpoint()"
  - "com.azure.cosmos.internal.AsyncDocumentClient.getServiceEndpoint()"
  - "com.azure.cosmos.internal.AsyncDocumentClient.getWriteEndpoint()"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryCollections(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryCollections(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryConflicts(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryConflicts(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryDatabases(com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryDatabases(java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryDocumentChangeFeed(java.lang.String,com.azure.cosmos.ChangeFeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryDocuments(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryDocuments(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryOffers(com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryOffers(java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryPermissions(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryPermissions(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryStoredProcedures(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryStoredProcedures(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryTriggers(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryTriggers(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryUserDefinedFunctions(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryUserDefinedFunctions(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryUsers(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.queryUsers(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readCollection(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readCollections(java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readConflict(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readConflicts(java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readDatabase(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readDatabases(com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readDocument(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readDocuments(java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readOffer(java.lang.String)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readOffers(com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readPartitionKeyRanges(java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readPermission(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readPermissions(java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readStoredProcedure(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readStoredProcedures(java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readTrigger(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readTriggers(java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readUser(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readUserDefinedFunction(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readUserDefinedFunctions(java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.readUsers(java.lang.String,com.azure.cosmos.FeedOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.replaceCollection(com.azure.cosmos.internal.DocumentCollection,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.replaceDocument(com.azure.cosmos.internal.Document,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.replaceDocument(java.lang.String,java.lang.Object,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.replaceOffer(com.azure.cosmos.internal.Offer)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.replacePermission(com.azure.cosmos.internal.Permission,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.replaceStoredProcedure(com.azure.cosmos.internal.StoredProcedure,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.replaceTrigger(com.azure.cosmos.internal.Trigger,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.replaceUser(com.azure.cosmos.internal.User,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.replaceUserDefinedFunction(com.azure.cosmos.internal.UserDefinedFunction,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.upsertDocument(java.lang.String,java.lang.Object,com.azure.cosmos.internal.RequestOptions,boolean)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.upsertPermission(java.lang.String,com.azure.cosmos.internal.Permission,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.upsertStoredProcedure(java.lang.String,com.azure.cosmos.internal.StoredProcedure,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.upsertTrigger(java.lang.String,com.azure.cosmos.internal.Trigger,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.upsertUser(java.lang.String,com.azure.cosmos.internal.User,com.azure.cosmos.internal.RequestOptions)"
  - "com.azure.cosmos.internal.AsyncDocumentClient.upsertUserDefinedFunction(java.lang.String,com.azure.cosmos.internal.UserDefinedFunction,com.azure.cosmos.internal.RequestOptions)"
  langs:
  - "java"
  name: "AsyncDocumentClient"
  nameWithType: "AsyncDocumentClient"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient"
  type: "Interface"
  package: "com.azure.cosmos.internal"
  summary: "Provides a client-side logical representation of the Azure Cosmos DB database service. This async client is used to configure and execute requests against the service.\n\n<xref uid=\"com.azure.cosmos.internal.AsyncDocumentClient\" data-throw-if-not-resolved=\"false\">AsyncDocumentClient</xref> async APIs return [project reactor][]'s <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref>, and so you can use project reactor <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> functionality. **The async <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> based APIs perform the requested operation only after subscription.**\n\nThe service client encapsulates the endpoint and credentials used to access the Cosmos DB service.\n\nTo instantiate you can use the <xref uid=\"\" data-throw-if-not-resolved=\"false\">Builder</xref>\n\n```java\nConnectionPolicy connectionPolicy = new ConnectionPolicy();\n connectionPolicy.connectionMode(ConnectionMode.DIRECT);\n AsyncDocumentClient client = new AsyncDocumentClient.Builder()\n         .withServiceEndpoint(serviceEndpoint)\n         .withMasterKeyOrResourceToken(masterKey)\n         .withConnectionPolicy(connectionPolicy)\n         .withConsistencyLevel(ConsistencyLevel.SESSION)\n         .buildAsyncClient();\n```\n\n\n[project reactor]: https://github.com/reactor/reactor-core"
  syntax:
    content: "public interface AsyncDocumentClient"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.close()"
  id: "close()"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "close()"
  nameWithType: "AsyncDocumentClient.close()"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.close()"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.close*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Close this <xref uid=\"com.azure.cosmos.internal.AsyncDocumentClient\" data-throw-if-not-resolved=\"false\">AsyncDocumentClient</xref> instance and cleans up the resources."
  syntax:
    content: "public abstract void close()"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.createCollection(java.lang.String,com.azure.cosmos.internal.DocumentCollection,com.azure.cosmos.internal.RequestOptions)"
  id: "createCollection(java.lang.String,com.azure.cosmos.internal.DocumentCollection,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "createCollection(String databaseLink, DocumentCollection collection, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.createCollection(String databaseLink, DocumentCollection collection, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.createCollection(String databaseLink, DocumentCollection collection, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.createCollection*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Creates a document collection.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the created collection. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<DocumentCollection>> createCollection(String databaseLink, DocumentCollection collection, RequestOptions options)"
    parameters:
    - id: "databaseLink"
      type: "java.lang.String"
      description: "the database link."
    - id: "collection"
      type: "com.azure.cosmos.internal.DocumentCollection"
      description: "the collection."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.DocumentCollection>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the created collection or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.createDatabase(com.azure.cosmos.internal.Database,com.azure.cosmos.internal.RequestOptions)"
  id: "createDatabase(com.azure.cosmos.internal.Database,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "createDatabase(Database database, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.createDatabase(Database database, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.createDatabase(Database database, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.createDatabase*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Creates a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the created database. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Database>> createDatabase(Database database, RequestOptions options)"
    parameters:
    - id: "database"
      type: "com.azure.cosmos.internal.Database"
      description: "the database."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Database>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the created database or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.createDocument(java.lang.String,java.lang.Object,com.azure.cosmos.internal.RequestOptions,boolean)"
  id: "createDocument(java.lang.String,java.lang.Object,com.azure.cosmos.internal.RequestOptions,boolean)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "createDocument(String collectionLink, Object document, RequestOptions options, boolean disableAutomaticIdGeneration)"
  nameWithType: "AsyncDocumentClient.createDocument(String collectionLink, Object document, RequestOptions options, boolean disableAutomaticIdGeneration)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.createDocument(String collectionLink, Object document, RequestOptions options, boolean disableAutomaticIdGeneration)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.createDocument*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Creates a document.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the created document. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Document>> createDocument(String collectionLink, Object document, RequestOptions options, boolean disableAutomaticIdGeneration)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the link to the parent document collection."
    - id: "document"
      type: "java.lang.Object"
      description: "the document represented as a POJO or Document object."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    - id: "disableAutomaticIdGeneration"
      type: "boolean"
      description: "the flag for disabling automatic id generation."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Document>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the created document or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.createPermission(java.lang.String,com.azure.cosmos.internal.Permission,com.azure.cosmos.internal.RequestOptions)"
  id: "createPermission(java.lang.String,com.azure.cosmos.internal.Permission,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "createPermission(String userLink, Permission permission, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.createPermission(String userLink, Permission permission, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.createPermission(String userLink, Permission permission, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.createPermission*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Creates a permission.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the created permission. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Permission>> createPermission(String userLink, Permission permission, RequestOptions options)"
    parameters:
    - id: "userLink"
      type: "java.lang.String"
      description: "the user link."
    - id: "permission"
      type: "com.azure.cosmos.internal.Permission"
      description: "the permission to create."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Permission>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the created permission or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.createStoredProcedure(java.lang.String,com.azure.cosmos.internal.StoredProcedure,com.azure.cosmos.internal.RequestOptions)"
  id: "createStoredProcedure(java.lang.String,com.azure.cosmos.internal.StoredProcedure,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "createStoredProcedure(String collectionLink, StoredProcedure storedProcedure, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.createStoredProcedure(String collectionLink, StoredProcedure storedProcedure, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.createStoredProcedure(String collectionLink, StoredProcedure storedProcedure, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.createStoredProcedure*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Creates a stored procedure.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the created stored procedure. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<StoredProcedure>> createStoredProcedure(String collectionLink, StoredProcedure storedProcedure, RequestOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "storedProcedure"
      type: "com.azure.cosmos.internal.StoredProcedure"
      description: "the stored procedure to create."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.StoredProcedure>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the created stored procedure or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.createTrigger(java.lang.String,com.azure.cosmos.internal.Trigger,com.azure.cosmos.internal.RequestOptions)"
  id: "createTrigger(java.lang.String,com.azure.cosmos.internal.Trigger,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "createTrigger(String collectionLink, Trigger trigger, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.createTrigger(String collectionLink, Trigger trigger, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.createTrigger(String collectionLink, Trigger trigger, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.createTrigger*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Creates a trigger.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the created trigger. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Trigger>> createTrigger(String collectionLink, Trigger trigger, RequestOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "trigger"
      type: "com.azure.cosmos.internal.Trigger"
      description: "the trigger."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Trigger>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the created trigger or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.createUser(java.lang.String,com.azure.cosmos.internal.User,com.azure.cosmos.internal.RequestOptions)"
  id: "createUser(java.lang.String,com.azure.cosmos.internal.User,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "createUser(String databaseLink, User user, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.createUser(String databaseLink, User user, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.createUser(String databaseLink, User user, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.createUser*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Creates a user.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the created user. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<User>> createUser(String databaseLink, User user, RequestOptions options)"
    parameters:
    - id: "databaseLink"
      type: "java.lang.String"
      description: "the database link."
    - id: "user"
      type: "com.azure.cosmos.internal.User"
      description: "the user to create."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.User>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the created user or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.createUserDefinedFunction(java.lang.String,com.azure.cosmos.internal.UserDefinedFunction,com.azure.cosmos.internal.RequestOptions)"
  id: "createUserDefinedFunction(java.lang.String,com.azure.cosmos.internal.UserDefinedFunction,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "createUserDefinedFunction(String collectionLink, UserDefinedFunction udf, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.createUserDefinedFunction(String collectionLink, UserDefinedFunction udf, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.createUserDefinedFunction(String collectionLink, UserDefinedFunction udf, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.createUserDefinedFunction*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Creates a user defined function.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the created user defined function. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<UserDefinedFunction>> createUserDefinedFunction(String collectionLink, UserDefinedFunction udf, RequestOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "udf"
      type: "com.azure.cosmos.internal.UserDefinedFunction"
      description: "the user defined function."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.UserDefinedFunction>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the created user defined function or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deleteCollection(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "deleteCollection(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "deleteCollection(String collectionLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.deleteCollection(String collectionLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deleteCollection(String collectionLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.deleteCollection*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Deletes a document collection by the collection link.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response for the deleted database. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<DocumentCollection>> deleteCollection(String collectionLink, RequestOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.DocumentCollection>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response for the deleted database or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deleteConflict(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "deleteConflict(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "deleteConflict(String conflictLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.deleteConflict(String conflictLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deleteConflict(String conflictLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.deleteConflict*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Deletes a conflict.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response for the deleted conflict. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Conflict>> deleteConflict(String conflictLink, RequestOptions options)"
    parameters:
    - id: "conflictLink"
      type: "java.lang.String"
      description: "the conflict link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Conflict>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response for the deleted conflict or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deleteDatabase(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "deleteDatabase(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "deleteDatabase(String databaseLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.deleteDatabase(String databaseLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deleteDatabase(String databaseLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.deleteDatabase*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Deletes a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the deleted database. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Database>> deleteDatabase(String databaseLink, RequestOptions options)"
    parameters:
    - id: "databaseLink"
      type: "java.lang.String"
      description: "the database link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Database>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the deleted database or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deleteDocument(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "deleteDocument(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "deleteDocument(String documentLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.deleteDocument(String documentLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deleteDocument(String documentLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.deleteDocument*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Deletes a document by the document link.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response for the deleted document. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Document>> deleteDocument(String documentLink, RequestOptions options)"
    parameters:
    - id: "documentLink"
      type: "java.lang.String"
      description: "the document link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Document>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response for the deleted document or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deletePermission(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "deletePermission(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "deletePermission(String permissionLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.deletePermission(String permissionLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deletePermission(String permissionLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.deletePermission*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Deletes a permission.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response for the deleted permission. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Permission>> deletePermission(String permissionLink, RequestOptions options)"
    parameters:
    - id: "permissionLink"
      type: "java.lang.String"
      description: "the permission link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Permission>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response for the deleted permission or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deleteStoredProcedure(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "deleteStoredProcedure(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "deleteStoredProcedure(String storedProcedureLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.deleteStoredProcedure(String storedProcedureLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deleteStoredProcedure(String storedProcedureLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.deleteStoredProcedure*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Deletes a stored procedure by the stored procedure link.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response for the deleted stored procedure. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<StoredProcedure>> deleteStoredProcedure(String storedProcedureLink, RequestOptions options)"
    parameters:
    - id: "storedProcedureLink"
      type: "java.lang.String"
      description: "the stored procedure link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.StoredProcedure>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response for the deleted stored procedure or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deleteTrigger(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "deleteTrigger(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "deleteTrigger(String triggerLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.deleteTrigger(String triggerLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deleteTrigger(String triggerLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.deleteTrigger*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Deletes a trigger.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response for the deleted trigger. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Trigger>> deleteTrigger(String triggerLink, RequestOptions options)"
    parameters:
    - id: "triggerLink"
      type: "java.lang.String"
      description: "the trigger link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Trigger>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response for the deleted trigger or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deleteUser(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "deleteUser(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "deleteUser(String userLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.deleteUser(String userLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deleteUser(String userLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.deleteUser*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Deletes a user.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response for the deleted user. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<User>> deleteUser(String userLink, RequestOptions options)"
    parameters:
    - id: "userLink"
      type: "java.lang.String"
      description: "the user link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.User>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response for the deleted user or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deleteUserDefinedFunction(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "deleteUserDefinedFunction(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "deleteUserDefinedFunction(String udfLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.deleteUserDefinedFunction(String udfLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deleteUserDefinedFunction(String udfLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.deleteUserDefinedFunction*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Deletes a user defined function.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response for the deleted user defined function. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<UserDefinedFunction>> deleteUserDefinedFunction(String udfLink, RequestOptions options)"
    parameters:
    - id: "udfLink"
      type: "java.lang.String"
      description: "the user defined function link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.UserDefinedFunction>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response for the deleted user defined function or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.executeStoredProcedure(java.lang.String,com.azure.cosmos.internal.RequestOptions,java.lang.Object[])"
  id: "executeStoredProcedure(java.lang.String,com.azure.cosmos.internal.RequestOptions,java.lang.Object[])"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "executeStoredProcedure(String storedProcedureLink, RequestOptions options, Object[] procedureParams)"
  nameWithType: "AsyncDocumentClient.executeStoredProcedure(String storedProcedureLink, RequestOptions options, Object[] procedureParams)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.executeStoredProcedure(String storedProcedureLink, RequestOptions options, Object[] procedureParams)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.executeStoredProcedure*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Executes a stored procedure by the stored procedure link.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the stored procedure response. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<StoredProcedureResponse> executeStoredProcedure(String storedProcedureLink, RequestOptions options, Object[] procedureParams)"
    parameters:
    - id: "storedProcedureLink"
      type: "java.lang.String"
      description: "the stored procedure link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    - id: "procedureParams"
      type: "java.lang.Object[]"
      description: "the array of procedure parameter values."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.StoredProcedureResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the stored procedure response or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.executeStoredProcedure(java.lang.String,java.lang.Object[])"
  id: "executeStoredProcedure(java.lang.String,java.lang.Object[])"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "executeStoredProcedure(String storedProcedureLink, Object[] procedureParams)"
  nameWithType: "AsyncDocumentClient.executeStoredProcedure(String storedProcedureLink, Object[] procedureParams)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.executeStoredProcedure(String storedProcedureLink, Object[] procedureParams)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.executeStoredProcedure*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Executes a stored procedure by the stored procedure link.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the stored procedure response. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<StoredProcedureResponse> executeStoredProcedure(String storedProcedureLink, Object[] procedureParams)"
    parameters:
    - id: "storedProcedureLink"
      type: "java.lang.String"
      description: "the stored procedure link."
    - id: "procedureParams"
      type: "java.lang.Object[]"
      description: "the array of procedure parameter values."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.StoredProcedureResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the stored procedure response or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.getConnectionPolicy()"
  id: "getConnectionPolicy()"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "getConnectionPolicy()"
  nameWithType: "AsyncDocumentClient.getConnectionPolicy()"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.getConnectionPolicy()"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.getConnectionPolicy*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Gets the connection policy"
  syntax:
    content: "public abstract ConnectionPolicy getConnectionPolicy()"
    return:
      type: "com.azure.cosmos.ConnectionPolicy"
      description: "the connection policy"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.getDatabaseAccount()"
  id: "getDatabaseAccount()"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "getDatabaseAccount()"
  nameWithType: "AsyncDocumentClient.getDatabaseAccount()"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.getDatabaseAccount()"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.getDatabaseAccount*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Gets database account information.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the database account. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<DatabaseAccount> getDatabaseAccount()"
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.DatabaseAccount>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the database account or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.getReadEndpoint()"
  id: "getReadEndpoint()"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "getReadEndpoint()"
  nameWithType: "AsyncDocumentClient.getReadEndpoint()"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.getReadEndpoint()"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.getReadEndpoint*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Gets the current read endpoint chosen based on availability and preference."
  syntax:
    content: "public abstract URI getReadEndpoint()"
    return:
      type: "java.net.URI"
      description: "the read endpoint URI"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.getServiceEndpoint()"
  id: "getServiceEndpoint()"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "getServiceEndpoint()"
  nameWithType: "AsyncDocumentClient.getServiceEndpoint()"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.getServiceEndpoint()"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.getServiceEndpoint*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Gets the default service endpoint as passed in by the user during construction."
  syntax:
    content: "public abstract URI getServiceEndpoint()"
    return:
      type: "java.net.URI"
      description: "the service endpoint URI"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.getWriteEndpoint()"
  id: "getWriteEndpoint()"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "getWriteEndpoint()"
  nameWithType: "AsyncDocumentClient.getWriteEndpoint()"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.getWriteEndpoint()"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.getWriteEndpoint*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Gets the current write endpoint chosen based on availability and preference."
  syntax:
    content: "public abstract URI getWriteEndpoint()"
    return:
      type: "java.net.URI"
      description: "the write endpoint URI"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryCollections(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  id: "queryCollections(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryCollections(String databaseLink, SqlQuerySpec querySpec, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryCollections(String databaseLink, SqlQuerySpec querySpec, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryCollections(String databaseLink, SqlQuerySpec querySpec, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryCollections*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for document collections in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response of the obtained collections. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<DocumentCollection>> queryCollections(String databaseLink, SqlQuerySpec querySpec, FeedOptions options)"
    parameters:
    - id: "databaseLink"
      type: "java.lang.String"
      description: "the database link."
    - id: "querySpec"
      type: "com.azure.cosmos.SqlQuerySpec"
      description: "the SQL query specification."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.DocumentCollection>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained collections or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryCollections(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "queryCollections(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryCollections(String databaseLink, String query, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryCollections(String databaseLink, String query, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryCollections(String databaseLink, String query, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryCollections*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for document collections in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response of the obtained collections. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<DocumentCollection>> queryCollections(String databaseLink, String query, FeedOptions options)"
    parameters:
    - id: "databaseLink"
      type: "java.lang.String"
      description: "the database link."
    - id: "query"
      type: "java.lang.String"
      description: "the query."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.DocumentCollection>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained collections or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryConflicts(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  id: "queryConflicts(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryConflicts(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryConflicts(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryConflicts(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryConflicts*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for conflicts.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the obtained conflicts. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Conflict>> queryConflicts(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "querySpec"
      type: "com.azure.cosmos.SqlQuerySpec"
      description: "the SQL query specification."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Conflict>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained conflicts or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryConflicts(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "queryConflicts(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryConflicts(String collectionLink, String query, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryConflicts(String collectionLink, String query, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryConflicts(String collectionLink, String query, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryConflicts*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for conflicts.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the obtained conflicts. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Conflict>> queryConflicts(String collectionLink, String query, FeedOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "query"
      type: "java.lang.String"
      description: "the query."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Conflict>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained conflicts or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryDatabases(com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  id: "queryDatabases(com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryDatabases(SqlQuerySpec querySpec, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryDatabases(SqlQuerySpec querySpec, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryDatabases(SqlQuerySpec querySpec, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryDatabases*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for databases.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response of the obtained databases. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Database>> queryDatabases(SqlQuerySpec querySpec, FeedOptions options)"
    parameters:
    - id: "querySpec"
      type: "com.azure.cosmos.SqlQuerySpec"
      description: "the SQL query specification."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Database>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained databases or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryDatabases(java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "queryDatabases(java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryDatabases(String query, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryDatabases(String query, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryDatabases(String query, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryDatabases*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for databases.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response of the read databases. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Database>> queryDatabases(String query, FeedOptions options)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "the query."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Database>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of read databases or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryDocumentChangeFeed(java.lang.String,com.azure.cosmos.ChangeFeedOptions)"
  id: "queryDocumentChangeFeed(java.lang.String,com.azure.cosmos.ChangeFeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryDocumentChangeFeed(String collectionLink, ChangeFeedOptions changeFeedOptions)"
  nameWithType: "AsyncDocumentClient.queryDocumentChangeFeed(String collectionLink, ChangeFeedOptions changeFeedOptions)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryDocumentChangeFeed(String collectionLink, ChangeFeedOptions changeFeedOptions)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryDocumentChangeFeed*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for documents change feed in a document collection. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the obtained documents. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Document>> queryDocumentChangeFeed(String collectionLink, ChangeFeedOptions changeFeedOptions)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the link to the parent document collection."
    - id: "changeFeedOptions"
      type: "com.azure.cosmos.ChangeFeedOptions"
      description: "the change feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Document>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained documents or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryDocuments(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  id: "queryDocuments(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryDocuments(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryDocuments(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryDocuments(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryDocuments*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for documents in a document collection.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response of the obtained documents. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Document>> queryDocuments(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the link to the parent document collection."
    - id: "querySpec"
      type: "com.azure.cosmos.SqlQuerySpec"
      description: "the SQL query specification."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Document>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained documents or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryDocuments(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "queryDocuments(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryDocuments(String collectionLink, String query, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryDocuments(String collectionLink, String query, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryDocuments(String collectionLink, String query, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryDocuments*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for documents in a document collection.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response of the obtained documents. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Document>> queryDocuments(String collectionLink, String query, FeedOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the link to the parent document collection."
    - id: "query"
      type: "java.lang.String"
      description: "the query."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Document>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained document or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryOffers(com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  id: "queryOffers(com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryOffers(SqlQuerySpec querySpec, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryOffers(SqlQuerySpec querySpec, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryOffers(SqlQuerySpec querySpec, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryOffers*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for offers in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of obtained obtained offers. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Offer>> queryOffers(SqlQuerySpec querySpec, FeedOptions options)"
    parameters:
    - id: "querySpec"
      type: "com.azure.cosmos.SqlQuerySpec"
      description: "the query specification."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Offer>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained offers or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryOffers(java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "queryOffers(java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryOffers(String query, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryOffers(String query, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryOffers(String query, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryOffers*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for offers in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of obtained obtained offers. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Offer>> queryOffers(String query, FeedOptions options)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "the query."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Offer>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained offers or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryPermissions(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  id: "queryPermissions(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryPermissions(String permissionLink, SqlQuerySpec querySpec, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryPermissions(String permissionLink, SqlQuerySpec querySpec, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryPermissions(String permissionLink, SqlQuerySpec querySpec, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryPermissions*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for permissions.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the obtained permissions. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Permission>> queryPermissions(String permissionLink, SqlQuerySpec querySpec, FeedOptions options)"
    parameters:
    - id: "permissionLink"
      type: "java.lang.String"
      description: "the permission link."
    - id: "querySpec"
      type: "com.azure.cosmos.SqlQuerySpec"
      description: "the SQL query specification."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Permission>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained permissions or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryPermissions(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "queryPermissions(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryPermissions(String permissionLink, String query, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryPermissions(String permissionLink, String query, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryPermissions(String permissionLink, String query, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryPermissions*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for permissions.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the obtained permissions. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Permission>> queryPermissions(String permissionLink, String query, FeedOptions options)"
    parameters:
    - id: "permissionLink"
      type: "java.lang.String"
      description: "the permission link."
    - id: "query"
      type: "java.lang.String"
      description: "the query."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Permission>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained permissions or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryStoredProcedures(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  id: "queryStoredProcedures(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryStoredProcedures(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryStoredProcedures(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryStoredProcedures(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryStoredProcedures*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for stored procedures in a document collection.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the obtained stored procedures. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<StoredProcedure>> queryStoredProcedures(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "querySpec"
      type: "com.azure.cosmos.SqlQuerySpec"
      description: "the SQL query specification."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.StoredProcedure>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained stored procedures or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryStoredProcedures(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "queryStoredProcedures(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryStoredProcedures(String collectionLink, String query, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryStoredProcedures(String collectionLink, String query, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryStoredProcedures(String collectionLink, String query, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryStoredProcedures*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for stored procedures in a document collection.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the obtained stored procedures. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<StoredProcedure>> queryStoredProcedures(String collectionLink, String query, FeedOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "query"
      type: "java.lang.String"
      description: "the query."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.StoredProcedure>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained stored procedures or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryTriggers(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  id: "queryTriggers(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryTriggers(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryTriggers(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryTriggers(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryTriggers*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for triggers.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the obtained triggers. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Trigger>> queryTriggers(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "querySpec"
      type: "com.azure.cosmos.SqlQuerySpec"
      description: "the SQL query specification."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Trigger>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained triggers or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryTriggers(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "queryTriggers(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryTriggers(String collectionLink, String query, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryTriggers(String collectionLink, String query, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryTriggers(String collectionLink, String query, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryTriggers*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for triggers.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the obtained triggers. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Trigger>> queryTriggers(String collectionLink, String query, FeedOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "query"
      type: "java.lang.String"
      description: "the query."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Trigger>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained triggers or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryUserDefinedFunctions(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  id: "queryUserDefinedFunctions(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryUserDefinedFunctions(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryUserDefinedFunctions(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryUserDefinedFunctions(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryUserDefinedFunctions*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for user defined functions.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the obtained user defined functions. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<UserDefinedFunction>> queryUserDefinedFunctions(String collectionLink, SqlQuerySpec querySpec, FeedOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "querySpec"
      type: "com.azure.cosmos.SqlQuerySpec"
      description: "the SQL query specification."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.UserDefinedFunction>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained user defined functions or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryUserDefinedFunctions(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "queryUserDefinedFunctions(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryUserDefinedFunctions(String collectionLink, String query, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryUserDefinedFunctions(String collectionLink, String query, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryUserDefinedFunctions(String collectionLink, String query, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryUserDefinedFunctions*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for user defined functions.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the obtained user defined functions. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<UserDefinedFunction>> queryUserDefinedFunctions(String collectionLink, String query, FeedOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "query"
      type: "java.lang.String"
      description: "the query."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.UserDefinedFunction>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained user defined functions or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryUsers(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  id: "queryUsers(java.lang.String,com.azure.cosmos.SqlQuerySpec,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryUsers(String databaseLink, SqlQuerySpec querySpec, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryUsers(String databaseLink, SqlQuerySpec querySpec, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryUsers(String databaseLink, SqlQuerySpec querySpec, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryUsers*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for users.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the obtained users. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<User>> queryUsers(String databaseLink, SqlQuerySpec querySpec, FeedOptions options)"
    parameters:
    - id: "databaseLink"
      type: "java.lang.String"
      description: "the database link."
    - id: "querySpec"
      type: "com.azure.cosmos.SqlQuerySpec"
      description: "the SQL query specification."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.User>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained users or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryUsers(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "queryUsers(java.lang.String,java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "queryUsers(String databaseLink, String query, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.queryUsers(String databaseLink, String query, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryUsers(String databaseLink, String query, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.queryUsers*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Query for users.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the obtained users. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<User>> queryUsers(String databaseLink, String query, FeedOptions options)"
    parameters:
    - id: "databaseLink"
      type: "java.lang.String"
      description: "the database link."
    - id: "query"
      type: "java.lang.String"
      description: "the query."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.User>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained users or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readCollection(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "readCollection(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readCollection(String collectionLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.readCollection(String collectionLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readCollection(String collectionLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readCollection*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads a document collection by the collection link.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the read collection. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<DocumentCollection>> readCollection(String collectionLink, RequestOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.DocumentCollection>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the read collection or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readCollections(java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "readCollections(java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readCollections(String databaseLink, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.readCollections(String databaseLink, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readCollections(String databaseLink, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readCollections*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads all document collections in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response of the read collections. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<DocumentCollection>> readCollections(String databaseLink, FeedOptions options)"
    parameters:
    - id: "databaseLink"
      type: "java.lang.String"
      description: "the database link."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the fee options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.DocumentCollection>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the read collections or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readConflict(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "readConflict(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readConflict(String conflictLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.readConflict(String conflictLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readConflict(String conflictLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readConflict*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads a conflict.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the read conflict. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Conflict>> readConflict(String conflictLink, RequestOptions options)"
    parameters:
    - id: "conflictLink"
      type: "java.lang.String"
      description: "the conflict link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Conflict>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the read conflict or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readConflicts(java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "readConflicts(java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readConflicts(String collectionLink, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.readConflicts(String collectionLink, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readConflicts(String collectionLink, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readConflicts*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads all conflicts in a document collection.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the read conflicts. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Conflict>> readConflicts(String collectionLink, FeedOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Conflict>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the read conflicts or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readDatabase(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "readDatabase(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readDatabase(String databaseLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.readDatabase(String databaseLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readDatabase(String databaseLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readDatabase*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the read database. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Database>> readDatabase(String databaseLink, RequestOptions options)"
    parameters:
    - id: "databaseLink"
      type: "java.lang.String"
      description: "the database link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Database>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the read database or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readDatabases(com.azure.cosmos.FeedOptions)"
  id: "readDatabases(com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readDatabases(FeedOptions options)"
  nameWithType: "AsyncDocumentClient.readDatabases(FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readDatabases(FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readDatabases*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads all databases.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response of the read databases. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Database>> readDatabases(FeedOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Database>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of read databases or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readDocument(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "readDocument(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readDocument(String documentLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.readDocument(String documentLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readDocument(String documentLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readDocument*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads a document by the document link.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the read document. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Document>> readDocument(String documentLink, RequestOptions options)"
    parameters:
    - id: "documentLink"
      type: "java.lang.String"
      description: "the document link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Document>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the read document or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readDocuments(java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "readDocuments(java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readDocuments(String collectionLink, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.readDocuments(String collectionLink, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readDocuments(String collectionLink, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readDocuments*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads all documents in a document collection.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response of the read documents. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Document>> readDocuments(String collectionLink, FeedOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Document>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the read documents or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readOffer(java.lang.String)"
  id: "readOffer(java.lang.String)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readOffer(String offerLink)"
  nameWithType: "AsyncDocumentClient.readOffer(String offerLink)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readOffer(String offerLink)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readOffer*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads an offer.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the read offer. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Offer>> readOffer(String offerLink)"
    parameters:
    - id: "offerLink"
      type: "java.lang.String"
      description: "the offer link."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Offer>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the read offer or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readOffers(com.azure.cosmos.FeedOptions)"
  id: "readOffers(com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readOffers(FeedOptions options)"
  nameWithType: "AsyncDocumentClient.readOffers(FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readOffers(FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readOffers*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads offers.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the read offers. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Offer>> readOffers(FeedOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Offer>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the read offers or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readPartitionKeyRanges(java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "readPartitionKeyRanges(java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readPartitionKeyRanges(String collectionLink, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.readPartitionKeyRanges(String collectionLink, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readPartitionKeyRanges(String collectionLink, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readPartitionKeyRanges*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads all partition key ranges in a document collection. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the obtained partition key ranges. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<PartitionKeyRange>> readPartitionKeyRanges(String collectionLink, FeedOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the link to the parent document collection."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.PartitionKeyRange>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the obtained partition key ranges or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readPermission(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "readPermission(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readPermission(String permissionLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.readPermission(String permissionLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readPermission(String permissionLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readPermission*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads a permission.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the read permission. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Permission>> readPermission(String permissionLink, RequestOptions options)"
    parameters:
    - id: "permissionLink"
      type: "java.lang.String"
      description: "the permission link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Permission>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the read permission or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readPermissions(java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "readPermissions(java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readPermissions(String permissionLink, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.readPermissions(String permissionLink, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readPermissions(String permissionLink, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readPermissions*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads all permissions.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the read permissions. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Permission>> readPermissions(String permissionLink, FeedOptions options)"
    parameters:
    - id: "permissionLink"
      type: "java.lang.String"
      description: "the permission link."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Permission>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the read permissions or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readStoredProcedure(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "readStoredProcedure(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readStoredProcedure(String storedProcedureLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.readStoredProcedure(String storedProcedureLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readStoredProcedure(String storedProcedureLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readStoredProcedure*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "READ a stored procedure by the stored procedure link.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the read stored procedure. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<StoredProcedure>> readStoredProcedure(String storedProcedureLink, RequestOptions options)"
    parameters:
    - id: "storedProcedureLink"
      type: "java.lang.String"
      description: "the stored procedure link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.StoredProcedure>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the read stored procedure or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readStoredProcedures(java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "readStoredProcedures(java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readStoredProcedures(String collectionLink, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.readStoredProcedures(String collectionLink, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readStoredProcedures(String collectionLink, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readStoredProcedures*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads all stored procedures in a document collection link.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the read stored procedures. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<StoredProcedure>> readStoredProcedures(String collectionLink, FeedOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.StoredProcedure>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the read stored procedures or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readTrigger(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "readTrigger(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readTrigger(String triggerLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.readTrigger(String triggerLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readTrigger(String triggerLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readTrigger*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads a trigger by the trigger link.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response for the read trigger. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Trigger>> readTrigger(String triggerLink, RequestOptions options)"
    parameters:
    - id: "triggerLink"
      type: "java.lang.String"
      description: "the trigger link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Trigger>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response for the read trigger or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readTriggers(java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "readTriggers(java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readTriggers(String collectionLink, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.readTriggers(String collectionLink, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readTriggers(String collectionLink, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readTriggers*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads all triggers in a document collection.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the read triggers. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<Trigger>> readTriggers(String collectionLink, FeedOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Trigger>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the read triggers or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readUser(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "readUser(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readUser(String userLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.readUser(String userLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readUser(String userLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readUser*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads a user.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the read user. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<User>> readUser(String userLink, RequestOptions options)"
    parameters:
    - id: "userLink"
      type: "java.lang.String"
      description: "the user link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.User>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the read user or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readUserDefinedFunction(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  id: "readUserDefinedFunction(java.lang.String,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readUserDefinedFunction(String udfLink, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.readUserDefinedFunction(String udfLink, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readUserDefinedFunction(String udfLink, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readUserDefinedFunction*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "READ a user defined function.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response for the read user defined function. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<UserDefinedFunction>> readUserDefinedFunction(String udfLink, RequestOptions options)"
    parameters:
    - id: "udfLink"
      type: "java.lang.String"
      description: "the user defined function link."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.UserDefinedFunction>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response for the read user defined function or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readUserDefinedFunctions(java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "readUserDefinedFunctions(java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readUserDefinedFunctions(String collectionLink, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.readUserDefinedFunctions(String collectionLink, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readUserDefinedFunctions(String collectionLink, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readUserDefinedFunctions*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads all user defined functions in a document collection.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the read user defined functions. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<UserDefinedFunction>> readUserDefinedFunctions(String collectionLink, FeedOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.UserDefinedFunction>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the read user defined functions or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readUsers(java.lang.String,com.azure.cosmos.FeedOptions)"
  id: "readUsers(java.lang.String,com.azure.cosmos.FeedOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "readUsers(String databaseLink, FeedOptions options)"
  nameWithType: "AsyncDocumentClient.readUsers(String databaseLink, FeedOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readUsers(String databaseLink, FeedOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.readUsers*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Reads all users in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will contain one or several feed response pages of the read users. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<FeedResponse<User>> readUsers(String databaseLink, FeedOptions options)"
    parameters:
    - id: "databaseLink"
      type: "java.lang.String"
      description: "the database link."
    - id: "options"
      type: "com.azure.cosmos.FeedOptions"
      description: "the feed options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.User>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing one or several feed response pages of the read users or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.replaceCollection(com.azure.cosmos.internal.DocumentCollection,com.azure.cosmos.internal.RequestOptions)"
  id: "replaceCollection(com.azure.cosmos.internal.DocumentCollection,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "replaceCollection(DocumentCollection collection, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.replaceCollection(DocumentCollection collection, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.replaceCollection(DocumentCollection collection, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.replaceCollection*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Replaces a document collection.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the replaced document collection. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<DocumentCollection>> replaceCollection(DocumentCollection collection, RequestOptions options)"
    parameters:
    - id: "collection"
      type: "com.azure.cosmos.internal.DocumentCollection"
      description: "the document collection to use."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.DocumentCollection>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the replaced document collection or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.replaceDocument(com.azure.cosmos.internal.Document,com.azure.cosmos.internal.RequestOptions)"
  id: "replaceDocument(com.azure.cosmos.internal.Document,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "replaceDocument(Document document, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.replaceDocument(Document document, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.replaceDocument(Document document, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.replaceDocument*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Replaces a document with the passed in document.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the replaced document. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Document>> replaceDocument(Document document, RequestOptions options)"
    parameters:
    - id: "document"
      type: "com.azure.cosmos.internal.Document"
      description: "the document to replace (containing the document id)."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Document>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the replaced document or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.replaceDocument(java.lang.String,java.lang.Object,com.azure.cosmos.internal.RequestOptions)"
  id: "replaceDocument(java.lang.String,java.lang.Object,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "replaceDocument(String documentLink, Object document, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.replaceDocument(String documentLink, Object document, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.replaceDocument(String documentLink, Object document, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.replaceDocument*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Replaces a document using a POJO object.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the replaced document. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Document>> replaceDocument(String documentLink, Object document, RequestOptions options)"
    parameters:
    - id: "documentLink"
      type: "java.lang.String"
      description: "the document link."
    - id: "document"
      type: "java.lang.Object"
      description: "the document represented as a POJO or Document object."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Document>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the replaced document or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.replaceOffer(com.azure.cosmos.internal.Offer)"
  id: "replaceOffer(com.azure.cosmos.internal.Offer)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "replaceOffer(Offer offer)"
  nameWithType: "AsyncDocumentClient.replaceOffer(Offer offer)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.replaceOffer(Offer offer)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.replaceOffer*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Replaces an offer.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the replaced offer. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Offer>> replaceOffer(Offer offer)"
    parameters:
    - id: "offer"
      type: "com.azure.cosmos.internal.Offer"
      description: "the offer to use."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Offer>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the replaced offer or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.replacePermission(com.azure.cosmos.internal.Permission,com.azure.cosmos.internal.RequestOptions)"
  id: "replacePermission(com.azure.cosmos.internal.Permission,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "replacePermission(Permission permission, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.replacePermission(Permission permission, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.replacePermission(Permission permission, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.replacePermission*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Replaces a permission.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the replaced permission. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Permission>> replacePermission(Permission permission, RequestOptions options)"
    parameters:
    - id: "permission"
      type: "com.azure.cosmos.internal.Permission"
      description: "the permission to use."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Permission>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the replaced permission or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.replaceStoredProcedure(com.azure.cosmos.internal.StoredProcedure,com.azure.cosmos.internal.RequestOptions)"
  id: "replaceStoredProcedure(com.azure.cosmos.internal.StoredProcedure,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "replaceStoredProcedure(StoredProcedure storedProcedure, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.replaceStoredProcedure(StoredProcedure storedProcedure, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.replaceStoredProcedure(StoredProcedure storedProcedure, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.replaceStoredProcedure*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Replaces a stored procedure.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the replaced stored procedure. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<StoredProcedure>> replaceStoredProcedure(StoredProcedure storedProcedure, RequestOptions options)"
    parameters:
    - id: "storedProcedure"
      type: "com.azure.cosmos.internal.StoredProcedure"
      description: "the stored procedure to use."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.StoredProcedure>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the replaced stored procedure or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.replaceTrigger(com.azure.cosmos.internal.Trigger,com.azure.cosmos.internal.RequestOptions)"
  id: "replaceTrigger(com.azure.cosmos.internal.Trigger,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "replaceTrigger(Trigger trigger, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.replaceTrigger(Trigger trigger, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.replaceTrigger(Trigger trigger, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.replaceTrigger*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Replaces a trigger.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the replaced trigger. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Trigger>> replaceTrigger(Trigger trigger, RequestOptions options)"
    parameters:
    - id: "trigger"
      type: "com.azure.cosmos.internal.Trigger"
      description: "the trigger to use."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Trigger>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the replaced trigger or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.replaceUser(com.azure.cosmos.internal.User,com.azure.cosmos.internal.RequestOptions)"
  id: "replaceUser(com.azure.cosmos.internal.User,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "replaceUser(User user, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.replaceUser(User user, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.replaceUser(User user, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.replaceUser*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Replaces a user.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the replaced user. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<User>> replaceUser(User user, RequestOptions options)"
    parameters:
    - id: "user"
      type: "com.azure.cosmos.internal.User"
      description: "the user to use."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.User>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the replaced user or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.replaceUserDefinedFunction(com.azure.cosmos.internal.UserDefinedFunction,com.azure.cosmos.internal.RequestOptions)"
  id: "replaceUserDefinedFunction(com.azure.cosmos.internal.UserDefinedFunction,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "replaceUserDefinedFunction(UserDefinedFunction udf, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.replaceUserDefinedFunction(UserDefinedFunction udf, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.replaceUserDefinedFunction(UserDefinedFunction udf, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.replaceUserDefinedFunction*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Replaces a user defined function.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the replaced user defined function. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<UserDefinedFunction>> replaceUserDefinedFunction(UserDefinedFunction udf, RequestOptions options)"
    parameters:
    - id: "udf"
      type: "com.azure.cosmos.internal.UserDefinedFunction"
      description: "the user defined function."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.UserDefinedFunction>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the replaced user defined function or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.upsertDocument(java.lang.String,java.lang.Object,com.azure.cosmos.internal.RequestOptions,boolean)"
  id: "upsertDocument(java.lang.String,java.lang.Object,com.azure.cosmos.internal.RequestOptions,boolean)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "upsertDocument(String collectionLink, Object document, RequestOptions options, boolean disableAutomaticIdGeneration)"
  nameWithType: "AsyncDocumentClient.upsertDocument(String collectionLink, Object document, RequestOptions options, boolean disableAutomaticIdGeneration)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.upsertDocument(String collectionLink, Object document, RequestOptions options, boolean disableAutomaticIdGeneration)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.upsertDocument*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Upserts a document.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the upserted document. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Document>> upsertDocument(String collectionLink, Object document, RequestOptions options, boolean disableAutomaticIdGeneration)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the link to the parent document collection."
    - id: "document"
      type: "java.lang.Object"
      description: "the document represented as a POJO or Document object to upsert."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    - id: "disableAutomaticIdGeneration"
      type: "boolean"
      description: "the flag for disabling automatic id generation."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Document>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the upserted document or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.upsertPermission(java.lang.String,com.azure.cosmos.internal.Permission,com.azure.cosmos.internal.RequestOptions)"
  id: "upsertPermission(java.lang.String,com.azure.cosmos.internal.Permission,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "upsertPermission(String userLink, Permission permission, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.upsertPermission(String userLink, Permission permission, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.upsertPermission(String userLink, Permission permission, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.upsertPermission*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Upserts a permission.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the upserted permission. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Permission>> upsertPermission(String userLink, Permission permission, RequestOptions options)"
    parameters:
    - id: "userLink"
      type: "java.lang.String"
      description: "the user link."
    - id: "permission"
      type: "com.azure.cosmos.internal.Permission"
      description: "the permission to upsert."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Permission>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the upserted permission or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.upsertStoredProcedure(java.lang.String,com.azure.cosmos.internal.StoredProcedure,com.azure.cosmos.internal.RequestOptions)"
  id: "upsertStoredProcedure(java.lang.String,com.azure.cosmos.internal.StoredProcedure,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "upsertStoredProcedure(String collectionLink, StoredProcedure storedProcedure, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.upsertStoredProcedure(String collectionLink, StoredProcedure storedProcedure, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.upsertStoredProcedure(String collectionLink, StoredProcedure storedProcedure, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.upsertStoredProcedure*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Upserts a stored procedure.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the upserted stored procedure. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<StoredProcedure>> upsertStoredProcedure(String collectionLink, StoredProcedure storedProcedure, RequestOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "storedProcedure"
      type: "com.azure.cosmos.internal.StoredProcedure"
      description: "the stored procedure to upsert."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.StoredProcedure>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the upserted stored procedure or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.upsertTrigger(java.lang.String,com.azure.cosmos.internal.Trigger,com.azure.cosmos.internal.RequestOptions)"
  id: "upsertTrigger(java.lang.String,com.azure.cosmos.internal.Trigger,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "upsertTrigger(String collectionLink, Trigger trigger, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.upsertTrigger(String collectionLink, Trigger trigger, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.upsertTrigger(String collectionLink, Trigger trigger, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.upsertTrigger*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Upserts a trigger.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the upserted trigger. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<Trigger>> upsertTrigger(String collectionLink, Trigger trigger, RequestOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "trigger"
      type: "com.azure.cosmos.internal.Trigger"
      description: "the trigger to upsert."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Trigger>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the upserted trigger or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.upsertUser(java.lang.String,com.azure.cosmos.internal.User,com.azure.cosmos.internal.RequestOptions)"
  id: "upsertUser(java.lang.String,com.azure.cosmos.internal.User,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "upsertUser(String databaseLink, User user, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.upsertUser(String databaseLink, User user, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.upsertUser(String databaseLink, User user, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.upsertUser*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Upserts a user.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the upserted user. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<User>> upsertUser(String databaseLink, User user, RequestOptions options)"
    parameters:
    - id: "databaseLink"
      type: "java.lang.String"
      description: "the database link."
    - id: "user"
      type: "com.azure.cosmos.internal.User"
      description: "the user to upsert."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.User>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the upserted user or an error."
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.upsertUserDefinedFunction(java.lang.String,com.azure.cosmos.internal.UserDefinedFunction,com.azure.cosmos.internal.RequestOptions)"
  id: "upsertUserDefinedFunction(java.lang.String,com.azure.cosmos.internal.UserDefinedFunction,com.azure.cosmos.internal.RequestOptions)"
  parent: "com.azure.cosmos.internal.AsyncDocumentClient"
  langs:
  - "java"
  name: "upsertUserDefinedFunction(String collectionLink, UserDefinedFunction udf, RequestOptions options)"
  nameWithType: "AsyncDocumentClient.upsertUserDefinedFunction(String collectionLink, UserDefinedFunction udf, RequestOptions options)"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.upsertUserDefinedFunction(String collectionLink, UserDefinedFunction udf, RequestOptions options)"
  overload: "com.azure.cosmos.internal.AsyncDocumentClient.upsertUserDefinedFunction*"
  type: "Method"
  package: "com.azure.cosmos.internal"
  summary: "Upserts a user defined function.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> upon successful completion will contain a single resource response with the upserted user defined function. In case of failure the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will error."
  syntax:
    content: "public abstract Flux<ResourceResponse<UserDefinedFunction>> upsertUserDefinedFunction(String collectionLink, UserDefinedFunction udf, RequestOptions options)"
    parameters:
    - id: "collectionLink"
      type: "java.lang.String"
      description: "the collection link."
    - id: "udf"
      type: "com.azure.cosmos.internal.UserDefinedFunction"
      description: "the user defined function to upsert."
    - id: "options"
      type: "com.azure.cosmos.internal.RequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.UserDefinedFunction>>"
      description: "an <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> containing the single resource response with the upserted user defined function or an error."
references:
- uid: "java.net.URI"
  spec.java:
  - uid: "java.net.URI"
    name: "URI"
    fullName: "java.net.URI"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.getServiceEndpoint*"
  name: "getServiceEndpoint"
  nameWithType: "AsyncDocumentClient.getServiceEndpoint"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.getServiceEndpoint"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.getWriteEndpoint*"
  name: "getWriteEndpoint"
  nameWithType: "AsyncDocumentClient.getWriteEndpoint"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.getWriteEndpoint"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.getReadEndpoint*"
  name: "getReadEndpoint"
  nameWithType: "AsyncDocumentClient.getReadEndpoint"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.getReadEndpoint"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.ConnectionPolicy"
  name: "ConnectionPolicy"
  nameWithType: "ConnectionPolicy"
  fullName: "com.azure.cosmos.ConnectionPolicy"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.getConnectionPolicy*"
  name: "getConnectionPolicy"
  nameWithType: "AsyncDocumentClient.getConnectionPolicy"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.getConnectionPolicy"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.Database"
  name: "Database"
  nameWithType: "Database"
  fullName: "com.azure.cosmos.internal.Database"
- uid: "com.azure.cosmos.internal.RequestOptions"
  name: "RequestOptions"
  nameWithType: "RequestOptions"
  fullName: "com.azure.cosmos.internal.RequestOptions"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Database>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.ResourceResponse"
    name: "ResourceResponse"
    fullName: "com.azure.cosmos.internal.ResourceResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.Database"
    name: "Database"
    fullName: "com.azure.cosmos.internal.Database"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.createDatabase*"
  name: "createDatabase"
  nameWithType: "AsyncDocumentClient.createDatabase"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.createDatabase"
  package: "com.azure.cosmos.internal"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deleteDatabase*"
  name: "deleteDatabase"
  nameWithType: "AsyncDocumentClient.deleteDatabase"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deleteDatabase"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readDatabase*"
  name: "readDatabase"
  nameWithType: "AsyncDocumentClient.readDatabase"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readDatabase"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.FeedOptions"
  name: "FeedOptions"
  nameWithType: "FeedOptions"
  fullName: "com.azure.cosmos.FeedOptions"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Database>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.FeedResponse"
    name: "FeedResponse"
    fullName: "com.azure.cosmos.FeedResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.Database"
    name: "Database"
    fullName: "com.azure.cosmos.internal.Database"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readDatabases*"
  name: "readDatabases"
  nameWithType: "AsyncDocumentClient.readDatabases"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readDatabases"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryDatabases*"
  name: "queryDatabases"
  nameWithType: "AsyncDocumentClient.queryDatabases"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryDatabases"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.SqlQuerySpec"
  name: "SqlQuerySpec"
  nameWithType: "SqlQuerySpec"
  fullName: "com.azure.cosmos.SqlQuerySpec"
- uid: "com.azure.cosmos.internal.DocumentCollection"
  name: "DocumentCollection"
  nameWithType: "DocumentCollection"
  fullName: "com.azure.cosmos.internal.DocumentCollection"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.DocumentCollection>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.ResourceResponse"
    name: "ResourceResponse"
    fullName: "com.azure.cosmos.internal.ResourceResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.DocumentCollection"
    name: "DocumentCollection"
    fullName: "com.azure.cosmos.internal.DocumentCollection"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.createCollection*"
  name: "createCollection"
  nameWithType: "AsyncDocumentClient.createCollection"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.createCollection"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.replaceCollection*"
  name: "replaceCollection"
  nameWithType: "AsyncDocumentClient.replaceCollection"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.replaceCollection"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deleteCollection*"
  name: "deleteCollection"
  nameWithType: "AsyncDocumentClient.deleteCollection"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deleteCollection"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readCollection*"
  name: "readCollection"
  nameWithType: "AsyncDocumentClient.readCollection"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readCollection"
  package: "com.azure.cosmos.internal"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.DocumentCollection>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.FeedResponse"
    name: "FeedResponse"
    fullName: "com.azure.cosmos.FeedResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.DocumentCollection"
    name: "DocumentCollection"
    fullName: "com.azure.cosmos.internal.DocumentCollection"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readCollections*"
  name: "readCollections"
  nameWithType: "AsyncDocumentClient.readCollections"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readCollections"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryCollections*"
  name: "queryCollections"
  nameWithType: "AsyncDocumentClient.queryCollections"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryCollections"
  package: "com.azure.cosmos.internal"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Document>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.ResourceResponse"
    name: "ResourceResponse"
    fullName: "com.azure.cosmos.internal.ResourceResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.Document"
    name: "Document"
    fullName: "com.azure.cosmos.internal.Document"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.createDocument*"
  name: "createDocument"
  nameWithType: "AsyncDocumentClient.createDocument"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.createDocument"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.upsertDocument*"
  name: "upsertDocument"
  nameWithType: "AsyncDocumentClient.upsertDocument"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.upsertDocument"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.replaceDocument*"
  name: "replaceDocument"
  nameWithType: "AsyncDocumentClient.replaceDocument"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.replaceDocument"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.Document"
  name: "Document"
  nameWithType: "Document"
  fullName: "com.azure.cosmos.internal.Document"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deleteDocument*"
  name: "deleteDocument"
  nameWithType: "AsyncDocumentClient.deleteDocument"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deleteDocument"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readDocument*"
  name: "readDocument"
  nameWithType: "AsyncDocumentClient.readDocument"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readDocument"
  package: "com.azure.cosmos.internal"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Document>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.FeedResponse"
    name: "FeedResponse"
    fullName: "com.azure.cosmos.FeedResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.Document"
    name: "Document"
    fullName: "com.azure.cosmos.internal.Document"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readDocuments*"
  name: "readDocuments"
  nameWithType: "AsyncDocumentClient.readDocuments"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readDocuments"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryDocuments*"
  name: "queryDocuments"
  nameWithType: "AsyncDocumentClient.queryDocuments"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryDocuments"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.ChangeFeedOptions"
  name: "ChangeFeedOptions"
  nameWithType: "ChangeFeedOptions"
  fullName: "com.azure.cosmos.ChangeFeedOptions"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryDocumentChangeFeed*"
  name: "queryDocumentChangeFeed"
  nameWithType: "AsyncDocumentClient.queryDocumentChangeFeed"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryDocumentChangeFeed"
  package: "com.azure.cosmos.internal"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.PartitionKeyRange>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.FeedResponse"
    name: "FeedResponse"
    fullName: "com.azure.cosmos.FeedResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.PartitionKeyRange"
    name: "PartitionKeyRange"
    fullName: "com.azure.cosmos.internal.PartitionKeyRange"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readPartitionKeyRanges*"
  name: "readPartitionKeyRanges"
  nameWithType: "AsyncDocumentClient.readPartitionKeyRanges"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readPartitionKeyRanges"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.StoredProcedure"
  name: "StoredProcedure"
  nameWithType: "StoredProcedure"
  fullName: "com.azure.cosmos.internal.StoredProcedure"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.StoredProcedure>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.ResourceResponse"
    name: "ResourceResponse"
    fullName: "com.azure.cosmos.internal.ResourceResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.StoredProcedure"
    name: "StoredProcedure"
    fullName: "com.azure.cosmos.internal.StoredProcedure"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.createStoredProcedure*"
  name: "createStoredProcedure"
  nameWithType: "AsyncDocumentClient.createStoredProcedure"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.createStoredProcedure"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.upsertStoredProcedure*"
  name: "upsertStoredProcedure"
  nameWithType: "AsyncDocumentClient.upsertStoredProcedure"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.upsertStoredProcedure"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.replaceStoredProcedure*"
  name: "replaceStoredProcedure"
  nameWithType: "AsyncDocumentClient.replaceStoredProcedure"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.replaceStoredProcedure"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deleteStoredProcedure*"
  name: "deleteStoredProcedure"
  nameWithType: "AsyncDocumentClient.deleteStoredProcedure"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deleteStoredProcedure"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readStoredProcedure*"
  name: "readStoredProcedure"
  nameWithType: "AsyncDocumentClient.readStoredProcedure"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readStoredProcedure"
  package: "com.azure.cosmos.internal"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.StoredProcedure>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.FeedResponse"
    name: "FeedResponse"
    fullName: "com.azure.cosmos.FeedResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.StoredProcedure"
    name: "StoredProcedure"
    fullName: "com.azure.cosmos.internal.StoredProcedure"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readStoredProcedures*"
  name: "readStoredProcedures"
  nameWithType: "AsyncDocumentClient.readStoredProcedures"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readStoredProcedures"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryStoredProcedures*"
  name: "queryStoredProcedures"
  nameWithType: "AsyncDocumentClient.queryStoredProcedures"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryStoredProcedures"
  package: "com.azure.cosmos.internal"
- uid: "java.lang.Object[]"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
  - name: "[]"
    fullName: "[]"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.internal.StoredProcedureResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.StoredProcedureResponse"
    name: "StoredProcedureResponse"
    fullName: "com.azure.cosmos.internal.StoredProcedureResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.executeStoredProcedure*"
  name: "executeStoredProcedure"
  nameWithType: "AsyncDocumentClient.executeStoredProcedure"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.executeStoredProcedure"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.Trigger"
  name: "Trigger"
  nameWithType: "Trigger"
  fullName: "com.azure.cosmos.internal.Trigger"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Trigger>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.ResourceResponse"
    name: "ResourceResponse"
    fullName: "com.azure.cosmos.internal.ResourceResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.Trigger"
    name: "Trigger"
    fullName: "com.azure.cosmos.internal.Trigger"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.createTrigger*"
  name: "createTrigger"
  nameWithType: "AsyncDocumentClient.createTrigger"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.createTrigger"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.upsertTrigger*"
  name: "upsertTrigger"
  nameWithType: "AsyncDocumentClient.upsertTrigger"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.upsertTrigger"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.replaceTrigger*"
  name: "replaceTrigger"
  nameWithType: "AsyncDocumentClient.replaceTrigger"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.replaceTrigger"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deleteTrigger*"
  name: "deleteTrigger"
  nameWithType: "AsyncDocumentClient.deleteTrigger"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deleteTrigger"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readTrigger*"
  name: "readTrigger"
  nameWithType: "AsyncDocumentClient.readTrigger"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readTrigger"
  package: "com.azure.cosmos.internal"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Trigger>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.FeedResponse"
    name: "FeedResponse"
    fullName: "com.azure.cosmos.FeedResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.Trigger"
    name: "Trigger"
    fullName: "com.azure.cosmos.internal.Trigger"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readTriggers*"
  name: "readTriggers"
  nameWithType: "AsyncDocumentClient.readTriggers"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readTriggers"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryTriggers*"
  name: "queryTriggers"
  nameWithType: "AsyncDocumentClient.queryTriggers"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryTriggers"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.UserDefinedFunction"
  name: "UserDefinedFunction"
  nameWithType: "UserDefinedFunction"
  fullName: "com.azure.cosmos.internal.UserDefinedFunction"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.UserDefinedFunction>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.ResourceResponse"
    name: "ResourceResponse"
    fullName: "com.azure.cosmos.internal.ResourceResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.UserDefinedFunction"
    name: "UserDefinedFunction"
    fullName: "com.azure.cosmos.internal.UserDefinedFunction"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.createUserDefinedFunction*"
  name: "createUserDefinedFunction"
  nameWithType: "AsyncDocumentClient.createUserDefinedFunction"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.createUserDefinedFunction"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.upsertUserDefinedFunction*"
  name: "upsertUserDefinedFunction"
  nameWithType: "AsyncDocumentClient.upsertUserDefinedFunction"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.upsertUserDefinedFunction"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.replaceUserDefinedFunction*"
  name: "replaceUserDefinedFunction"
  nameWithType: "AsyncDocumentClient.replaceUserDefinedFunction"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.replaceUserDefinedFunction"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deleteUserDefinedFunction*"
  name: "deleteUserDefinedFunction"
  nameWithType: "AsyncDocumentClient.deleteUserDefinedFunction"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deleteUserDefinedFunction"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readUserDefinedFunction*"
  name: "readUserDefinedFunction"
  nameWithType: "AsyncDocumentClient.readUserDefinedFunction"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readUserDefinedFunction"
  package: "com.azure.cosmos.internal"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.UserDefinedFunction>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.FeedResponse"
    name: "FeedResponse"
    fullName: "com.azure.cosmos.FeedResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.UserDefinedFunction"
    name: "UserDefinedFunction"
    fullName: "com.azure.cosmos.internal.UserDefinedFunction"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readUserDefinedFunctions*"
  name: "readUserDefinedFunctions"
  nameWithType: "AsyncDocumentClient.readUserDefinedFunctions"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readUserDefinedFunctions"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryUserDefinedFunctions*"
  name: "queryUserDefinedFunctions"
  nameWithType: "AsyncDocumentClient.queryUserDefinedFunctions"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryUserDefinedFunctions"
  package: "com.azure.cosmos.internal"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Conflict>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.ResourceResponse"
    name: "ResourceResponse"
    fullName: "com.azure.cosmos.internal.ResourceResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.Conflict"
    name: "Conflict"
    fullName: "com.azure.cosmos.internal.Conflict"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readConflict*"
  name: "readConflict"
  nameWithType: "AsyncDocumentClient.readConflict"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readConflict"
  package: "com.azure.cosmos.internal"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Conflict>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.FeedResponse"
    name: "FeedResponse"
    fullName: "com.azure.cosmos.FeedResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.Conflict"
    name: "Conflict"
    fullName: "com.azure.cosmos.internal.Conflict"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readConflicts*"
  name: "readConflicts"
  nameWithType: "AsyncDocumentClient.readConflicts"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readConflicts"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryConflicts*"
  name: "queryConflicts"
  nameWithType: "AsyncDocumentClient.queryConflicts"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryConflicts"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deleteConflict*"
  name: "deleteConflict"
  nameWithType: "AsyncDocumentClient.deleteConflict"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deleteConflict"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.User"
  name: "User"
  nameWithType: "User"
  fullName: "com.azure.cosmos.internal.User"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.User>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.ResourceResponse"
    name: "ResourceResponse"
    fullName: "com.azure.cosmos.internal.ResourceResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.User"
    name: "User"
    fullName: "com.azure.cosmos.internal.User"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.createUser*"
  name: "createUser"
  nameWithType: "AsyncDocumentClient.createUser"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.createUser"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.upsertUser*"
  name: "upsertUser"
  nameWithType: "AsyncDocumentClient.upsertUser"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.upsertUser"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.replaceUser*"
  name: "replaceUser"
  nameWithType: "AsyncDocumentClient.replaceUser"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.replaceUser"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deleteUser*"
  name: "deleteUser"
  nameWithType: "AsyncDocumentClient.deleteUser"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deleteUser"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readUser*"
  name: "readUser"
  nameWithType: "AsyncDocumentClient.readUser"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readUser"
  package: "com.azure.cosmos.internal"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.User>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.FeedResponse"
    name: "FeedResponse"
    fullName: "com.azure.cosmos.FeedResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.User"
    name: "User"
    fullName: "com.azure.cosmos.internal.User"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readUsers*"
  name: "readUsers"
  nameWithType: "AsyncDocumentClient.readUsers"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readUsers"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryUsers*"
  name: "queryUsers"
  nameWithType: "AsyncDocumentClient.queryUsers"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryUsers"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.Permission"
  name: "Permission"
  nameWithType: "Permission"
  fullName: "com.azure.cosmos.internal.Permission"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Permission>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.ResourceResponse"
    name: "ResourceResponse"
    fullName: "com.azure.cosmos.internal.ResourceResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.Permission"
    name: "Permission"
    fullName: "com.azure.cosmos.internal.Permission"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.createPermission*"
  name: "createPermission"
  nameWithType: "AsyncDocumentClient.createPermission"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.createPermission"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.upsertPermission*"
  name: "upsertPermission"
  nameWithType: "AsyncDocumentClient.upsertPermission"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.upsertPermission"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.replacePermission*"
  name: "replacePermission"
  nameWithType: "AsyncDocumentClient.replacePermission"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.replacePermission"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.deletePermission*"
  name: "deletePermission"
  nameWithType: "AsyncDocumentClient.deletePermission"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.deletePermission"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readPermission*"
  name: "readPermission"
  nameWithType: "AsyncDocumentClient.readPermission"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readPermission"
  package: "com.azure.cosmos.internal"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Permission>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.FeedResponse"
    name: "FeedResponse"
    fullName: "com.azure.cosmos.FeedResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.Permission"
    name: "Permission"
    fullName: "com.azure.cosmos.internal.Permission"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readPermissions*"
  name: "readPermissions"
  nameWithType: "AsyncDocumentClient.readPermissions"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readPermissions"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryPermissions*"
  name: "queryPermissions"
  nameWithType: "AsyncDocumentClient.queryPermissions"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryPermissions"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.Offer"
  name: "Offer"
  nameWithType: "Offer"
  fullName: "com.azure.cosmos.internal.Offer"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.internal.ResourceResponse<com.azure.cosmos.internal.Offer>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.ResourceResponse"
    name: "ResourceResponse"
    fullName: "com.azure.cosmos.internal.ResourceResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.Offer"
    name: "Offer"
    fullName: "com.azure.cosmos.internal.Offer"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.replaceOffer*"
  name: "replaceOffer"
  nameWithType: "AsyncDocumentClient.replaceOffer"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.replaceOffer"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readOffer*"
  name: "readOffer"
  nameWithType: "AsyncDocumentClient.readOffer"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readOffer"
  package: "com.azure.cosmos.internal"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.FeedResponse<com.azure.cosmos.internal.Offer>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.FeedResponse"
    name: "FeedResponse"
    fullName: "com.azure.cosmos.FeedResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.internal.Offer"
    name: "Offer"
    fullName: "com.azure.cosmos.internal.Offer"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.readOffers*"
  name: "readOffers"
  nameWithType: "AsyncDocumentClient.readOffers"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.readOffers"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.queryOffers*"
  name: "queryOffers"
  nameWithType: "AsyncDocumentClient.queryOffers"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.queryOffers"
  package: "com.azure.cosmos.internal"
- uid: "reactor.core.publisher.Flux<com.azure.cosmos.DatabaseAccount>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.DatabaseAccount"
    name: "DatabaseAccount"
    fullName: "com.azure.cosmos.DatabaseAccount"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.getDatabaseAccount*"
  name: "getDatabaseAccount"
  nameWithType: "AsyncDocumentClient.getDatabaseAccount"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.getDatabaseAccount"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.close*"
  name: "close"
  nameWithType: "AsyncDocumentClient.close"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.close"
  package: "com.azure.cosmos.internal"
- uid: "com.azure.cosmos.internal.AsyncDocumentClient.Builder"
  name: "AsyncDocumentClient.Builder"
  nameWithType: "AsyncDocumentClient.Builder"
  fullName: "com.azure.cosmos.internal.AsyncDocumentClient.Builder"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "com.azure.cosmos.internal.ResourceResponse"
  name: "ResourceResponse"
  nameWithType: "ResourceResponse"
  fullName: "com.azure.cosmos.internal.ResourceResponse"
- uid: "com.azure.cosmos.FeedResponse"
  name: "FeedResponse"
  nameWithType: "FeedResponse"
  fullName: "com.azure.cosmos.FeedResponse"
- uid: "com.azure.cosmos.internal.PartitionKeyRange"
  name: "PartitionKeyRange"
  nameWithType: "PartitionKeyRange"
  fullName: "com.azure.cosmos.internal.PartitionKeyRange"
- uid: "com.azure.cosmos.internal.StoredProcedureResponse"
  name: "StoredProcedureResponse"
  nameWithType: "StoredProcedureResponse"
  fullName: "com.azure.cosmos.internal.StoredProcedureResponse"
- uid: "com.azure.cosmos.internal.Conflict"
  name: "Conflict"
  nameWithType: "Conflict"
  fullName: "com.azure.cosmos.internal.Conflict"
- uid: "com.azure.cosmos.DatabaseAccount"
  name: "DatabaseAccount"
  nameWithType: "DatabaseAccount"
  fullName: "com.azure.cosmos.DatabaseAccount"
