### YamlMime:ManagedReference
items:
- uid: "com.azure.messaging.eventhubs.models.InitializationContext"
  id: "InitializationContext"
  parent: "com.azure.messaging.eventhubs.models"
  children:
  - "com.azure.messaging.eventhubs.models.InitializationContext.InitializationContext(com.azure.messaging.eventhubs.models.PartitionContext,com.azure.messaging.eventhubs.models.EventPosition)"
  - "com.azure.messaging.eventhubs.models.InitializationContext.getInitialPosition()"
  - "com.azure.messaging.eventhubs.models.InitializationContext.getPartitionContext()"
  - "com.azure.messaging.eventhubs.models.InitializationContext.setInitialPosition(com.azure.messaging.eventhubs.models.EventPosition)"
  langs:
  - "java"
  name: "InitializationContext"
  nameWithType: "InitializationContext"
  fullName: "com.azure.messaging.eventhubs.models.InitializationContext"
  type: "Class"
  package: "com.azure.messaging.eventhubs.models"
  summary: "The initialization context that is supplied to <xref uid=\"\" data-throw-if-not-resolved=\"false\">initializePartition</xref> before the <xref uid=\"com.azure.messaging.eventhubs.EventProcessor\" data-throw-if-not-resolved=\"false\">EventProcessor</xref> instance begins processing events from a partition."
  syntax:
    content: "public class InitializationContext"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.messaging.eventhubs.models.InitializationContext.InitializationContext(com.azure.messaging.eventhubs.models.PartitionContext,com.azure.messaging.eventhubs.models.EventPosition)"
  id: "InitializationContext(com.azure.messaging.eventhubs.models.PartitionContext,com.azure.messaging.eventhubs.models.EventPosition)"
  parent: "com.azure.messaging.eventhubs.models.InitializationContext"
  langs:
  - "java"
  name: "InitializationContext(PartitionContext partitionContext, EventPosition initialPosition)"
  nameWithType: "InitializationContext.InitializationContext(PartitionContext partitionContext, EventPosition initialPosition)"
  fullName: "com.azure.messaging.eventhubs.models.InitializationContext.InitializationContext(PartitionContext partitionContext, EventPosition initialPosition)"
  overload: "com.azure.messaging.eventhubs.models.InitializationContext.InitializationContext*"
  type: "Constructor"
  package: "com.azure.messaging.eventhubs.models"
  summary: "Creates an instance of InitializationContext for the partition provided in the <xref uid=\"com.azure.messaging.eventhubs.models.PartitionContext\" data-throw-if-not-resolved=\"false\">PartitionContext</xref>."
  syntax:
    content: "public InitializationContext(PartitionContext partitionContext, EventPosition initialPosition)"
    parameters:
    - id: "partitionContext"
      type: "com.azure.messaging.eventhubs.models.PartitionContext"
      description: "The partition information for which the event processing is going to start."
    - id: "initialPosition"
      type: "com.azure.messaging.eventhubs.models.EventPosition"
      description: "The default initial event position from which the processing will start in the absence of\n a checkpoint in <xref uid=\"com.azure.messaging.eventhubs.EventProcessorStore\" data-throw-if-not-resolved=\"false\">EventProcessorStore</xref>."
- uid: "com.azure.messaging.eventhubs.models.InitializationContext.getInitialPosition()"
  id: "getInitialPosition()"
  parent: "com.azure.messaging.eventhubs.models.InitializationContext"
  langs:
  - "java"
  name: "getInitialPosition()"
  nameWithType: "InitializationContext.getInitialPosition()"
  fullName: "com.azure.messaging.eventhubs.models.InitializationContext.getInitialPosition()"
  overload: "com.azure.messaging.eventhubs.models.InitializationContext.getInitialPosition*"
  type: "Method"
  package: "com.azure.messaging.eventhubs.models"
  summary: "Returns the default initial event position from which the processing will start in the absence of a checkpoint in <xref uid=\"com.azure.messaging.eventhubs.EventProcessorStore\" data-throw-if-not-resolved=\"false\">EventProcessorStore</xref>."
  syntax:
    content: "public EventPosition getInitialPosition()"
    return:
      type: "com.azure.messaging.eventhubs.models.EventPosition"
      description: "The default initial event position from which the processing will start in the absence of a checkpoint in\n <xref uid=\"com.azure.messaging.eventhubs.EventProcessorStore\" data-throw-if-not-resolved=\"false\">EventProcessorStore</xref>."
- uid: "com.azure.messaging.eventhubs.models.InitializationContext.getPartitionContext()"
  id: "getPartitionContext()"
  parent: "com.azure.messaging.eventhubs.models.InitializationContext"
  langs:
  - "java"
  name: "getPartitionContext()"
  nameWithType: "InitializationContext.getPartitionContext()"
  fullName: "com.azure.messaging.eventhubs.models.InitializationContext.getPartitionContext()"
  overload: "com.azure.messaging.eventhubs.models.InitializationContext.getPartitionContext*"
  type: "Method"
  package: "com.azure.messaging.eventhubs.models"
  summary: "Returns the partition information for which the event processing is going to start."
  syntax:
    content: "public PartitionContext getPartitionContext()"
    return:
      type: "com.azure.messaging.eventhubs.models.PartitionContext"
      description: "The partition information for which the event processing is going to start."
- uid: "com.azure.messaging.eventhubs.models.InitializationContext.setInitialPosition(com.azure.messaging.eventhubs.models.EventPosition)"
  id: "setInitialPosition(com.azure.messaging.eventhubs.models.EventPosition)"
  parent: "com.azure.messaging.eventhubs.models.InitializationContext"
  langs:
  - "java"
  name: "setInitialPosition(EventPosition initialPosition)"
  nameWithType: "InitializationContext.setInitialPosition(EventPosition initialPosition)"
  fullName: "com.azure.messaging.eventhubs.models.InitializationContext.setInitialPosition(EventPosition initialPosition)"
  overload: "com.azure.messaging.eventhubs.models.InitializationContext.setInitialPosition*"
  type: "Method"
  package: "com.azure.messaging.eventhubs.models"
  summary: "If a different initial position is desirable for this partition, setting the initial position will start the event processing from this position. Note that the checkpoint in <xref uid=\"com.azure.messaging.eventhubs.EventProcessorStore\" data-throw-if-not-resolved=\"false\">EventProcessorStore</xref> is given the highest priority and if there's a checkpoint in the store, that will be used regardless of what is set in this method."
  syntax:
    content: "public void setInitialPosition(EventPosition initialPosition)"
    parameters:
    - id: "initialPosition"
      type: "com.azure.messaging.eventhubs.models.EventPosition"
      description: "The initial event position to start the event processing from."
references:
- uid: "com.azure.messaging.eventhubs.models.PartitionContext"
  name: "PartitionContext"
  nameWithType: "PartitionContext"
  fullName: "com.azure.messaging.eventhubs.models.PartitionContext"
- uid: "com.azure.messaging.eventhubs.models.EventPosition"
  name: "EventPosition"
  nameWithType: "EventPosition"
  fullName: "com.azure.messaging.eventhubs.models.EventPosition"
- uid: "com.azure.messaging.eventhubs.models.InitializationContext.InitializationContext*"
  name: "InitializationContext"
  nameWithType: "InitializationContext.InitializationContext"
  fullName: "com.azure.messaging.eventhubs.models.InitializationContext.InitializationContext"
  package: "com.azure.messaging.eventhubs.models"
- uid: "com.azure.messaging.eventhubs.models.InitializationContext.getPartitionContext*"
  name: "getPartitionContext"
  nameWithType: "InitializationContext.getPartitionContext"
  fullName: "com.azure.messaging.eventhubs.models.InitializationContext.getPartitionContext"
  package: "com.azure.messaging.eventhubs.models"
- uid: "com.azure.messaging.eventhubs.models.InitializationContext.getInitialPosition*"
  name: "getInitialPosition"
  nameWithType: "InitializationContext.getInitialPosition"
  fullName: "com.azure.messaging.eventhubs.models.InitializationContext.getInitialPosition"
  package: "com.azure.messaging.eventhubs.models"
- uid: "com.azure.messaging.eventhubs.models.InitializationContext.setInitialPosition*"
  name: "setInitialPosition"
  nameWithType: "InitializationContext.setInitialPosition"
  fullName: "com.azure.messaging.eventhubs.models.InitializationContext.setInitialPosition"
  package: "com.azure.messaging.eventhubs.models"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
