### YamlMime:ManagedReference
items:
- uid: "com.azure.messaging.eventhubs.EventHubConnection"
  id: "EventHubConnection"
  parent: "com.azure.messaging.eventhubs"
  children:
  - "com.azure.messaging.eventhubs.EventHubConnection.EventHubConnection(reactor.core.publisher.Mono<com.azure.messaging.eventhubs.implementation.EventHubAmqpConnection>,com.azure.core.amqp.implementation.ConnectionOptions)"
  - "com.azure.messaging.eventhubs.EventHubConnection.close()"
  - "com.azure.messaging.eventhubs.EventHubConnection.createReceiveLink(java.lang.String,java.lang.String,com.azure.messaging.eventhubs.models.EventPosition,com.azure.messaging.eventhubs.models.EventHubConsumerOptions)"
  - "com.azure.messaging.eventhubs.EventHubConnection.createSendLink(java.lang.String,java.lang.String,com.azure.core.amqp.RetryOptions)"
  - "com.azure.messaging.eventhubs.EventHubConnection.getEventHubName()"
  - "com.azure.messaging.eventhubs.EventHubConnection.getFullyQualifiedDomainName()"
  - "com.azure.messaging.eventhubs.EventHubConnection.getManagementNode()"
  - "com.azure.messaging.eventhubs.EventHubConnection.getRetryOptions()"
  langs:
  - "java"
  name: "EventHubConnection"
  nameWithType: "EventHubConnection"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection"
  type: "Class"
  package: "com.azure.messaging.eventhubs"
  summary: "Class that manages the connection to Azure Event Hubs."
  syntax:
    content: "public class EventHubConnection implements Closeable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Closeable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.messaging.eventhubs.EventHubConnection.EventHubConnection(reactor.core.publisher.Mono<com.azure.messaging.eventhubs.implementation.EventHubAmqpConnection>,com.azure.core.amqp.implementation.ConnectionOptions)"
  id: "EventHubConnection(reactor.core.publisher.Mono<com.azure.messaging.eventhubs.implementation.EventHubAmqpConnection>,com.azure.core.amqp.implementation.ConnectionOptions)"
  parent: "com.azure.messaging.eventhubs.EventHubConnection"
  langs:
  - "java"
  name: "EventHubConnection(Mono<EventHubAmqpConnection> createConnectionMono, ConnectionOptions connectionOptions)"
  nameWithType: "EventHubConnection.EventHubConnection(Mono<EventHubAmqpConnection> createConnectionMono, ConnectionOptions connectionOptions)"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection.EventHubConnection(Mono<EventHubAmqpConnection> createConnectionMono, ConnectionOptions connectionOptions)"
  overload: "com.azure.messaging.eventhubs.EventHubConnection.EventHubConnection*"
  type: "Constructor"
  package: "com.azure.messaging.eventhubs"
  summary: "Creates a new instance of <xref uid=\"com.azure.messaging.eventhubs.EventHubConnection\" data-throw-if-not-resolved=\"false\">EventHubConnection</xref>."
  syntax:
    content: " EventHubConnection(Mono<EventHubAmqpConnection> createConnectionMono, ConnectionOptions connectionOptions)"
    parameters:
    - id: "createConnectionMono"
      type: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.implementation.EventHubAmqpConnection>"
    - id: "connectionOptions"
      type: "com.azure.core.amqp.implementation.ConnectionOptions"
- uid: "com.azure.messaging.eventhubs.EventHubConnection.close()"
  id: "close()"
  parent: "com.azure.messaging.eventhubs.EventHubConnection"
  langs:
  - "java"
  name: "close()"
  nameWithType: "EventHubConnection.close()"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection.close()"
  overload: "com.azure.messaging.eventhubs.EventHubConnection.close*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Disposes of the Event Hub connection."
  syntax:
    content: "public void close()"
- uid: "com.azure.messaging.eventhubs.EventHubConnection.createReceiveLink(java.lang.String,java.lang.String,com.azure.messaging.eventhubs.models.EventPosition,com.azure.messaging.eventhubs.models.EventHubConsumerOptions)"
  id: "createReceiveLink(java.lang.String,java.lang.String,com.azure.messaging.eventhubs.models.EventPosition,com.azure.messaging.eventhubs.models.EventHubConsumerOptions)"
  parent: "com.azure.messaging.eventhubs.EventHubConnection"
  langs:
  - "java"
  name: "createReceiveLink(String linkName, String entityPath, EventPosition eventPosition, EventHubConsumerOptions options)"
  nameWithType: "EventHubConnection.createReceiveLink(String linkName, String entityPath, EventPosition eventPosition, EventHubConsumerOptions options)"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection.createReceiveLink(String linkName, String entityPath, EventPosition eventPosition, EventHubConsumerOptions options)"
  overload: "com.azure.messaging.eventhubs.EventHubConnection.createReceiveLink*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Creates or gets an existing receive link. The same link is returned if there is an existing receive link with the same `linkName`. Otherwise, a new link is created and returned."
  syntax:
    content: " Mono<AmqpReceiveLink> createReceiveLink(String linkName, String entityPath, EventPosition eventPosition, EventHubConsumerOptions options)"
    parameters:
    - id: "linkName"
      type: "java.lang.String"
      description: "The name of the link."
    - id: "entityPath"
      type: "java.lang.String"
      description: "The remote address to connect to for the message broker."
    - id: "eventPosition"
      type: "com.azure.messaging.eventhubs.models.EventPosition"
      description: "Position to set the receive link to."
    - id: "options"
      type: "com.azure.messaging.eventhubs.models.EventHubConsumerOptions"
      description: "Consumer options to use when creating the link."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.amqp.implementation.AmqpReceiveLink>"
      description: "A new or existing receive link that is connected to the given <code>entityPath</code>."
- uid: "com.azure.messaging.eventhubs.EventHubConnection.createSendLink(java.lang.String,java.lang.String,com.azure.core.amqp.RetryOptions)"
  id: "createSendLink(java.lang.String,java.lang.String,com.azure.core.amqp.RetryOptions)"
  parent: "com.azure.messaging.eventhubs.EventHubConnection"
  langs:
  - "java"
  name: "createSendLink(String linkName, String entityPath, RetryOptions retryOptions)"
  nameWithType: "EventHubConnection.createSendLink(String linkName, String entityPath, RetryOptions retryOptions)"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection.createSendLink(String linkName, String entityPath, RetryOptions retryOptions)"
  overload: "com.azure.messaging.eventhubs.EventHubConnection.createSendLink*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Creates or gets a send link. The same link is returned if there is an existing send link with the same `linkName`. Otherwise, a new link is created and returned."
  syntax:
    content: " Mono<AmqpSendLink> createSendLink(String linkName, String entityPath, RetryOptions retryOptions)"
    parameters:
    - id: "linkName"
      type: "java.lang.String"
      description: "The name of the link."
    - id: "entityPath"
      type: "java.lang.String"
      description: "The remote address to connect to for the message broker."
    - id: "retryOptions"
      type: "com.azure.core.amqp.RetryOptions"
      description: "Options to use when creating the link."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.amqp.implementation.AmqpSendLink>"
      description: "A new or existing send link that is connected to the given <code>entityPath</code>."
- uid: "com.azure.messaging.eventhubs.EventHubConnection.getEventHubName()"
  id: "getEventHubName()"
  parent: "com.azure.messaging.eventhubs.EventHubConnection"
  langs:
  - "java"
  name: "getEventHubName()"
  nameWithType: "EventHubConnection.getEventHubName()"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection.getEventHubName()"
  overload: "com.azure.messaging.eventhubs.EventHubConnection.getEventHubName*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  syntax:
    content: " String getEventHubName()"
    return:
      type: "java.lang.String"
- uid: "com.azure.messaging.eventhubs.EventHubConnection.getFullyQualifiedDomainName()"
  id: "getFullyQualifiedDomainName()"
  parent: "com.azure.messaging.eventhubs.EventHubConnection"
  langs:
  - "java"
  name: "getFullyQualifiedDomainName()"
  nameWithType: "EventHubConnection.getFullyQualifiedDomainName()"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection.getFullyQualifiedDomainName()"
  overload: "com.azure.messaging.eventhubs.EventHubConnection.getFullyQualifiedDomainName*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  syntax:
    content: " String getFullyQualifiedDomainName()"
    return:
      type: "java.lang.String"
- uid: "com.azure.messaging.eventhubs.EventHubConnection.getManagementNode()"
  id: "getManagementNode()"
  parent: "com.azure.messaging.eventhubs.EventHubConnection"
  langs:
  - "java"
  name: "getManagementNode()"
  nameWithType: "EventHubConnection.getManagementNode()"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection.getManagementNode()"
  overload: "com.azure.messaging.eventhubs.EventHubConnection.getManagementNode*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Gets the Event Hub management node."
  syntax:
    content: " Mono<EventHubManagementNode> getManagementNode()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.implementation.EventHubManagementNode>"
      description: "The Event Hub management node."
- uid: "com.azure.messaging.eventhubs.EventHubConnection.getRetryOptions()"
  id: "getRetryOptions()"
  parent: "com.azure.messaging.eventhubs.EventHubConnection"
  langs:
  - "java"
  name: "getRetryOptions()"
  nameWithType: "EventHubConnection.getRetryOptions()"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection.getRetryOptions()"
  overload: "com.azure.messaging.eventhubs.EventHubConnection.getRetryOptions*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  syntax:
    content: " RetryOptions getRetryOptions()"
    return:
      type: "com.azure.core.amqp.RetryOptions"
references:
- uid: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.implementation.EventHubAmqpConnection>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.eventhubs.implementation.EventHubAmqpConnection"
    name: "EventHubAmqpConnection"
    fullName: "com.azure.messaging.eventhubs.implementation.EventHubAmqpConnection"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.amqp.implementation.ConnectionOptions"
  spec.java:
  - uid: "com.azure.core.amqp.implementation.ConnectionOptions"
    name: "ConnectionOptions"
    fullName: "com.azure.core.amqp.implementation.ConnectionOptions"
- uid: "com.azure.messaging.eventhubs.EventHubConnection.EventHubConnection*"
  name: "EventHubConnection"
  nameWithType: "EventHubConnection.EventHubConnection"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection.EventHubConnection"
  package: "com.azure.messaging.eventhubs"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.messaging.eventhubs.EventHubConnection.getFullyQualifiedDomainName*"
  name: "getFullyQualifiedDomainName"
  nameWithType: "EventHubConnection.getFullyQualifiedDomainName"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection.getFullyQualifiedDomainName"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.EventHubConnection.getEventHubName*"
  name: "getEventHubName"
  nameWithType: "EventHubConnection.getEventHubName"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection.getEventHubName"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.core.amqp.RetryOptions"
  spec.java:
  - uid: "com.azure.core.amqp.RetryOptions"
    name: "RetryOptions"
    fullName: "com.azure.core.amqp.RetryOptions"
- uid: "com.azure.messaging.eventhubs.EventHubConnection.getRetryOptions*"
  name: "getRetryOptions"
  nameWithType: "EventHubConnection.getRetryOptions"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection.getRetryOptions"
  package: "com.azure.messaging.eventhubs"
- uid: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.implementation.EventHubManagementNode>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.eventhubs.implementation.EventHubManagementNode"
    name: "EventHubManagementNode"
    fullName: "com.azure.messaging.eventhubs.implementation.EventHubManagementNode"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubConnection.getManagementNode*"
  name: "getManagementNode"
  nameWithType: "EventHubConnection.getManagementNode"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection.getManagementNode"
  package: "com.azure.messaging.eventhubs"
- uid: "reactor.core.publisher.Mono<com.azure.core.amqp.implementation.AmqpSendLink>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.amqp.implementation.AmqpSendLink"
    name: "AmqpSendLink"
    fullName: "com.azure.core.amqp.implementation.AmqpSendLink"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubConnection.createSendLink*"
  name: "createSendLink"
  nameWithType: "EventHubConnection.createSendLink"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection.createSendLink"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.models.EventPosition"
  name: "EventPosition"
  nameWithType: "EventPosition"
  fullName: "com.azure.messaging.eventhubs.models.EventPosition"
- uid: "com.azure.messaging.eventhubs.models.EventHubConsumerOptions"
  name: "EventHubConsumerOptions"
  nameWithType: "EventHubConsumerOptions"
  fullName: "com.azure.messaging.eventhubs.models.EventHubConsumerOptions"
- uid: "reactor.core.publisher.Mono<com.azure.core.amqp.implementation.AmqpReceiveLink>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.amqp.implementation.AmqpReceiveLink"
    name: "AmqpReceiveLink"
    fullName: "com.azure.core.amqp.implementation.AmqpReceiveLink"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubConnection.createReceiveLink*"
  name: "createReceiveLink"
  nameWithType: "EventHubConnection.createReceiveLink"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection.createReceiveLink"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.EventHubConnection.close*"
  name: "close"
  nameWithType: "EventHubConnection.close"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection.close"
  package: "com.azure.messaging.eventhubs"
- uid: "java.io.Closeable"
  name: "Closeable"
  nameWithType: "Closeable"
  fullName: "java.io.Closeable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.messaging.eventhubs.implementation.EventHubAmqpConnection"
  name: "EventHubAmqpConnection"
  nameWithType: "EventHubAmqpConnection"
  fullName: "com.azure.messaging.eventhubs.implementation.EventHubAmqpConnection"
- uid: "com.azure.messaging.eventhubs.implementation.EventHubManagementNode"
  name: "EventHubManagementNode"
  nameWithType: "EventHubManagementNode"
  fullName: "com.azure.messaging.eventhubs.implementation.EventHubManagementNode"
- uid: "com.azure.core.amqp.implementation.AmqpSendLink"
  name: "AmqpSendLink"
  nameWithType: "AmqpSendLink"
  fullName: "com.azure.core.amqp.implementation.AmqpSendLink"
- uid: "com.azure.core.amqp.implementation.AmqpReceiveLink"
  name: "AmqpReceiveLink"
  nameWithType: "AmqpReceiveLink"
  fullName: "com.azure.core.amqp.implementation.AmqpReceiveLink"
