### YamlMime:ManagedReference
items:
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  id: "EventHubProducerAsyncClient"
  parent: "com.azure.messaging.eventhubs"
  children:
  - "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.EventHubProducerAsyncClient(java.lang.String,java.lang.String,com.azure.messaging.eventhubs.EventHubConnection,com.azure.core.amqp.RetryOptions,com.azure.core.amqp.implementation.TracerProvider,com.azure.core.amqp.implementation.MessageSerializer,boolean)"
  - "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.close()"
  - "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch()"
  - "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch(com.azure.messaging.eventhubs.models.BatchOptions)"
  - "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubName()"
  - "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getFullyQualifiedNamespace()"
  - "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionIds()"
  - "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionProperties(java.lang.String)"
  - "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getProperties()"
  - "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(com.azure.messaging.eventhubs.EventData)"
  - "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(com.azure.messaging.eventhubs.EventData,com.azure.messaging.eventhubs.models.SendOptions)"
  - "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(com.azure.messaging.eventhubs.EventDataBatch)"
  - "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(java.lang.Iterable<com.azure.messaging.eventhubs.EventData>)"
  - "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(java.lang.Iterable<com.azure.messaging.eventhubs.EventData>,com.azure.messaging.eventhubs.models.SendOptions)"
  - "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(reactor.core.publisher.Flux<com.azure.messaging.eventhubs.EventData>)"
  - "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(reactor.core.publisher.Flux<com.azure.messaging.eventhubs.EventData>,com.azure.messaging.eventhubs.models.SendOptions)"
  langs:
  - "java"
  name: "EventHubProducerAsyncClient"
  nameWithType: "EventHubProducerAsyncClient"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  type: "Class"
  package: "com.azure.messaging.eventhubs"
  summary: "A producer responsible for transmitting <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> to a specific Event Hub, grouped together in batches. Depending on the options specified at creation, the producer may be created to allow event data to be automatically routed to an available partition or specific to a partition.\n\nAllowing automatic routing of partitions is recommended when:\n\n *  The sending of events needs to be highly available.\n *  The event data should be evenly distributed among all available partitions.\n\nIf no partition is specified, the following rules are used for automatically selecting one:\n\n1.  Distribute the events equally amongst all available partitions using a round-robin approach.\n2.  If a partition becomes unavailable, the Event Hubs service will automatically detect it and forward the message to another available partition.\n\n**Create a producer that routes events to any partition**\n\nTo allow automatic routing of messages to available partition, do not specify the <xref uid=\"com.azure.messaging.eventhubs.models.BatchOptions.getPartitionId()\" data-throw-if-not-resolved=\"false\">partitionId</xref> when creating the <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubProducerAsyncClient</xref>. \\{@codesnippet com.azure.messaging.eventhubs.eventhubasyncproducerclient.instantiation\\}\n\n**Create a producer that publishes events to partition \"foo\" with a timeout of 45 seconds.**\n\nDevelopers can push events to a single partition by specifying the <xref uid=\"com.azure.messaging.eventhubs.models.BatchOptions.setPartitionId(java.lang.String)\" data-throw-if-not-resolved=\"false\">partitionId</xref> when creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubProducerAsyncClient</xref>. \\{@codesnippet com.azure.messaging.eventhubs.eventhubasyncproducerclient.instantiation\\#partitionId\\}\n\n**Publish events to the same partition, grouped together using <xref uid=\"com.azure.messaging.eventhubs.models.SendOptions.setPartitionKey(java.lang.String)\" data-throw-if-not-resolved=\"false\">SendOptions#setPartitionKey(String)</xref> .**\n\nIf developers want to push similar events to end up at the same partition, but do not require them to go to a specific partition, they can use <xref uid=\"com.azure.messaging.eventhubs.models.SendOptions.setPartitionKey(java.lang.String)\" data-throw-if-not-resolved=\"false\">SendOptions#setPartitionKey(String)</xref>.\n\nIn the sample below, all the \"sandwiches\" end up in the same partition, but it could end up in partition 0, 1, etc. of the available partitions. All that matters to the end user is that they are grouped together.\n\n\\{@codesnippet com.azure.messaging.eventhubs.eventhubasyncproducerclient.send\\#publisher-sendOptions\\}\n\n**Publish events using an <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\">EventDataBatch</xref>.**\n\nDevelopers can create an <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\">EventDataBatch</xref>, add the events they want into it, and publish these events together. When creating a <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\">batch</xref>, developers can specify a set of <xref uid=\"com.azure.messaging.eventhubs.models.BatchOptions\" data-throw-if-not-resolved=\"false\">options</xref> to configure this batch.\n\nIn the scenario below, the developer is creating a networked video game. They want to receive telemetry about their users' gaming systems, but do not want to slow down the network with telemetry. So they limit the size of their <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\">batches</xref> to be no larger than 256 bytes. The events within the batch also get hashed to the same partition because they all share the same <xref uid=\"com.azure.messaging.eventhubs.models.BatchOptions.getPartitionKey()\" data-throw-if-not-resolved=\"false\">BatchOptions#getPartitionKey()</xref>.\n\n\\{@codesnippet com.azure.messaging.eventhubs.eventhubasyncproducerclient.send\\#eventDataBatch\\}"
  syntax:
    content: "public class EventHubProducerAsyncClient implements Closeable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Closeable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.EventHubProducerAsyncClient(java.lang.String,java.lang.String,com.azure.messaging.eventhubs.EventHubConnection,com.azure.core.amqp.RetryOptions,com.azure.core.amqp.implementation.TracerProvider,com.azure.core.amqp.implementation.MessageSerializer,boolean)"
  id: "EventHubProducerAsyncClient(java.lang.String,java.lang.String,com.azure.messaging.eventhubs.EventHubConnection,com.azure.core.amqp.RetryOptions,com.azure.core.amqp.implementation.TracerProvider,com.azure.core.amqp.implementation.MessageSerializer,boolean)"
  parent: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  langs:
  - "java"
  name: "EventHubProducerAsyncClient(String fullyQualifiedNamespace, String eventHubName, EventHubConnection connection, RetryOptions retryOptions, TracerProvider tracerProvider, MessageSerializer messageSerializer, boolean isSharedConnection)"
  nameWithType: "EventHubProducerAsyncClient.EventHubProducerAsyncClient(String fullyQualifiedNamespace, String eventHubName, EventHubConnection connection, RetryOptions retryOptions, TracerProvider tracerProvider, MessageSerializer messageSerializer, boolean isSharedConnection)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.EventHubProducerAsyncClient(String fullyQualifiedNamespace, String eventHubName, EventHubConnection connection, RetryOptions retryOptions, TracerProvider tracerProvider, MessageSerializer messageSerializer, boolean isSharedConnection)"
  overload: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.EventHubProducerAsyncClient*"
  type: "Constructor"
  package: "com.azure.messaging.eventhubs"
  summary: "Creates a new instance of this <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubProducerAsyncClient</xref> that can send messages to a single partition when <xref uid=\"com.azure.messaging.eventhubs.models.BatchOptions.getPartitionId()\" data-throw-if-not-resolved=\"false\">BatchOptions#getPartitionId()</xref> is not null or an empty string. Otherwise, allows the service to load balance the messages amongst available partitions."
  syntax:
    content: " EventHubProducerAsyncClient(String fullyQualifiedNamespace, String eventHubName, EventHubConnection connection, RetryOptions retryOptions, TracerProvider tracerProvider, MessageSerializer messageSerializer, boolean isSharedConnection)"
    parameters:
    - id: "fullyQualifiedNamespace"
      type: "java.lang.String"
    - id: "eventHubName"
      type: "java.lang.String"
    - id: "connection"
      type: "com.azure.messaging.eventhubs.EventHubConnection"
    - id: "retryOptions"
      type: "com.azure.core.amqp.RetryOptions"
    - id: "tracerProvider"
      type: "com.azure.core.amqp.implementation.TracerProvider"
    - id: "messageSerializer"
      type: "com.azure.core.amqp.implementation.MessageSerializer"
    - id: "isSharedConnection"
      type: "boolean"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.close()"
  id: "close()"
  parent: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  langs:
  - "java"
  name: "close()"
  nameWithType: "EventHubProducerAsyncClient.close()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.close()"
  overload: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.close*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Disposes of the <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubProducerAsyncClient</xref> by closing the underlying connection to the service."
  syntax:
    content: "public void close()"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch()"
  id: "createBatch()"
  parent: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  langs:
  - "java"
  name: "createBatch()"
  nameWithType: "EventHubProducerAsyncClient.createBatch()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch()"
  overload: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Creates an <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\">EventDataBatch</xref> that can fit as many events as the transport allows."
  syntax:
    content: "public Mono<EventDataBatch> createBatch()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.EventDataBatch>"
      description: "A new <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\">EventDataBatch</xref> that can fit as many events as the transport allows."
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch(com.azure.messaging.eventhubs.models.BatchOptions)"
  id: "createBatch(com.azure.messaging.eventhubs.models.BatchOptions)"
  parent: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  langs:
  - "java"
  name: "createBatch(BatchOptions options)"
  nameWithType: "EventHubProducerAsyncClient.createBatch(BatchOptions options)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch(BatchOptions options)"
  overload: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Creates an <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\">EventDataBatch</xref> that can fit as many events as the transport allows."
  syntax:
    content: "public Mono<EventDataBatch> createBatch(BatchOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.messaging.eventhubs.models.BatchOptions"
      description: "A set of options used to configure the <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\">EventDataBatch</xref>."
    return:
      type: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.EventDataBatch>"
      description: "A new <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\">EventDataBatch</xref> that can fit as many events as the transport allows."
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubName()"
  id: "getEventHubName()"
  parent: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  langs:
  - "java"
  name: "getEventHubName()"
  nameWithType: "EventHubProducerAsyncClient.getEventHubName()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubName()"
  overload: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubName*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Gets the Event Hub name this client interacts with."
  syntax:
    content: "public String getEventHubName()"
    return:
      type: "java.lang.String"
      description: "The Event Hub name this client interacts with."
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getFullyQualifiedNamespace()"
  id: "getFullyQualifiedNamespace()"
  parent: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  langs:
  - "java"
  name: "getFullyQualifiedNamespace()"
  nameWithType: "EventHubProducerAsyncClient.getFullyQualifiedNamespace()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getFullyQualifiedNamespace()"
  overload: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getFullyQualifiedNamespace*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Gets the fully qualified Event Hubs namespace that the connection is associated with. This is likely similar to `{yournamespace}.servicebus.windows.net`."
  syntax:
    content: "public String getFullyQualifiedNamespace()"
    return:
      type: "java.lang.String"
      description: "The fully qualified Event Hubs namespace that the connection is associated with"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionIds()"
  id: "getPartitionIds()"
  parent: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  langs:
  - "java"
  name: "getPartitionIds()"
  nameWithType: "EventHubProducerAsyncClient.getPartitionIds()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionIds()"
  overload: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionIds*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Retrieves the identifiers for the partitions of an Event Hub."
  syntax:
    content: "public Flux<String> getPartitionIds()"
    return:
      type: "reactor.core.publisher.Flux<java.lang.String>"
      description: "A Flux of identifiers for the partitions of an Event Hub."
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionProperties(java.lang.String)"
  id: "getPartitionProperties(java.lang.String)"
  parent: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  langs:
  - "java"
  name: "getPartitionProperties(String partitionId)"
  nameWithType: "EventHubProducerAsyncClient.getPartitionProperties(String partitionId)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionProperties(String partitionId)"
  overload: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionProperties*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Retrieves information about a specific partition for an Event Hub, including elements that describe the available events in the partition event stream."
  syntax:
    content: "public Mono<PartitionProperties> getPartitionProperties(String partitionId)"
    parameters:
    - id: "partitionId"
      type: "java.lang.String"
      description: "The unique identifier of a partition associated with the Event Hub."
    return:
      type: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.PartitionProperties>"
      description: "The set of information for the requested partition under the Event Hub this client is associated with."
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getProperties()"
  id: "getProperties()"
  parent: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  langs:
  - "java"
  name: "getProperties()"
  nameWithType: "EventHubProducerAsyncClient.getProperties()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getProperties()"
  overload: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getProperties*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Retrieves information about an Event Hub, including the number of partitions present and their identifiers."
  syntax:
    content: "public Mono<EventHubProperties> getProperties()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.EventHubProperties>"
      description: "The set of information for the Event Hub that this client is associated with."
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(com.azure.messaging.eventhubs.EventData)"
  id: "send(com.azure.messaging.eventhubs.EventData)"
  parent: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  langs:
  - "java"
  name: "send(EventData event)"
  nameWithType: "EventHubProducerAsyncClient.send(EventData event)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(EventData event)"
  overload: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Sends a single event to the associated Event Hub. If the size of the single event exceeds the maximum size allowed, an exception will be triggered and the send will fail.\n\nFor more information regarding the maximum event size allowed, see [Azure Event Hubs Quotas and Limits][].\n\n\n[Azure Event Hubs Quotas and Limits]: https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-quotas"
  syntax:
    content: "public Mono<Void> send(EventData event)"
    parameters:
    - id: "event"
      type: "com.azure.messaging.eventhubs.EventData"
      description: "Event to send to the service."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> that completes when the event is pushed to the service."
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(com.azure.messaging.eventhubs.EventData,com.azure.messaging.eventhubs.models.SendOptions)"
  id: "send(com.azure.messaging.eventhubs.EventData,com.azure.messaging.eventhubs.models.SendOptions)"
  parent: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  langs:
  - "java"
  name: "send(EventData event, SendOptions options)"
  nameWithType: "EventHubProducerAsyncClient.send(EventData event, SendOptions options)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(EventData event, SendOptions options)"
  overload: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Sends a single event to the associated Event Hub with the send options. If the size of the single event exceeds the maximum size allowed, an exception will be triggered and the send will fail.\n\nFor more information regarding the maximum event size allowed, see [Azure Event Hubs Quotas and Limits][].\n\n\n[Azure Event Hubs Quotas and Limits]: https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-quotas"
  syntax:
    content: "public Mono<Void> send(EventData event, SendOptions options)"
    parameters:
    - id: "event"
      type: "com.azure.messaging.eventhubs.EventData"
      description: "Event to send to the service."
    - id: "options"
      type: "com.azure.messaging.eventhubs.models.SendOptions"
      description: "The set of options to consider when sending this event."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> that completes when the event is pushed to the service."
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(com.azure.messaging.eventhubs.EventDataBatch)"
  id: "send(com.azure.messaging.eventhubs.EventDataBatch)"
  parent: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  langs:
  - "java"
  name: "send(EventDataBatch batch)"
  nameWithType: "EventHubProducerAsyncClient.send(EventDataBatch batch)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(EventDataBatch batch)"
  overload: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Sends the batch to the associated Event Hub."
  syntax:
    content: "public Mono<Void> send(EventDataBatch batch)"
    parameters:
    - id: "batch"
      type: "com.azure.messaging.eventhubs.EventDataBatch"
      description: "The batch to send to the service."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> that completes when the batch is pushed to the service."
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(java.lang.Iterable<com.azure.messaging.eventhubs.EventData>)"
  id: "send(java.lang.Iterable<com.azure.messaging.eventhubs.EventData>)"
  parent: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  langs:
  - "java"
  name: "send(Iterable<EventData> events)"
  nameWithType: "EventHubProducerAsyncClient.send(Iterable<EventData> events)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(Iterable<EventData> events)"
  overload: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Sends a set of events to the associated Event Hub using a batched approach. If the size of events exceed the maximum size of a single batch, an exception will be triggered and the send will fail. By default, the message size is the max amount allowed on the link."
  syntax:
    content: "public Mono<Void> send(Iterable<EventData> events)"
    parameters:
    - id: "events"
      type: "java.lang.Iterable<com.azure.messaging.eventhubs.EventData>"
      description: "Events to send to the service."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> that completes when all events are pushed to the service."
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(java.lang.Iterable<com.azure.messaging.eventhubs.EventData>,com.azure.messaging.eventhubs.models.SendOptions)"
  id: "send(java.lang.Iterable<com.azure.messaging.eventhubs.EventData>,com.azure.messaging.eventhubs.models.SendOptions)"
  parent: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  langs:
  - "java"
  name: "send(Iterable<EventData> events, SendOptions options)"
  nameWithType: "EventHubProducerAsyncClient.send(Iterable<EventData> events, SendOptions options)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(Iterable<EventData> events, SendOptions options)"
  overload: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Sends a set of events to the associated Event Hub using a batched approach. If the size of events exceed the maximum size of a single batch, an exception will be triggered and the send will fail. By default, the message size is the max amount allowed on the link."
  syntax:
    content: "public Mono<Void> send(Iterable<EventData> events, SendOptions options)"
    parameters:
    - id: "events"
      type: "java.lang.Iterable<com.azure.messaging.eventhubs.EventData>"
      description: "Events to send to the service."
    - id: "options"
      type: "com.azure.messaging.eventhubs.models.SendOptions"
      description: "The set of options to consider when sending this batch."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> that completes when all events are pushed to the service."
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(reactor.core.publisher.Flux<com.azure.messaging.eventhubs.EventData>)"
  id: "send(reactor.core.publisher.Flux<com.azure.messaging.eventhubs.EventData>)"
  parent: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  langs:
  - "java"
  name: "send(Flux<EventData> events)"
  nameWithType: "EventHubProducerAsyncClient.send(Flux<EventData> events)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(Flux<EventData> events)"
  overload: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Sends a set of events to the associated Event Hub using a batched approach. If the size of events exceed the maximum size of a single batch, an exception will be triggered and the send will fail. By default, the message size is the max amount allowed on the link."
  syntax:
    content: "public Mono<Void> send(Flux<EventData> events)"
    parameters:
    - id: "events"
      type: "reactor.core.publisher.Flux<com.azure.messaging.eventhubs.EventData>"
      description: "Events to send to the service."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> that completes when all events are pushed to the service."
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(reactor.core.publisher.Flux<com.azure.messaging.eventhubs.EventData>,com.azure.messaging.eventhubs.models.SendOptions)"
  id: "send(reactor.core.publisher.Flux<com.azure.messaging.eventhubs.EventData>,com.azure.messaging.eventhubs.models.SendOptions)"
  parent: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
  langs:
  - "java"
  name: "send(Flux<EventData> events, SendOptions options)"
  nameWithType: "EventHubProducerAsyncClient.send(Flux<EventData> events, SendOptions options)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(Flux<EventData> events, SendOptions options)"
  overload: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Sends a set of events to the associated Event Hub using a batched approach. If the size of events exceed the maximum size of a single batch, an exception will be triggered and the send will fail. By default, the message size is the max amount allowed on the link."
  syntax:
    content: "public Mono<Void> send(Flux<EventData> events, SendOptions options)"
    parameters:
    - id: "events"
      type: "reactor.core.publisher.Flux<com.azure.messaging.eventhubs.EventData>"
      description: "Events to send to the service."
    - id: "options"
      type: "com.azure.messaging.eventhubs.models.SendOptions"
      description: "The set of options to consider when sending this batch."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> that completes when all events are pushed to the service."
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.messaging.eventhubs.EventHubConnection"
  name: "EventHubConnection"
  nameWithType: "EventHubConnection"
  fullName: "com.azure.messaging.eventhubs.EventHubConnection"
- uid: "com.azure.core.amqp.RetryOptions"
  spec.java:
  - uid: "com.azure.core.amqp.RetryOptions"
    name: "RetryOptions"
    fullName: "com.azure.core.amqp.RetryOptions"
- uid: "com.azure.core.amqp.implementation.TracerProvider"
  spec.java:
  - uid: "com.azure.core.amqp.implementation.TracerProvider"
    name: "TracerProvider"
    fullName: "com.azure.core.amqp.implementation.TracerProvider"
- uid: "com.azure.core.amqp.implementation.MessageSerializer"
  spec.java:
  - uid: "com.azure.core.amqp.implementation.MessageSerializer"
    name: "MessageSerializer"
    fullName: "com.azure.core.amqp.implementation.MessageSerializer"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.EventHubProducerAsyncClient*"
  name: "EventHubProducerAsyncClient"
  nameWithType: "EventHubProducerAsyncClient.EventHubProducerAsyncClient"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.EventHubProducerAsyncClient"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getFullyQualifiedNamespace*"
  name: "getFullyQualifiedNamespace"
  nameWithType: "EventHubProducerAsyncClient.getFullyQualifiedNamespace"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getFullyQualifiedNamespace"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubName*"
  name: "getEventHubName"
  nameWithType: "EventHubProducerAsyncClient.getEventHubName"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubName"
  package: "com.azure.messaging.eventhubs"
- uid: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.EventHubProperties>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.eventhubs.EventHubProperties"
    name: "EventHubProperties"
    fullName: "com.azure.messaging.eventhubs.EventHubProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getProperties*"
  name: "getProperties"
  nameWithType: "EventHubProducerAsyncClient.getProperties"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getProperties"
  package: "com.azure.messaging.eventhubs"
- uid: "reactor.core.publisher.Flux<java.lang.String>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionIds*"
  name: "getPartitionIds"
  nameWithType: "EventHubProducerAsyncClient.getPartitionIds"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionIds"
  package: "com.azure.messaging.eventhubs"
- uid: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.PartitionProperties>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.eventhubs.PartitionProperties"
    name: "PartitionProperties"
    fullName: "com.azure.messaging.eventhubs.PartitionProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionProperties*"
  name: "getPartitionProperties"
  nameWithType: "EventHubProducerAsyncClient.getPartitionProperties"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionProperties"
  package: "com.azure.messaging.eventhubs"
- uid: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.EventDataBatch>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.eventhubs.EventDataBatch"
    name: "EventDataBatch"
    fullName: "com.azure.messaging.eventhubs.EventDataBatch"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch*"
  name: "createBatch"
  nameWithType: "EventHubProducerAsyncClient.createBatch"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.models.BatchOptions"
  name: "BatchOptions"
  nameWithType: "BatchOptions"
  fullName: "com.azure.messaging.eventhubs.models.BatchOptions"
- uid: "com.azure.messaging.eventhubs.EventData"
  name: "EventData"
  nameWithType: "EventData"
  fullName: "com.azure.messaging.eventhubs.EventData"
- uid: "reactor.core.publisher.Mono<java.lang.Void>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send*"
  name: "send"
  nameWithType: "EventHubProducerAsyncClient.send"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.models.SendOptions"
  name: "SendOptions"
  nameWithType: "SendOptions"
  fullName: "com.azure.messaging.eventhubs.models.SendOptions"
- uid: "java.lang.Iterable<com.azure.messaging.eventhubs.EventData>"
  spec.java:
  - uid: "java.lang.Iterable"
    name: "Iterable"
    fullName: "java.lang.Iterable"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.eventhubs.EventData"
    name: "EventData"
    fullName: "com.azure.messaging.eventhubs.EventData"
  - name: ">"
    fullName: ">"
- uid: "reactor.core.publisher.Flux<com.azure.messaging.eventhubs.EventData>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.eventhubs.EventData"
    name: "EventData"
    fullName: "com.azure.messaging.eventhubs.EventData"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventDataBatch"
  name: "EventDataBatch"
  nameWithType: "EventDataBatch"
  fullName: "com.azure.messaging.eventhubs.EventDataBatch"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.close*"
  name: "close"
  nameWithType: "EventHubProducerAsyncClient.close"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.close"
  package: "com.azure.messaging.eventhubs"
- uid: "java.io.Closeable"
  name: "Closeable"
  nameWithType: "Closeable"
  fullName: "java.io.Closeable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.EventDataCollector"
  name: "EventHubProducerAsyncClient.EventDataCollector"
  nameWithType: "EventHubProducerAsyncClient.EventDataCollector"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.EventDataCollector"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.messaging.eventhubs.EventHubProperties"
  name: "EventHubProperties"
  nameWithType: "EventHubProperties"
  fullName: "com.azure.messaging.eventhubs.EventHubProperties"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "com.azure.messaging.eventhubs.PartitionProperties"
  name: "PartitionProperties"
  nameWithType: "PartitionProperties"
  fullName: "com.azure.messaging.eventhubs.PartitionProperties"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
- uid: "java.lang.Iterable"
  name: "Iterable"
  nameWithType: "Iterable"
  fullName: "java.lang.Iterable"
