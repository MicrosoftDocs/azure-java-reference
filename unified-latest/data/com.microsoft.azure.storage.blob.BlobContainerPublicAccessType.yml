### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
  id: "BlobContainerPublicAccessType"
  parent: "com.microsoft.azure.storage.blob"
  children:
  - "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.BLOB"
  - "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.CONTAINER"
  - "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.OFF"
  - "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.UNKNOWN"
  - "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.parse(java.lang.String)"
  - "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.valueOf(java.lang.String)"
  - "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.values()"
  langs:
  - "java"
  name: "BlobContainerPublicAccessType"
  nameWithType: "BlobContainerPublicAccessType"
  fullName: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
  type: "Enum"
  package: "com.microsoft.azure.storage.blob"
  summary: "Specifies the level of public access that is allowed on the container.\n\nThe public access setting indicates whether the container and its blobs can be read via an anonymous request.\n\nThe <xref uid=\"com.microsoft.azure.storage.blob.BlobContainerPublicAccessType\" data-throw-if-not-resolved=\"false\">BlobContainerPublicAccessType</xref> enumeration provides three levels of anonymous read access:\n\n *  <xref uid=\"com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.OFF\" data-throw-if-not-resolved=\"false\">BlobContainerPublicAccessType#OFF</xref>, which prevents anonymous access.\n *  <xref uid=\"com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.BLOB\" data-throw-if-not-resolved=\"false\">BlobContainerPublicAccessType#BLOB</xref>, which permits anonymous read access to blob resources, but not to container metadata or to the list of blobs in the container.\n *  <xref uid=\"com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.CONTAINER\" data-throw-if-not-resolved=\"false\">BlobContainerPublicAccessType#CONTAINER</xref>, which permits anonymous read access to blob resources, container metadata, and the list of blobs in the container.\n\nFor more information on managing anonymous access to Blob service resources, see [Setting Access Control for Containers][].\n\n\n[Setting Access Control for Containers]: http://go.microsoft.com/fwlink/?LinkID=224644&clcid=0x409"
  syntax:
    content: "public enum BlobContainerPublicAccessType extends Enum<BlobContainerPublicAccessType>"
  inheritance:
  - "java.lang.Object"
  - "java.lang.Enum"
  inheritedMembers:
  - "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
  - "java.lang.Enum.clone()"
  - "java.lang.Enum.compareTo(E)"
  - "java.lang.Enum.equals(java.lang.Object)"
  - "java.lang.Enum.finalize()"
  - "java.lang.Enum.getDeclaringClass()"
  - "java.lang.Enum.hashCode()"
  - "java.lang.Enum.name()"
  - "java.lang.Enum.ordinal()"
  - "java.lang.Enum.toString()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.BLOB"
  id: "BLOB"
  parent: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
  langs:
  - "java"
  name: "BLOB"
  nameWithType: "BlobContainerPublicAccessType.BLOB"
  fullName: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.BLOB"
  type: "Field"
  package: "com.microsoft.azure.storage.blob"
  summary: "Specifies blob-level public access. Clients can read the content and metadata of blobs within this container, but cannot read container metadata or list the blobs within the container."
  syntax:
    content: "public static final BlobContainerPublicAccessType BLOB"
    return:
      type: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
- uid: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.BlobContainerPublicAccessType()"
  id: "BlobContainerPublicAccessType()"
  parent: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
  langs:
  - "java"
  name: "BlobContainerPublicAccessType()"
  nameWithType: "BlobContainerPublicAccessType.BlobContainerPublicAccessType()"
  fullName: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.BlobContainerPublicAccessType()"
  overload: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.BlobContainerPublicAccessType*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  syntax:
    content: "private BlobContainerPublicAccessType()"
- uid: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.CONTAINER"
  id: "CONTAINER"
  parent: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
  langs:
  - "java"
  name: "CONTAINER"
  nameWithType: "BlobContainerPublicAccessType.CONTAINER"
  fullName: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.CONTAINER"
  type: "Field"
  package: "com.microsoft.azure.storage.blob"
  summary: "Specifies container-level public access. Clients can read blob content and metadata and container metadata, and can list the blobs within the container."
  syntax:
    content: "public static final BlobContainerPublicAccessType CONTAINER"
    return:
      type: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
- uid: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.OFF"
  id: "OFF"
  parent: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
  langs:
  - "java"
  name: "OFF"
  nameWithType: "BlobContainerPublicAccessType.OFF"
  fullName: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.OFF"
  type: "Field"
  package: "com.microsoft.azure.storage.blob"
  summary: "Specifies no public access. Only the account owner can access resources in this container."
  syntax:
    content: "public static final BlobContainerPublicAccessType OFF"
    return:
      type: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
- uid: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.UNKNOWN"
  id: "UNKNOWN"
  parent: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
  langs:
  - "java"
  name: "UNKNOWN"
  nameWithType: "BlobContainerPublicAccessType.UNKNOWN"
  fullName: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.UNKNOWN"
  type: "Field"
  package: "com.microsoft.azure.storage.blob"
  summary: "Specifies that the public access type is unknown."
  syntax:
    content: "public static final BlobContainerPublicAccessType UNKNOWN"
    return:
      type: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
- uid: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.parse(java.lang.String)"
  id: "parse(java.lang.String)"
  parent: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
  langs:
  - "java"
  name: "parse(String typeString)"
  nameWithType: "BlobContainerPublicAccessType.parse(String typeString)"
  fullName: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.parse(String typeString)"
  overload: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.parse*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Parses a public access level from the specified string."
  syntax:
    content: "protected static BlobContainerPublicAccessType parse(String typeString)"
    parameters:
    - id: "typeString"
      type: "java.lang.String"
      description: "A <code>String</code> which contains the public access level\n            to parse."
    return:
      type: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
      description: "A <code>BlobContainerPublicAccessType</code> value that\n         represents the public access level for the container."
- uid: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.valueOf(java.lang.String)"
  id: "valueOf(java.lang.String)"
  parent: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
  langs:
  - "java"
  name: "valueOf(String name)"
  nameWithType: "BlobContainerPublicAccessType.valueOf(String name)"
  fullName: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.valueOf(String name)"
  overload: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.valueOf*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  syntax:
    content: "public static BlobContainerPublicAccessType valueOf(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    return:
      type: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
- uid: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.values()"
  id: "values()"
  parent: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
  langs:
  - "java"
  name: "values()"
  nameWithType: "BlobContainerPublicAccessType.values()"
  fullName: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.values()"
  overload: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.values*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  syntax:
    content: "public static BlobContainerPublicAccessType[] values()"
    return:
      type: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType[]"
references:
- uid: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.BlobContainerPublicAccessType*"
  name: "BlobContainerPublicAccessType"
  nameWithType: "BlobContainerPublicAccessType.BlobContainerPublicAccessType"
  fullName: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.BlobContainerPublicAccessType"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType[]"
  spec.java:
  - uid: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
    name: "BlobContainerPublicAccessType"
    fullName: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType"
  - name: "[]"
    fullName: "[]"
- uid: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.values*"
  name: "values"
  nameWithType: "BlobContainerPublicAccessType.values"
  fullName: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.values"
  package: "com.microsoft.azure.storage.blob"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.valueOf*"
  name: "valueOf"
  nameWithType: "BlobContainerPublicAccessType.valueOf"
  fullName: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.valueOf"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.parse*"
  name: "parse"
  nameWithType: "BlobContainerPublicAccessType.parse"
  fullName: "com.microsoft.azure.storage.blob.BlobContainerPublicAccessType.parse"
  package: "com.microsoft.azure.storage.blob"
- uid: "java.lang.Enum<com.microsoft.azure.storage.blob.BlobContainerPublicAccessType>"
  name: "Enum<BlobContainerPublicAccessType>"
  nameWithType: "Enum<BlobContainerPublicAccessType>"
  fullName: "java.lang.Enum<com.microsoft.azure.storage.blob.BlobContainerPublicAccessType>"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Enum.toString()"
  name: "Enum.toString()"
  nameWithType: "Enum.toString()"
  fullName: "java.lang.Enum.toString()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Enum.clone()"
  name: "Enum.clone()"
  nameWithType: "Enum.clone()"
  fullName: "java.lang.Enum.clone()"
- uid: "java.lang.Enum.finalize()"
  name: "Enum.finalize()"
  nameWithType: "Enum.finalize()"
  fullName: "java.lang.Enum.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Enum.compareTo(E)"
  name: "Enum.compareTo(E)"
  nameWithType: "Enum.compareTo(E)"
  fullName: "java.lang.Enum.compareTo(E)"
- uid: "java.lang.Enum.name()"
  name: "Enum.name()"
  nameWithType: "Enum.name()"
  fullName: "java.lang.Enum.name()"
- uid: "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
  name: "Enum.<T>valueOf(Class<T>,String)"
  nameWithType: "Enum.<T>valueOf(Class<T>,String)"
  fullName: "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Enum.getDeclaringClass()"
  name: "Enum.getDeclaringClass()"
  nameWithType: "Enum.getDeclaringClass()"
  fullName: "java.lang.Enum.getDeclaringClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Enum.ordinal()"
  name: "Enum.ordinal()"
  nameWithType: "Enum.ordinal()"
  fullName: "java.lang.Enum.ordinal()"
- uid: "java.lang.Enum.hashCode()"
  name: "Enum.hashCode()"
  nameWithType: "Enum.hashCode()"
  fullName: "java.lang.Enum.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Enum.equals(java.lang.Object)"
  name: "Enum.equals(Object)"
  nameWithType: "Enum.equals(Object)"
  fullName: "java.lang.Enum.equals(java.lang.Object)"
- uid: "java.lang.Enum"
  name: "Enum"
  nameWithType: "Enum"
  fullName: "java.lang.Enum"
- uid: "java.lang.Enum."
  name: "Enum."
  nameWithType: "Enum."
  fullName: "java.lang.Enum."
- uid: "T>,java.lang.String)"
  name: "T>,String)"
  nameWithType: "T>,String)"
  fullName: "T>,java.lang.String)"
- uid: "T>valueOf(java.lang.Class"
  name: "T>valueOf(Class"
  nameWithType: "T>valueOf(Class"
  fullName: "T>valueOf(java.lang.Class"
