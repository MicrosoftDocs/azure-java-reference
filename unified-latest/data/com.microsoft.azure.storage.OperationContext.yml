### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.OperationContext"
  id: "OperationContext"
  parent: "com.microsoft.azure.storage"
  children:
  - "com.microsoft.azure.storage.OperationContext.OperationContext()"
  - "com.microsoft.azure.storage.OperationContext.appendRequestResult(com.microsoft.azure.storage.RequestResult)"
  - "com.microsoft.azure.storage.OperationContext.defaultLoggerName"
  - "com.microsoft.azure.storage.OperationContext.getClientRequestID()"
  - "com.microsoft.azure.storage.OperationContext.getClientTimeInMs()"
  - "com.microsoft.azure.storage.OperationContext.getDefaultProxy()"
  - "com.microsoft.azure.storage.OperationContext.getErrorReceivingResponseEventHandler()"
  - "com.microsoft.azure.storage.OperationContext.getGlobalErrorReceivingResponseEventHandler()"
  - "com.microsoft.azure.storage.OperationContext.getGlobalRequestCompletedEventHandler()"
  - "com.microsoft.azure.storage.OperationContext.getGlobalResponseReceivedEventHandler()"
  - "com.microsoft.azure.storage.OperationContext.getGlobalRetryingEventHandler()"
  - "com.microsoft.azure.storage.OperationContext.getGlobalSendingRequestEventHandler()"
  - "com.microsoft.azure.storage.OperationContext.getLastResult()"
  - "com.microsoft.azure.storage.OperationContext.getLogger()"
  - "com.microsoft.azure.storage.OperationContext.getProxy()"
  - "com.microsoft.azure.storage.OperationContext.getRequestCompletedEventHandler()"
  - "com.microsoft.azure.storage.OperationContext.getRequestResults()"
  - "com.microsoft.azure.storage.OperationContext.getResponseReceivedEventHandler()"
  - "com.microsoft.azure.storage.OperationContext.getRetryingEventHandler()"
  - "com.microsoft.azure.storage.OperationContext.getSendingRequestEventHandler()"
  - "com.microsoft.azure.storage.OperationContext.getUserHeaders()"
  - "com.microsoft.azure.storage.OperationContext.initialize()"
  - "com.microsoft.azure.storage.OperationContext.isLoggingEnabled()"
  - "com.microsoft.azure.storage.OperationContext.isLoggingEnabledByDefault()"
  - "com.microsoft.azure.storage.OperationContext.setClientRequestID(java.lang.String)"
  - "com.microsoft.azure.storage.OperationContext.setClientTimeInMs(long)"
  - "com.microsoft.azure.storage.OperationContext.setDefaultProxy(java.net.Proxy)"
  - "com.microsoft.azure.storage.OperationContext.setErrorReceivingResponseEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ErrorReceivingResponseEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ErrorReceivingResponseEvent>>)"
  - "com.microsoft.azure.storage.OperationContext.setGlobalErrorReceivingResponseEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ErrorReceivingResponseEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ErrorReceivingResponseEvent>>)"
  - "com.microsoft.azure.storage.OperationContext.setGlobalRequestCompletedEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RequestCompletedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RequestCompletedEvent>>)"
  - "com.microsoft.azure.storage.OperationContext.setGlobalResponseReceivedEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ResponseReceivedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ResponseReceivedEvent>>)"
  - "com.microsoft.azure.storage.OperationContext.setGlobalRetryingEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RetryingEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RetryingEvent>>)"
  - "com.microsoft.azure.storage.OperationContext.setGlobalSendingRequestEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.SendingRequestEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.SendingRequestEvent>>)"
  - "com.microsoft.azure.storage.OperationContext.setLogger(org.slf4j.Logger)"
  - "com.microsoft.azure.storage.OperationContext.setLoggingEnabled(boolean)"
  - "com.microsoft.azure.storage.OperationContext.setLoggingEnabledByDefault(boolean)"
  - "com.microsoft.azure.storage.OperationContext.setProxy(java.net.Proxy)"
  - "com.microsoft.azure.storage.OperationContext.setRequestCompletedEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RequestCompletedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RequestCompletedEvent>>)"
  - "com.microsoft.azure.storage.OperationContext.setResponseReceivedEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ResponseReceivedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ResponseReceivedEvent>>)"
  - "com.microsoft.azure.storage.OperationContext.setRetryingEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RetryingEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RetryingEvent>>)"
  - "com.microsoft.azure.storage.OperationContext.setSendingRequestEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.SendingRequestEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.SendingRequestEvent>>)"
  - "com.microsoft.azure.storage.OperationContext.setUserHeaders(java.util.HashMap<java.lang.String,java.lang.String>)"
  langs:
  - "java"
  name: "OperationContext"
  nameWithType: "OperationContext"
  fullName: "com.microsoft.azure.storage.OperationContext"
  type: "Class"
  package: "com.microsoft.azure.storage"
  summary: "Represents the current logical operation. A logical operation may have a one-to-many relationship with multiple individual physical requests."
  syntax:
    content: "public final class OperationContext"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.OperationContext.OperationContext()"
  id: "OperationContext()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "OperationContext()"
  nameWithType: "OperationContext.OperationContext()"
  fullName: "com.microsoft.azure.storage.OperationContext.OperationContext()"
  overload: "com.microsoft.azure.storage.OperationContext.OperationContext*"
  type: "Constructor"
  package: "com.microsoft.azure.storage"
  summary: "Creates an instance of the `OperationContext` class."
  syntax:
    content: "public OperationContext()"
- uid: "com.microsoft.azure.storage.OperationContext.appendRequestResult(com.microsoft.azure.storage.RequestResult)"
  id: "appendRequestResult(com.microsoft.azure.storage.RequestResult)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "appendRequestResult(RequestResult requestResult)"
  nameWithType: "OperationContext.appendRequestResult(RequestResult requestResult)"
  fullName: "com.microsoft.azure.storage.OperationContext.appendRequestResult(RequestResult requestResult)"
  overload: "com.microsoft.azure.storage.OperationContext.appendRequestResult*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Reserved for internal use. Appends a <xref uid=\"com.microsoft.azure.storage.RequestResult\" data-throw-if-not-resolved=\"false\">RequestResult</xref> object to the internal collection in a synchronized manner."
  syntax:
    content: "public synchronized void appendRequestResult(RequestResult requestResult)"
    parameters:
    - id: "requestResult"
      type: "com.microsoft.azure.storage.RequestResult"
      description: "A <xref uid=\"com.microsoft.azure.storage.RequestResult\" data-throw-if-not-resolved=\"false\">RequestResult</xref> to append."
- uid: "com.microsoft.azure.storage.OperationContext.defaultLoggerName"
  id: "defaultLoggerName"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "defaultLoggerName"
  nameWithType: "OperationContext.defaultLoggerName"
  fullName: "com.microsoft.azure.storage.OperationContext.defaultLoggerName"
  type: "Field"
  package: "com.microsoft.azure.storage"
  summary: "Name of the <xref uid=\"org.slf4j.Logger\" data-throw-if-not-resolved=\"false\">org.slf4j.Logger</xref> that will be created by default if logging is enabled and a <xref uid=\"org.slf4j.Logger\" data-throw-if-not-resolved=\"false\">org.slf4j.Logger</xref> has not been specified."
  syntax:
    content: "public static final String defaultLoggerName"
    return:
      type: "java.lang.String"
- uid: "com.microsoft.azure.storage.OperationContext.getClientRequestID()"
  id: "getClientRequestID()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getClientRequestID()"
  nameWithType: "OperationContext.getClientRequestID()"
  fullName: "com.microsoft.azure.storage.OperationContext.getClientRequestID()"
  overload: "com.microsoft.azure.storage.OperationContext.getClientRequestID*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Gets the client side trace ID."
  syntax:
    content: "public String getClientRequestID()"
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the client request ID."
- uid: "com.microsoft.azure.storage.OperationContext.getClientTimeInMs()"
  id: "getClientTimeInMs()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getClientTimeInMs()"
  nameWithType: "OperationContext.getClientTimeInMs()"
  fullName: "com.microsoft.azure.storage.OperationContext.getClientTimeInMs()"
  overload: "com.microsoft.azure.storage.OperationContext.getClientTimeInMs*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Gets the operation latency, in milliseconds, from the client's perspective. This may include any potential retries."
  syntax:
    content: "public long getClientTimeInMs()"
    return:
      type: "long"
      description: "A <code>long</code> which contains the client latency time in milliseconds."
- uid: "com.microsoft.azure.storage.OperationContext.getDefaultProxy()"
  id: "getDefaultProxy()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getDefaultProxy()"
  nameWithType: "OperationContext.getDefaultProxy()"
  fullName: "com.microsoft.azure.storage.OperationContext.getDefaultProxy()"
  overload: "com.microsoft.azure.storage.OperationContext.getDefaultProxy*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Gets the default proxy used by the client library if enabled. The default can be overridden to enable a proxy for an individual operation context instance by using <xref uid=\"com.microsoft.azure.storage.OperationContext.setProxy*\" data-throw-if-not-resolved=\"false\">#setProxy</xref>."
  syntax:
    content: "public static Proxy getDefaultProxy()"
    return:
      type: "java.net.Proxy"
      description: "The default <xref uid=\"java.net.Proxy\" data-throw-if-not-resolved=\"false\">java.net.Proxy</xref> if set; otherwise <code>null</code>"
- uid: "com.microsoft.azure.storage.OperationContext.getErrorReceivingResponseEventHandler()"
  id: "getErrorReceivingResponseEventHandler()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getErrorReceivingResponseEventHandler()"
  nameWithType: "OperationContext.getErrorReceivingResponseEventHandler()"
  fullName: "com.microsoft.azure.storage.OperationContext.getErrorReceivingResponseEventHandler()"
  overload: "com.microsoft.azure.storage.OperationContext.getErrorReceivingResponseEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Gets an event multi-caster that is triggered when a network error occurs before the HTTP response status and headers are received. It allows event listeners to be dynamically added and removed."
  syntax:
    content: "public StorageEventMultiCaster<ErrorReceivingResponseEvent,StorageEvent<ErrorReceivingResponseEvent>> getErrorReceivingResponseEventHandler()"
    return:
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ErrorReceivingResponseEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ErrorReceivingResponseEvent>>"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object for the <code>errorReceivingResponseEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.getGlobalErrorReceivingResponseEventHandler()"
  id: "getGlobalErrorReceivingResponseEventHandler()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getGlobalErrorReceivingResponseEventHandler()"
  nameWithType: "OperationContext.getGlobalErrorReceivingResponseEventHandler()"
  fullName: "com.microsoft.azure.storage.OperationContext.getGlobalErrorReceivingResponseEventHandler()"
  overload: "com.microsoft.azure.storage.OperationContext.getGlobalErrorReceivingResponseEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Gets a global event multi-caster that is triggered when a network error occurs before the HTTP response status and headers are received. It allows event listeners to be dynamically added and removed."
  syntax:
    content: "public static StorageEventMultiCaster<ErrorReceivingResponseEvent,StorageEvent<ErrorReceivingResponseEvent>> getGlobalErrorReceivingResponseEventHandler()"
    return:
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ErrorReceivingResponseEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ErrorReceivingResponseEvent>>"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object for the <code>globabErrorReceivingResponseEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.getGlobalRequestCompletedEventHandler()"
  id: "getGlobalRequestCompletedEventHandler()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getGlobalRequestCompletedEventHandler()"
  nameWithType: "OperationContext.getGlobalRequestCompletedEventHandler()"
  fullName: "com.microsoft.azure.storage.OperationContext.getGlobalRequestCompletedEventHandler()"
  overload: "com.microsoft.azure.storage.OperationContext.getGlobalRequestCompletedEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Gets a global event multi-caster that is triggered when a request is completed. It allows event listeners to be dynamically added and removed."
  syntax:
    content: "public static StorageEventMultiCaster<RequestCompletedEvent,StorageEvent<RequestCompletedEvent>> getGlobalRequestCompletedEventHandler()"
    return:
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RequestCompletedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RequestCompletedEvent>>"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object for the <code>globalRequestCompletedEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.getGlobalResponseReceivedEventHandler()"
  id: "getGlobalResponseReceivedEventHandler()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getGlobalResponseReceivedEventHandler()"
  nameWithType: "OperationContext.getGlobalResponseReceivedEventHandler()"
  fullName: "com.microsoft.azure.storage.OperationContext.getGlobalResponseReceivedEventHandler()"
  overload: "com.microsoft.azure.storage.OperationContext.getGlobalResponseReceivedEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Gets a global event multi-caster that is triggered when a response is received. It allows event listeners to be dynamically added and removed."
  syntax:
    content: "public static StorageEventMultiCaster<ResponseReceivedEvent,StorageEvent<ResponseReceivedEvent>> getGlobalResponseReceivedEventHandler()"
    return:
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ResponseReceivedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ResponseReceivedEvent>>"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object for the <code>globalResponseReceivedEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.getGlobalRetryingEventHandler()"
  id: "getGlobalRetryingEventHandler()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getGlobalRetryingEventHandler()"
  nameWithType: "OperationContext.getGlobalRetryingEventHandler()"
  fullName: "com.microsoft.azure.storage.OperationContext.getGlobalRetryingEventHandler()"
  overload: "com.microsoft.azure.storage.OperationContext.getGlobalRetryingEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Gets a global event multi-caster that is triggered when a request is retried. It allows event listeners to be dynamically added and removed."
  syntax:
    content: "public static StorageEventMultiCaster<RetryingEvent,StorageEvent<RetryingEvent>> getGlobalRetryingEventHandler()"
    return:
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RetryingEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RetryingEvent>>"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object for the <code>globalRetryingEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.getGlobalSendingRequestEventHandler()"
  id: "getGlobalSendingRequestEventHandler()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getGlobalSendingRequestEventHandler()"
  nameWithType: "OperationContext.getGlobalSendingRequestEventHandler()"
  fullName: "com.microsoft.azure.storage.OperationContext.getGlobalSendingRequestEventHandler()"
  overload: "com.microsoft.azure.storage.OperationContext.getGlobalSendingRequestEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Gets a global event multi-caster that is triggered before sending a request. It allows event listeners to be dynamically added and removed."
  syntax:
    content: "public static StorageEventMultiCaster<SendingRequestEvent,StorageEvent<SendingRequestEvent>> getGlobalSendingRequestEventHandler()"
    return:
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.SendingRequestEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.SendingRequestEvent>>"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object for the <code>globalSendingRequestEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.getLastResult()"
  id: "getLastResult()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getLastResult()"
  nameWithType: "OperationContext.getLastResult()"
  fullName: "com.microsoft.azure.storage.OperationContext.getLastResult()"
  overload: "com.microsoft.azure.storage.OperationContext.getLastResult*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Gets the last request result encountered for the operation."
  syntax:
    content: "public synchronized RequestResult getLastResult()"
    return:
      type: "com.microsoft.azure.storage.RequestResult"
      description: "A <xref uid=\"com.microsoft.azure.storage.RequestResult\" data-throw-if-not-resolved=\"false\">RequestResult</xref> object which represents the last request result."
- uid: "com.microsoft.azure.storage.OperationContext.getLogger()"
  id: "getLogger()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getLogger()"
  nameWithType: "OperationContext.getLogger()"
  fullName: "com.microsoft.azure.storage.OperationContext.getLogger()"
  overload: "com.microsoft.azure.storage.OperationContext.getLogger*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Gets the <xref uid=\"org.slf4j.Logger\" data-throw-if-not-resolved=\"false\">org.slf4j.Logger</xref> associated with this operation. If the <xref uid=\"org.slf4j.Logger\" data-throw-if-not-resolved=\"false\">org.slf4j.Logger</xref> object associated with this operation is null, this will return the class's default <xref uid=\"org.slf4j.Logger\" data-throw-if-not-resolved=\"false\">org.slf4j.Logger</xref> object."
  syntax:
    content: "public Logger getLogger()"
    return:
      type: "org.slf4j.Logger"
      description: "The <xref uid=\"org.slf4j.Logger\" data-throw-if-not-resolved=\"false\">org.slf4j.Logger</xref> object associated with this operation,\n         or the class's default <xref uid=\"org.slf4j.Logger\" data-throw-if-not-resolved=\"false\">org.slf4j.Logger</xref> if null."
- uid: "com.microsoft.azure.storage.OperationContext.getProxy()"
  id: "getProxy()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getProxy()"
  nameWithType: "OperationContext.getProxy()"
  fullName: "com.microsoft.azure.storage.OperationContext.getProxy()"
  overload: "com.microsoft.azure.storage.OperationContext.getProxy*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Gets a proxy which will be used when making a request. Default is `null`. To set a proxy to use by default, use <xref uid=\"com.microsoft.azure.storage.OperationContext.setDefaultProxy*\" data-throw-if-not-resolved=\"false\">#setDefaultProxy</xref>"
  syntax:
    content: "public Proxy getProxy()"
    return:
      type: "java.net.Proxy"
      description: "A <xref uid=\"java.net.Proxy\" data-throw-if-not-resolved=\"false\">java.net.Proxy</xref> to use when making a request."
- uid: "com.microsoft.azure.storage.OperationContext.getRequestCompletedEventHandler()"
  id: "getRequestCompletedEventHandler()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getRequestCompletedEventHandler()"
  nameWithType: "OperationContext.getRequestCompletedEventHandler()"
  fullName: "com.microsoft.azure.storage.OperationContext.getRequestCompletedEventHandler()"
  overload: "com.microsoft.azure.storage.OperationContext.getRequestCompletedEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Gets an event multi-caster that is triggered when a request is completed. It allows event listeners to be dynamically added and removed."
  syntax:
    content: "public StorageEventMultiCaster<RequestCompletedEvent,StorageEvent<RequestCompletedEvent>> getRequestCompletedEventHandler()"
    return:
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RequestCompletedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RequestCompletedEvent>>"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object for the <code>requestCompletedEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.getRequestResults()"
  id: "getRequestResults()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getRequestResults()"
  nameWithType: "OperationContext.getRequestResults()"
  fullName: "com.microsoft.azure.storage.OperationContext.getRequestResults()"
  overload: "com.microsoft.azure.storage.OperationContext.getRequestResults*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Returns the set of request results that the current operation has created."
  syntax:
    content: "public ArrayList<RequestResult> getRequestResults()"
    return:
      type: "java.util.ArrayList<com.microsoft.azure.storage.RequestResult>"
      description: "An <code>ArrayList</code> object that contains <xref uid=\"com.microsoft.azure.storage.RequestResult\" data-throw-if-not-resolved=\"false\">RequestResult</xref> objects that represent\n         the request results created by the current operation."
- uid: "com.microsoft.azure.storage.OperationContext.getResponseReceivedEventHandler()"
  id: "getResponseReceivedEventHandler()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getResponseReceivedEventHandler()"
  nameWithType: "OperationContext.getResponseReceivedEventHandler()"
  fullName: "com.microsoft.azure.storage.OperationContext.getResponseReceivedEventHandler()"
  overload: "com.microsoft.azure.storage.OperationContext.getResponseReceivedEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Gets an event multi-caster that is triggered when a response is received. It allows event listeners to be dynamically added and removed."
  syntax:
    content: "public StorageEventMultiCaster<ResponseReceivedEvent,StorageEvent<ResponseReceivedEvent>> getResponseReceivedEventHandler()"
    return:
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ResponseReceivedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ResponseReceivedEvent>>"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object for the <code>responseReceivedEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.getRetryingEventHandler()"
  id: "getRetryingEventHandler()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getRetryingEventHandler()"
  nameWithType: "OperationContext.getRetryingEventHandler()"
  fullName: "com.microsoft.azure.storage.OperationContext.getRetryingEventHandler()"
  overload: "com.microsoft.azure.storage.OperationContext.getRetryingEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Gets an event multi-caster that is triggered when a request is retried. It allows event listeners to be dynamically added and removed."
  syntax:
    content: "public StorageEventMultiCaster<RetryingEvent,StorageEvent<RetryingEvent>> getRetryingEventHandler()"
    return:
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RetryingEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RetryingEvent>>"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object for the <code>retryingEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.getSendingRequestEventHandler()"
  id: "getSendingRequestEventHandler()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getSendingRequestEventHandler()"
  nameWithType: "OperationContext.getSendingRequestEventHandler()"
  fullName: "com.microsoft.azure.storage.OperationContext.getSendingRequestEventHandler()"
  overload: "com.microsoft.azure.storage.OperationContext.getSendingRequestEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Gets an event multi-caster that is triggered before sending a request. It allows event listeners to be dynamically added and removed."
  syntax:
    content: "public StorageEventMultiCaster<SendingRequestEvent,StorageEvent<SendingRequestEvent>> getSendingRequestEventHandler()"
    return:
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.SendingRequestEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.SendingRequestEvent>>"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object for the <code>sendingRequestEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.getUserHeaders()"
  id: "getUserHeaders()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "getUserHeaders()"
  nameWithType: "OperationContext.getUserHeaders()"
  fullName: "com.microsoft.azure.storage.OperationContext.getUserHeaders()"
  overload: "com.microsoft.azure.storage.OperationContext.getUserHeaders*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Gets any additional headers for the request, for example, for proxy or logging information."
  syntax:
    content: "public HashMap<String,String> getUserHeaders()"
    return:
      type: "java.util.HashMap<java.lang.String,java.lang.String>"
      description: "A <code>java.util.HashMap</code> which contains the the user headers for the request."
- uid: "com.microsoft.azure.storage.OperationContext.initialize()"
  id: "initialize()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "initialize()"
  nameWithType: "OperationContext.initialize()"
  fullName: "com.microsoft.azure.storage.OperationContext.initialize()"
  overload: "com.microsoft.azure.storage.OperationContext.initialize*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Reserved for internal use. Initializes the `OperationContext` in order to begin processing a new operation. All operation specific information is erased."
  syntax:
    content: "public void initialize()"
- uid: "com.microsoft.azure.storage.OperationContext.isLoggingEnabled()"
  id: "isLoggingEnabled()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "isLoggingEnabled()"
  nameWithType: "OperationContext.isLoggingEnabled()"
  fullName: "com.microsoft.azure.storage.OperationContext.isLoggingEnabled()"
  overload: "com.microsoft.azure.storage.OperationContext.isLoggingEnabled*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Indicates whether log entries will be produced for this request."
  syntax:
    content: "public boolean isLoggingEnabled()"
    return:
      type: "boolean"
      description: "<code>true</code> if logging is enabled; otherwise <code>false</code>."
- uid: "com.microsoft.azure.storage.OperationContext.isLoggingEnabledByDefault()"
  id: "isLoggingEnabledByDefault()"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "isLoggingEnabledByDefault()"
  nameWithType: "OperationContext.isLoggingEnabledByDefault()"
  fullName: "com.microsoft.azure.storage.OperationContext.isLoggingEnabledByDefault()"
  overload: "com.microsoft.azure.storage.OperationContext.isLoggingEnabledByDefault*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Indicates whether the client library should produce log entries by default. The default can be overridden to enable logging for an individual operation context instance by using <xref uid=\"com.microsoft.azure.storage.OperationContext.setLoggingEnabled*\" data-throw-if-not-resolved=\"false\">#setLoggingEnabled</xref>."
  syntax:
    content: "public static boolean isLoggingEnabledByDefault()"
    return:
      type: "boolean"
      description: "<code>true</code> if logging is enabled by default; otherwise <code>false</code>."
- uid: "com.microsoft.azure.storage.OperationContext.setClientRequestID(java.lang.String)"
  id: "setClientRequestID(java.lang.String)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setClientRequestID(String clientRequestID)"
  nameWithType: "OperationContext.setClientRequestID(String clientRequestID)"
  fullName: "com.microsoft.azure.storage.OperationContext.setClientRequestID(String clientRequestID)"
  overload: "com.microsoft.azure.storage.OperationContext.setClientRequestID*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Sets the client side request ID."
  syntax:
    content: "public void setClientRequestID(String clientRequestID)"
    parameters:
    - id: "clientRequestID"
      type: "java.lang.String"
      description: "A <code>String</code> which contains the client request ID to set."
- uid: "com.microsoft.azure.storage.OperationContext.setClientTimeInMs(long)"
  id: "setClientTimeInMs(long)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setClientTimeInMs(long clientTimeInMs)"
  nameWithType: "OperationContext.setClientTimeInMs(long clientTimeInMs)"
  fullName: "com.microsoft.azure.storage.OperationContext.setClientTimeInMs(long clientTimeInMs)"
  overload: "com.microsoft.azure.storage.OperationContext.setClientTimeInMs*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Reserved for internal use. Represents the operation latency, in milliseconds, from the client's perspective. This may include any potential retries."
  syntax:
    content: "public void setClientTimeInMs(long clientTimeInMs)"
    parameters:
    - id: "clientTimeInMs"
      type: "long"
      description: "A <code>long</code> which contains the client operation latency in milliseconds."
- uid: "com.microsoft.azure.storage.OperationContext.setDefaultProxy(java.net.Proxy)"
  id: "setDefaultProxy(java.net.Proxy)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setDefaultProxy(Proxy defaultProxy)"
  nameWithType: "OperationContext.setDefaultProxy(Proxy defaultProxy)"
  fullName: "com.microsoft.azure.storage.OperationContext.setDefaultProxy(Proxy defaultProxy)"
  overload: "com.microsoft.azure.storage.OperationContext.setDefaultProxy*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Specifies the proxy the client library should use by default. The default can be overridden to turn on a proxy for an individual operation context instance by using <xref uid=\"com.microsoft.azure.storage.OperationContext.setProxy*\" data-throw-if-not-resolved=\"false\">#setProxy</xref>."
  syntax:
    content: "public static void setDefaultProxy(Proxy defaultProxy)"
    parameters:
    - id: "defaultProxy"
      type: "java.net.Proxy"
      description: "The <xref uid=\"java.net.Proxy\" data-throw-if-not-resolved=\"false\">java.net.Proxy</xref> to use by default, or <code>null</code> to not use a proxy."
- uid: "com.microsoft.azure.storage.OperationContext.setErrorReceivingResponseEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ErrorReceivingResponseEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ErrorReceivingResponseEvent>>)"
  id: "setErrorReceivingResponseEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ErrorReceivingResponseEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ErrorReceivingResponseEvent>>)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setErrorReceivingResponseEventHandler(StorageEventMultiCaster<ErrorReceivingResponseEvent,StorageEvent<ErrorReceivingResponseEvent>> errorReceivingResponseEventHandler)"
  nameWithType: "OperationContext.setErrorReceivingResponseEventHandler(StorageEventMultiCaster<ErrorReceivingResponseEvent,StorageEvent<ErrorReceivingResponseEvent>> errorReceivingResponseEventHandler)"
  fullName: "com.microsoft.azure.storage.OperationContext.setErrorReceivingResponseEventHandler(StorageEventMultiCaster<ErrorReceivingResponseEvent,StorageEvent<ErrorReceivingResponseEvent>> errorReceivingResponseEventHandler)"
  overload: "com.microsoft.azure.storage.OperationContext.setErrorReceivingResponseEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Sets an event multi-caster that is triggered when a network error occurs before the HTTP response status and headers are received."
  syntax:
    content: "public void setErrorReceivingResponseEventHandler(StorageEventMultiCaster<ErrorReceivingResponseEvent,StorageEvent<ErrorReceivingResponseEvent>> errorReceivingResponseEventHandler)"
    parameters:
    - id: "errorReceivingResponseEventHandler"
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ErrorReceivingResponseEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ErrorReceivingResponseEvent>>"
      description: "The <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object to set for the <code>errorReceivingResponseEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.setGlobalErrorReceivingResponseEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ErrorReceivingResponseEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ErrorReceivingResponseEvent>>)"
  id: "setGlobalErrorReceivingResponseEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ErrorReceivingResponseEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ErrorReceivingResponseEvent>>)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setGlobalErrorReceivingResponseEventHandler(StorageEventMultiCaster<ErrorReceivingResponseEvent,StorageEvent<ErrorReceivingResponseEvent>> globalErrorReceivingResponseEventHandler)"
  nameWithType: "OperationContext.setGlobalErrorReceivingResponseEventHandler(StorageEventMultiCaster<ErrorReceivingResponseEvent,StorageEvent<ErrorReceivingResponseEvent>> globalErrorReceivingResponseEventHandler)"
  fullName: "com.microsoft.azure.storage.OperationContext.setGlobalErrorReceivingResponseEventHandler(StorageEventMultiCaster<ErrorReceivingResponseEvent,StorageEvent<ErrorReceivingResponseEvent>> globalErrorReceivingResponseEventHandler)"
  overload: "com.microsoft.azure.storage.OperationContext.setGlobalErrorReceivingResponseEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Sets a global event multi-caster that is triggered when a network error occurs before the HTTP response status and headers are received."
  syntax:
    content: "public static void setGlobalErrorReceivingResponseEventHandler(StorageEventMultiCaster<ErrorReceivingResponseEvent,StorageEvent<ErrorReceivingResponseEvent>> globalErrorReceivingResponseEventHandler)"
    parameters:
    - id: "globalErrorReceivingResponseEventHandler"
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ErrorReceivingResponseEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ErrorReceivingResponseEvent>>"
      description: "The <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object to set for the <code>globalErrorReceivingResponseEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.setGlobalRequestCompletedEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RequestCompletedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RequestCompletedEvent>>)"
  id: "setGlobalRequestCompletedEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RequestCompletedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RequestCompletedEvent>>)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setGlobalRequestCompletedEventHandler(StorageEventMultiCaster<RequestCompletedEvent,StorageEvent<RequestCompletedEvent>> globalRequestCompletedEventHandler)"
  nameWithType: "OperationContext.setGlobalRequestCompletedEventHandler(StorageEventMultiCaster<RequestCompletedEvent,StorageEvent<RequestCompletedEvent>> globalRequestCompletedEventHandler)"
  fullName: "com.microsoft.azure.storage.OperationContext.setGlobalRequestCompletedEventHandler(StorageEventMultiCaster<RequestCompletedEvent,StorageEvent<RequestCompletedEvent>> globalRequestCompletedEventHandler)"
  overload: "com.microsoft.azure.storage.OperationContext.setGlobalRequestCompletedEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Sets a global event multi-caster that is triggered when a request is completed."
  syntax:
    content: "public static void setGlobalRequestCompletedEventHandler(StorageEventMultiCaster<RequestCompletedEvent,StorageEvent<RequestCompletedEvent>> globalRequestCompletedEventHandler)"
    parameters:
    - id: "globalRequestCompletedEventHandler"
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RequestCompletedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RequestCompletedEvent>>"
      description: "The <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object to set for the <code>globalRequestCompletedEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.setGlobalResponseReceivedEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ResponseReceivedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ResponseReceivedEvent>>)"
  id: "setGlobalResponseReceivedEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ResponseReceivedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ResponseReceivedEvent>>)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setGlobalResponseReceivedEventHandler(StorageEventMultiCaster<ResponseReceivedEvent,StorageEvent<ResponseReceivedEvent>> globalResponseReceivedEventHandler)"
  nameWithType: "OperationContext.setGlobalResponseReceivedEventHandler(StorageEventMultiCaster<ResponseReceivedEvent,StorageEvent<ResponseReceivedEvent>> globalResponseReceivedEventHandler)"
  fullName: "com.microsoft.azure.storage.OperationContext.setGlobalResponseReceivedEventHandler(StorageEventMultiCaster<ResponseReceivedEvent,StorageEvent<ResponseReceivedEvent>> globalResponseReceivedEventHandler)"
  overload: "com.microsoft.azure.storage.OperationContext.setGlobalResponseReceivedEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Sets a global event multi-caster that is triggered when a response is received."
  syntax:
    content: "public static void setGlobalResponseReceivedEventHandler(StorageEventMultiCaster<ResponseReceivedEvent,StorageEvent<ResponseReceivedEvent>> globalResponseReceivedEventHandler)"
    parameters:
    - id: "globalResponseReceivedEventHandler"
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ResponseReceivedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ResponseReceivedEvent>>"
      description: "The <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object to set for the <code>globalResponseReceivedEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.setGlobalRetryingEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RetryingEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RetryingEvent>>)"
  id: "setGlobalRetryingEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RetryingEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RetryingEvent>>)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setGlobalRetryingEventHandler(StorageEventMultiCaster<RetryingEvent,StorageEvent<RetryingEvent>> globalRetryingEventHandler)"
  nameWithType: "OperationContext.setGlobalRetryingEventHandler(StorageEventMultiCaster<RetryingEvent,StorageEvent<RetryingEvent>> globalRetryingEventHandler)"
  fullName: "com.microsoft.azure.storage.OperationContext.setGlobalRetryingEventHandler(StorageEventMultiCaster<RetryingEvent,StorageEvent<RetryingEvent>> globalRetryingEventHandler)"
  overload: "com.microsoft.azure.storage.OperationContext.setGlobalRetryingEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Sets a global event multi-caster that is triggered when a request is retried."
  syntax:
    content: "public static void setGlobalRetryingEventHandler(StorageEventMultiCaster<RetryingEvent,StorageEvent<RetryingEvent>> globalRetryingEventHandler)"
    parameters:
    - id: "globalRetryingEventHandler"
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RetryingEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RetryingEvent>>"
      description: "The <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object to set for the <code>globalRetryingEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.setGlobalSendingRequestEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.SendingRequestEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.SendingRequestEvent>>)"
  id: "setGlobalSendingRequestEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.SendingRequestEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.SendingRequestEvent>>)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setGlobalSendingRequestEventHandler(StorageEventMultiCaster<SendingRequestEvent,StorageEvent<SendingRequestEvent>> globalSendingRequestEventHandler)"
  nameWithType: "OperationContext.setGlobalSendingRequestEventHandler(StorageEventMultiCaster<SendingRequestEvent,StorageEvent<SendingRequestEvent>> globalSendingRequestEventHandler)"
  fullName: "com.microsoft.azure.storage.OperationContext.setGlobalSendingRequestEventHandler(StorageEventMultiCaster<SendingRequestEvent,StorageEvent<SendingRequestEvent>> globalSendingRequestEventHandler)"
  overload: "com.microsoft.azure.storage.OperationContext.setGlobalSendingRequestEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Sets a global event multi-caster that is triggered before sending a request."
  syntax:
    content: "public static void setGlobalSendingRequestEventHandler(StorageEventMultiCaster<SendingRequestEvent,StorageEvent<SendingRequestEvent>> globalSendingRequestEventHandler)"
    parameters:
    - id: "globalSendingRequestEventHandler"
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.SendingRequestEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.SendingRequestEvent>>"
      description: "The <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object to set for the <code>globalSendingRequestEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.setLogger(org.slf4j.Logger)"
  id: "setLogger(org.slf4j.Logger)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setLogger(Logger logger)"
  nameWithType: "OperationContext.setLogger(Logger logger)"
  fullName: "com.microsoft.azure.storage.OperationContext.setLogger(Logger logger)"
  overload: "com.microsoft.azure.storage.OperationContext.setLogger*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Sets the <xref uid=\"org.slf4j.Logger\" data-throw-if-not-resolved=\"false\">org.slf4j.Logger</xref> for this operation."
  syntax:
    content: "public void setLogger(Logger logger)"
    parameters:
    - id: "logger"
      type: "org.slf4j.Logger"
      description: "The <code><xref uid=\"org.slf4j.Logger\" data-throw-if-not-resolved=\"false\">org.slf4j.Logger</xref></code> to use for this operation."
- uid: "com.microsoft.azure.storage.OperationContext.setLoggingEnabled(boolean)"
  id: "setLoggingEnabled(boolean)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setLoggingEnabled(boolean loggingEnabled)"
  nameWithType: "OperationContext.setLoggingEnabled(boolean loggingEnabled)"
  fullName: "com.microsoft.azure.storage.OperationContext.setLoggingEnabled(boolean loggingEnabled)"
  overload: "com.microsoft.azure.storage.OperationContext.setLoggingEnabled*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Specifies whether log entries will be produced for this request."
  syntax:
    content: "public void setLoggingEnabled(boolean loggingEnabled)"
    parameters:
    - id: "loggingEnabled"
      type: "boolean"
      description: "<code>true</code> to enable logging; otherwise <code>false</code> to disable logging."
- uid: "com.microsoft.azure.storage.OperationContext.setLoggingEnabledByDefault(boolean)"
  id: "setLoggingEnabledByDefault(boolean)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setLoggingEnabledByDefault(boolean enableLoggingByDefault)"
  nameWithType: "OperationContext.setLoggingEnabledByDefault(boolean enableLoggingByDefault)"
  fullName: "com.microsoft.azure.storage.OperationContext.setLoggingEnabledByDefault(boolean enableLoggingByDefault)"
  overload: "com.microsoft.azure.storage.OperationContext.setLoggingEnabledByDefault*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Specifies whether the client library should produce log entries by default. The default can be overridden to turn on logging for an individual operation context instance by using <xref uid=\"com.microsoft.azure.storage.OperationContext.setLoggingEnabled*\" data-throw-if-not-resolved=\"false\">#setLoggingEnabled</xref>."
  syntax:
    content: "public static void setLoggingEnabledByDefault(boolean enableLoggingByDefault)"
    parameters:
    - id: "enableLoggingByDefault"
      type: "boolean"
      description: "<code>true</code> if logging should be enabled by default; otherwise <code>false</code> if logging should\n        be disabled by default."
- uid: "com.microsoft.azure.storage.OperationContext.setProxy(java.net.Proxy)"
  id: "setProxy(java.net.Proxy)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setProxy(Proxy proxy)"
  nameWithType: "OperationContext.setProxy(Proxy proxy)"
  fullName: "com.microsoft.azure.storage.OperationContext.setProxy(Proxy proxy)"
  overload: "com.microsoft.azure.storage.OperationContext.setProxy*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Sets a proxy which will be used when making a request. Default is `null`. To set a proxy to use by default, use <xref uid=\"com.microsoft.azure.storage.OperationContext.setDefaultProxy*\" data-throw-if-not-resolved=\"false\">#setDefaultProxy</xref>"
  syntax:
    content: "public void setProxy(Proxy proxy)"
    parameters:
    - id: "proxy"
      type: "java.net.Proxy"
      description: "A <xref uid=\"java.net.Proxy\" data-throw-if-not-resolved=\"false\">java.net.Proxy</xref> to use when making a request."
- uid: "com.microsoft.azure.storage.OperationContext.setRequestCompletedEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RequestCompletedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RequestCompletedEvent>>)"
  id: "setRequestCompletedEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RequestCompletedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RequestCompletedEvent>>)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setRequestCompletedEventHandler(StorageEventMultiCaster<RequestCompletedEvent,StorageEvent<RequestCompletedEvent>> requestCompletedEventHandler)"
  nameWithType: "OperationContext.setRequestCompletedEventHandler(StorageEventMultiCaster<RequestCompletedEvent,StorageEvent<RequestCompletedEvent>> requestCompletedEventHandler)"
  fullName: "com.microsoft.azure.storage.OperationContext.setRequestCompletedEventHandler(StorageEventMultiCaster<RequestCompletedEvent,StorageEvent<RequestCompletedEvent>> requestCompletedEventHandler)"
  overload: "com.microsoft.azure.storage.OperationContext.setRequestCompletedEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Sets an event multi-caster that is triggered when a request is completed."
  syntax:
    content: "public void setRequestCompletedEventHandler(StorageEventMultiCaster<RequestCompletedEvent,StorageEvent<RequestCompletedEvent>> requestCompletedEventHandler)"
    parameters:
    - id: "requestCompletedEventHandler"
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RequestCompletedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RequestCompletedEvent>>"
      description: "The <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object to set for the <code>requestCompletedEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.setResponseReceivedEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ResponseReceivedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ResponseReceivedEvent>>)"
  id: "setResponseReceivedEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ResponseReceivedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ResponseReceivedEvent>>)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setResponseReceivedEventHandler(StorageEventMultiCaster<ResponseReceivedEvent,StorageEvent<ResponseReceivedEvent>> responseReceivedEventHandler)"
  nameWithType: "OperationContext.setResponseReceivedEventHandler(StorageEventMultiCaster<ResponseReceivedEvent,StorageEvent<ResponseReceivedEvent>> responseReceivedEventHandler)"
  fullName: "com.microsoft.azure.storage.OperationContext.setResponseReceivedEventHandler(StorageEventMultiCaster<ResponseReceivedEvent,StorageEvent<ResponseReceivedEvent>> responseReceivedEventHandler)"
  overload: "com.microsoft.azure.storage.OperationContext.setResponseReceivedEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Sets an event multi-caster that is triggered when a response is received."
  syntax:
    content: "public void setResponseReceivedEventHandler(StorageEventMultiCaster<ResponseReceivedEvent,StorageEvent<ResponseReceivedEvent>> responseReceivedEventHandler)"
    parameters:
    - id: "responseReceivedEventHandler"
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ResponseReceivedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ResponseReceivedEvent>>"
      description: "The <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object to set for the <code>responseReceivedEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.setRetryingEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RetryingEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RetryingEvent>>)"
  id: "setRetryingEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RetryingEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RetryingEvent>>)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setRetryingEventHandler(StorageEventMultiCaster<RetryingEvent,StorageEvent<RetryingEvent>> retryingEventHandler)"
  nameWithType: "OperationContext.setRetryingEventHandler(StorageEventMultiCaster<RetryingEvent,StorageEvent<RetryingEvent>> retryingEventHandler)"
  fullName: "com.microsoft.azure.storage.OperationContext.setRetryingEventHandler(StorageEventMultiCaster<RetryingEvent,StorageEvent<RetryingEvent>> retryingEventHandler)"
  overload: "com.microsoft.azure.storage.OperationContext.setRetryingEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Sets an event multi-caster that is triggered when a request is retried."
  syntax:
    content: "public void setRetryingEventHandler(StorageEventMultiCaster<RetryingEvent,StorageEvent<RetryingEvent>> retryingEventHandler)"
    parameters:
    - id: "retryingEventHandler"
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RetryingEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RetryingEvent>>"
      description: "The <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object to set for the <code>retryingEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.setSendingRequestEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.SendingRequestEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.SendingRequestEvent>>)"
  id: "setSendingRequestEventHandler(com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.SendingRequestEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.SendingRequestEvent>>)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setSendingRequestEventHandler(StorageEventMultiCaster<SendingRequestEvent,StorageEvent<SendingRequestEvent>> sendingRequestEventHandler)"
  nameWithType: "OperationContext.setSendingRequestEventHandler(StorageEventMultiCaster<SendingRequestEvent,StorageEvent<SendingRequestEvent>> sendingRequestEventHandler)"
  fullName: "com.microsoft.azure.storage.OperationContext.setSendingRequestEventHandler(StorageEventMultiCaster<SendingRequestEvent,StorageEvent<SendingRequestEvent>> sendingRequestEventHandler)"
  overload: "com.microsoft.azure.storage.OperationContext.setSendingRequestEventHandler*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Sets an event multi-caster that is triggered before sending a request."
  syntax:
    content: "public void setSendingRequestEventHandler(StorageEventMultiCaster<SendingRequestEvent,StorageEvent<SendingRequestEvent>> sendingRequestEventHandler)"
    parameters:
    - id: "sendingRequestEventHandler"
      type: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.SendingRequestEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.SendingRequestEvent>>"
      description: "The <xref uid=\"com.microsoft.azure.storage.StorageEventMultiCaster\" data-throw-if-not-resolved=\"false\">StorageEventMultiCaster</xref> object to set for the <code>sendingRequestEventHandler</code>."
- uid: "com.microsoft.azure.storage.OperationContext.setUserHeaders(java.util.HashMap<java.lang.String,java.lang.String>)"
  id: "setUserHeaders(java.util.HashMap<java.lang.String,java.lang.String>)"
  parent: "com.microsoft.azure.storage.OperationContext"
  langs:
  - "java"
  name: "setUserHeaders(HashMap<String,String> userHeaders)"
  nameWithType: "OperationContext.setUserHeaders(HashMap<String,String> userHeaders)"
  fullName: "com.microsoft.azure.storage.OperationContext.setUserHeaders(HashMap<String,String> userHeaders)"
  overload: "com.microsoft.azure.storage.OperationContext.setUserHeaders*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Sets any additional headers for the request, for example, for proxy or logging information."
  syntax:
    content: "public void setUserHeaders(HashMap<String,String> userHeaders)"
    parameters:
    - id: "userHeaders"
      type: "java.util.HashMap<java.lang.String,java.lang.String>"
      description: "A <code>java.util.HashMap</code> which contains any additional headers to set."
references:
- uid: "com.microsoft.azure.storage.OperationContext.OperationContext*"
  name: "OperationContext"
  nameWithType: "OperationContext.OperationContext"
  fullName: "com.microsoft.azure.storage.OperationContext.OperationContext"
  package: "com.microsoft.azure.storage"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.microsoft.azure.storage.OperationContext.getClientRequestID*"
  name: "getClientRequestID"
  nameWithType: "OperationContext.getClientRequestID"
  fullName: "com.microsoft.azure.storage.OperationContext.getClientRequestID"
  package: "com.microsoft.azure.storage"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.microsoft.azure.storage.OperationContext.getClientTimeInMs*"
  name: "getClientTimeInMs"
  nameWithType: "OperationContext.getClientTimeInMs"
  fullName: "com.microsoft.azure.storage.OperationContext.getClientTimeInMs"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.RequestResult"
  name: "RequestResult"
  nameWithType: "RequestResult"
  fullName: "com.microsoft.azure.storage.RequestResult"
- uid: "com.microsoft.azure.storage.OperationContext.getLastResult*"
  name: "getLastResult"
  nameWithType: "OperationContext.getLastResult"
  fullName: "com.microsoft.azure.storage.OperationContext.getLastResult"
  package: "com.microsoft.azure.storage"
- uid: "org.slf4j.Logger"
  spec.java:
  - uid: "org.slf4j.Logger"
    name: "Logger"
    fullName: "org.slf4j.Logger"
- uid: "com.microsoft.azure.storage.OperationContext.getLogger*"
  name: "getLogger"
  nameWithType: "OperationContext.getLogger"
  fullName: "com.microsoft.azure.storage.OperationContext.getLogger"
  package: "com.microsoft.azure.storage"
- uid: "java.net.Proxy"
  spec.java:
  - uid: "java.net.Proxy"
    name: "Proxy"
    fullName: "java.net.Proxy"
- uid: "com.microsoft.azure.storage.OperationContext.getProxy*"
  name: "getProxy"
  nameWithType: "OperationContext.getProxy"
  fullName: "com.microsoft.azure.storage.OperationContext.getProxy"
  package: "com.microsoft.azure.storage"
- uid: "java.util.HashMap<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.HashMap"
    name: "HashMap"
    fullName: "java.util.HashMap"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.OperationContext.getUserHeaders*"
  name: "getUserHeaders"
  nameWithType: "OperationContext.getUserHeaders"
  fullName: "com.microsoft.azure.storage.OperationContext.getUserHeaders"
  package: "com.microsoft.azure.storage"
- uid: "java.util.ArrayList<com.microsoft.azure.storage.RequestResult>"
  spec.java:
  - uid: "java.util.ArrayList"
    name: "ArrayList"
    fullName: "java.util.ArrayList"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.RequestResult"
    name: "RequestResult"
    fullName: "com.microsoft.azure.storage.RequestResult"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.OperationContext.getRequestResults*"
  name: "getRequestResults"
  nameWithType: "OperationContext.getRequestResults"
  fullName: "com.microsoft.azure.storage.OperationContext.getRequestResults"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.appendRequestResult*"
  name: "appendRequestResult"
  nameWithType: "OperationContext.appendRequestResult"
  fullName: "com.microsoft.azure.storage.OperationContext.appendRequestResult"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.SendingRequestEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.SendingRequestEvent>>"
  spec.java:
  - uid: "com.microsoft.azure.storage.StorageEventMultiCaster"
    name: "StorageEventMultiCaster"
    fullName: "com.microsoft.azure.storage.StorageEventMultiCaster"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.SendingRequestEvent"
    name: "SendingRequestEvent"
    fullName: "com.microsoft.azure.storage.SendingRequestEvent"
  - name: ","
    fullName: ","
  - uid: "com.microsoft.azure.storage.StorageEvent"
    name: "StorageEvent"
    fullName: "com.microsoft.azure.storage.StorageEvent"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.SendingRequestEvent"
    name: "SendingRequestEvent"
    fullName: "com.microsoft.azure.storage.SendingRequestEvent"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.OperationContext.getGlobalSendingRequestEventHandler*"
  name: "getGlobalSendingRequestEventHandler"
  nameWithType: "OperationContext.getGlobalSendingRequestEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.getGlobalSendingRequestEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ResponseReceivedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ResponseReceivedEvent>>"
  spec.java:
  - uid: "com.microsoft.azure.storage.StorageEventMultiCaster"
    name: "StorageEventMultiCaster"
    fullName: "com.microsoft.azure.storage.StorageEventMultiCaster"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.ResponseReceivedEvent"
    name: "ResponseReceivedEvent"
    fullName: "com.microsoft.azure.storage.ResponseReceivedEvent"
  - name: ","
    fullName: ","
  - uid: "com.microsoft.azure.storage.StorageEvent"
    name: "StorageEvent"
    fullName: "com.microsoft.azure.storage.StorageEvent"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.ResponseReceivedEvent"
    name: "ResponseReceivedEvent"
    fullName: "com.microsoft.azure.storage.ResponseReceivedEvent"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.OperationContext.getGlobalResponseReceivedEventHandler*"
  name: "getGlobalResponseReceivedEventHandler"
  nameWithType: "OperationContext.getGlobalResponseReceivedEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.getGlobalResponseReceivedEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.ErrorReceivingResponseEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.ErrorReceivingResponseEvent>>"
  spec.java:
  - uid: "com.microsoft.azure.storage.StorageEventMultiCaster"
    name: "StorageEventMultiCaster"
    fullName: "com.microsoft.azure.storage.StorageEventMultiCaster"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.ErrorReceivingResponseEvent"
    name: "ErrorReceivingResponseEvent"
    fullName: "com.microsoft.azure.storage.ErrorReceivingResponseEvent"
  - name: ","
    fullName: ","
  - uid: "com.microsoft.azure.storage.StorageEvent"
    name: "StorageEvent"
    fullName: "com.microsoft.azure.storage.StorageEvent"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.ErrorReceivingResponseEvent"
    name: "ErrorReceivingResponseEvent"
    fullName: "com.microsoft.azure.storage.ErrorReceivingResponseEvent"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.OperationContext.getGlobalErrorReceivingResponseEventHandler*"
  name: "getGlobalErrorReceivingResponseEventHandler"
  nameWithType: "OperationContext.getGlobalErrorReceivingResponseEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.getGlobalErrorReceivingResponseEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RequestCompletedEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RequestCompletedEvent>>"
  spec.java:
  - uid: "com.microsoft.azure.storage.StorageEventMultiCaster"
    name: "StorageEventMultiCaster"
    fullName: "com.microsoft.azure.storage.StorageEventMultiCaster"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.RequestCompletedEvent"
    name: "RequestCompletedEvent"
    fullName: "com.microsoft.azure.storage.RequestCompletedEvent"
  - name: ","
    fullName: ","
  - uid: "com.microsoft.azure.storage.StorageEvent"
    name: "StorageEvent"
    fullName: "com.microsoft.azure.storage.StorageEvent"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.RequestCompletedEvent"
    name: "RequestCompletedEvent"
    fullName: "com.microsoft.azure.storage.RequestCompletedEvent"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.OperationContext.getGlobalRequestCompletedEventHandler*"
  name: "getGlobalRequestCompletedEventHandler"
  nameWithType: "OperationContext.getGlobalRequestCompletedEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.getGlobalRequestCompletedEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.StorageEventMultiCaster<com.microsoft.azure.storage.RetryingEvent,com.microsoft.azure.storage.StorageEvent<com.microsoft.azure.storage.RetryingEvent>>"
  spec.java:
  - uid: "com.microsoft.azure.storage.StorageEventMultiCaster"
    name: "StorageEventMultiCaster"
    fullName: "com.microsoft.azure.storage.StorageEventMultiCaster"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.RetryingEvent"
    name: "RetryingEvent"
    fullName: "com.microsoft.azure.storage.RetryingEvent"
  - name: ","
    fullName: ","
  - uid: "com.microsoft.azure.storage.StorageEvent"
    name: "StorageEvent"
    fullName: "com.microsoft.azure.storage.StorageEvent"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.RetryingEvent"
    name: "RetryingEvent"
    fullName: "com.microsoft.azure.storage.RetryingEvent"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.OperationContext.getGlobalRetryingEventHandler*"
  name: "getGlobalRetryingEventHandler"
  nameWithType: "OperationContext.getGlobalRetryingEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.getGlobalRetryingEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.getSendingRequestEventHandler*"
  name: "getSendingRequestEventHandler"
  nameWithType: "OperationContext.getSendingRequestEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.getSendingRequestEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.getResponseReceivedEventHandler*"
  name: "getResponseReceivedEventHandler"
  nameWithType: "OperationContext.getResponseReceivedEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.getResponseReceivedEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.getErrorReceivingResponseEventHandler*"
  name: "getErrorReceivingResponseEventHandler"
  nameWithType: "OperationContext.getErrorReceivingResponseEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.getErrorReceivingResponseEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.getRequestCompletedEventHandler*"
  name: "getRequestCompletedEventHandler"
  nameWithType: "OperationContext.getRequestCompletedEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.getRequestCompletedEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.getRetryingEventHandler*"
  name: "getRetryingEventHandler"
  nameWithType: "OperationContext.getRetryingEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.getRetryingEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.initialize*"
  name: "initialize"
  nameWithType: "OperationContext.initialize"
  fullName: "com.microsoft.azure.storage.OperationContext.initialize"
  package: "com.microsoft.azure.storage"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.microsoft.azure.storage.OperationContext.isLoggingEnabled*"
  name: "isLoggingEnabled"
  nameWithType: "OperationContext.isLoggingEnabled"
  fullName: "com.microsoft.azure.storage.OperationContext.isLoggingEnabled"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setClientRequestID*"
  name: "setClientRequestID"
  nameWithType: "OperationContext.setClientRequestID"
  fullName: "com.microsoft.azure.storage.OperationContext.setClientRequestID"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setClientTimeInMs*"
  name: "setClientTimeInMs"
  nameWithType: "OperationContext.setClientTimeInMs"
  fullName: "com.microsoft.azure.storage.OperationContext.setClientTimeInMs"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setLogger*"
  name: "setLogger"
  nameWithType: "OperationContext.setLogger"
  fullName: "com.microsoft.azure.storage.OperationContext.setLogger"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setProxy*"
  name: "setProxy"
  nameWithType: "OperationContext.setProxy"
  fullName: "com.microsoft.azure.storage.OperationContext.setProxy"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setUserHeaders*"
  name: "setUserHeaders"
  nameWithType: "OperationContext.setUserHeaders"
  fullName: "com.microsoft.azure.storage.OperationContext.setUserHeaders"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setLoggingEnabled*"
  name: "setLoggingEnabled"
  nameWithType: "OperationContext.setLoggingEnabled"
  fullName: "com.microsoft.azure.storage.OperationContext.setLoggingEnabled"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setGlobalSendingRequestEventHandler*"
  name: "setGlobalSendingRequestEventHandler"
  nameWithType: "OperationContext.setGlobalSendingRequestEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.setGlobalSendingRequestEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setGlobalResponseReceivedEventHandler*"
  name: "setGlobalResponseReceivedEventHandler"
  nameWithType: "OperationContext.setGlobalResponseReceivedEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.setGlobalResponseReceivedEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setGlobalErrorReceivingResponseEventHandler*"
  name: "setGlobalErrorReceivingResponseEventHandler"
  nameWithType: "OperationContext.setGlobalErrorReceivingResponseEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.setGlobalErrorReceivingResponseEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setGlobalRequestCompletedEventHandler*"
  name: "setGlobalRequestCompletedEventHandler"
  nameWithType: "OperationContext.setGlobalRequestCompletedEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.setGlobalRequestCompletedEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setGlobalRetryingEventHandler*"
  name: "setGlobalRetryingEventHandler"
  nameWithType: "OperationContext.setGlobalRetryingEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.setGlobalRetryingEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setSendingRequestEventHandler*"
  name: "setSendingRequestEventHandler"
  nameWithType: "OperationContext.setSendingRequestEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.setSendingRequestEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setResponseReceivedEventHandler*"
  name: "setResponseReceivedEventHandler"
  nameWithType: "OperationContext.setResponseReceivedEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.setResponseReceivedEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setErrorReceivingResponseEventHandler*"
  name: "setErrorReceivingResponseEventHandler"
  nameWithType: "OperationContext.setErrorReceivingResponseEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.setErrorReceivingResponseEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setRequestCompletedEventHandler*"
  name: "setRequestCompletedEventHandler"
  nameWithType: "OperationContext.setRequestCompletedEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.setRequestCompletedEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setRetryingEventHandler*"
  name: "setRetryingEventHandler"
  nameWithType: "OperationContext.setRetryingEventHandler"
  fullName: "com.microsoft.azure.storage.OperationContext.setRetryingEventHandler"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.isLoggingEnabledByDefault*"
  name: "isLoggingEnabledByDefault"
  nameWithType: "OperationContext.isLoggingEnabledByDefault"
  fullName: "com.microsoft.azure.storage.OperationContext.isLoggingEnabledByDefault"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setLoggingEnabledByDefault*"
  name: "setLoggingEnabledByDefault"
  nameWithType: "OperationContext.setLoggingEnabledByDefault"
  fullName: "com.microsoft.azure.storage.OperationContext.setLoggingEnabledByDefault"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.getDefaultProxy*"
  name: "getDefaultProxy"
  nameWithType: "OperationContext.getDefaultProxy"
  fullName: "com.microsoft.azure.storage.OperationContext.getDefaultProxy"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.OperationContext.setDefaultProxy*"
  name: "setDefaultProxy"
  nameWithType: "OperationContext.setDefaultProxy"
  fullName: "com.microsoft.azure.storage.OperationContext.setDefaultProxy"
  package: "com.microsoft.azure.storage"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.HashMap"
  name: "HashMap"
  nameWithType: "HashMap"
  fullName: "java.util.HashMap"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
- uid: "java.util.ArrayList"
  name: "ArrayList"
  nameWithType: "ArrayList"
  fullName: "java.util.ArrayList"
- uid: "com.microsoft.azure.storage.StorageEventMultiCaster"
  name: "StorageEventMultiCaster"
  nameWithType: "StorageEventMultiCaster"
  fullName: "com.microsoft.azure.storage.StorageEventMultiCaster"
- uid: "com.microsoft.azure.storage.SendingRequestEvent,com.microsoft.azure.storage.StorageEvent"
  name: "SendingRequestEvent,StorageEvent"
  nameWithType: "SendingRequestEvent,StorageEvent"
  fullName: "com.microsoft.azure.storage.SendingRequestEvent,com.microsoft.azure.storage.StorageEvent"
- uid: "com.microsoft.azure.storage.SendingRequestEvent"
  name: "SendingRequestEvent"
  nameWithType: "SendingRequestEvent"
  fullName: "com.microsoft.azure.storage.SendingRequestEvent"
- uid: "com.microsoft.azure.storage.ResponseReceivedEvent,com.microsoft.azure.storage.StorageEvent"
  name: "ResponseReceivedEvent,StorageEvent"
  nameWithType: "ResponseReceivedEvent,StorageEvent"
  fullName: "com.microsoft.azure.storage.ResponseReceivedEvent,com.microsoft.azure.storage.StorageEvent"
- uid: "com.microsoft.azure.storage.ResponseReceivedEvent"
  name: "ResponseReceivedEvent"
  nameWithType: "ResponseReceivedEvent"
  fullName: "com.microsoft.azure.storage.ResponseReceivedEvent"
- uid: "com.microsoft.azure.storage.ErrorReceivingResponseEvent"
  name: "ErrorReceivingResponseEvent"
  nameWithType: "ErrorReceivingResponseEvent"
  fullName: "com.microsoft.azure.storage.ErrorReceivingResponseEvent"
- uid: "com.microsoft.azure.storage.ErrorReceivingResponseEvent,com.microsoft.azure.storage.StorageEvent"
  name: "ErrorReceivingResponseEvent,StorageEvent"
  nameWithType: "ErrorReceivingResponseEvent,StorageEvent"
  fullName: "com.microsoft.azure.storage.ErrorReceivingResponseEvent,com.microsoft.azure.storage.StorageEvent"
- uid: "com.microsoft.azure.storage.RequestCompletedEvent"
  name: "RequestCompletedEvent"
  nameWithType: "RequestCompletedEvent"
  fullName: "com.microsoft.azure.storage.RequestCompletedEvent"
- uid: "com.microsoft.azure.storage.RequestCompletedEvent,com.microsoft.azure.storage.StorageEvent"
  name: "RequestCompletedEvent,StorageEvent"
  nameWithType: "RequestCompletedEvent,StorageEvent"
  fullName: "com.microsoft.azure.storage.RequestCompletedEvent,com.microsoft.azure.storage.StorageEvent"
- uid: "com.microsoft.azure.storage.RetryingEvent,com.microsoft.azure.storage.StorageEvent"
  name: "RetryingEvent,StorageEvent"
  nameWithType: "RetryingEvent,StorageEvent"
  fullName: "com.microsoft.azure.storage.RetryingEvent,com.microsoft.azure.storage.StorageEvent"
- uid: "com.microsoft.azure.storage.RetryingEvent"
  name: "RetryingEvent"
  nameWithType: "RetryingEvent"
  fullName: "com.microsoft.azure.storage.RetryingEvent"
