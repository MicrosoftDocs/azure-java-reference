### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy"
  id: "QueueEncryptionPolicy"
  parent: "com.microsoft.azure.storage.queue"
  children:
  - "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.QueueEncryptionPolicy(com.microsoft.azure.keyvault.core.IKey,com.microsoft.azure.keyvault.core.IKeyResolver)"
  - "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.decryptMessage(java.lang.String,java.lang.Boolean)"
  - "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.encryptMessage(byte[])"
  - "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.getKey()"
  - "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.getKeyResolver()"
  - "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.keyResolver"
  - "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.keyWrapper"
  - "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.setKey(com.microsoft.azure.keyvault.core.IKey)"
  - "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.setKeyResolver(com.microsoft.azure.keyvault.core.IKeyResolver)"
  langs:
  - "java"
  name: "QueueEncryptionPolicy"
  nameWithType: "QueueEncryptionPolicy"
  fullName: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy"
  type: "Class"
  package: "com.microsoft.azure.storage.queue"
  summary: "Represents a queue encryption policy that is used to perform envelope encryption/decryption of Azure queue messages."
  syntax:
    content: "public final class QueueEncryptionPolicy"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.QueueEncryptionPolicy(com.microsoft.azure.keyvault.core.IKey,com.microsoft.azure.keyvault.core.IKeyResolver)"
  id: "QueueEncryptionPolicy(com.microsoft.azure.keyvault.core.IKey,com.microsoft.azure.keyvault.core.IKeyResolver)"
  parent: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy"
  langs:
  - "java"
  name: "QueueEncryptionPolicy(IKey key, IKeyResolver keyResolver)"
  nameWithType: "QueueEncryptionPolicy.QueueEncryptionPolicy(IKey key, IKeyResolver keyResolver)"
  fullName: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.QueueEncryptionPolicy(IKey key, IKeyResolver keyResolver)"
  overload: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.QueueEncryptionPolicy*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.queue"
  summary: "Initializes a new instance of the <xref uid=\"com.microsoft.azure.storage.queue.QueueEncryptionPolicy\" data-throw-if-not-resolved=\"false\">QueueEncryptionPolicy</xref> class with the specified key and resolver.\n\nIf the generated policy is intended to be used for encryption, users are expected to provide a key at the minimum. The absence of key will cause an exception to be thrown during encryption. If the generated policy is intended to be used for decryption, users can provide a keyResolver. The client library will - 1. Invoke the key resolver if specified to get the key. 2. If resolver is not specified but a key is specified, match the key id on the key and use it."
  syntax:
    content: "public QueueEncryptionPolicy(IKey key, IKeyResolver keyResolver)"
    parameters:
    - id: "key"
      type: "com.microsoft.azure.keyvault.core.IKey"
      description: "An object of type <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> that is used to wrap/unwrap the content encryption key."
    - id: "keyResolver"
      type: "com.microsoft.azure.keyvault.core.IKeyResolver"
      description: "The key resolver used to select the correct key for decrypting existing queue messages."
- uid: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.decryptMessage(java.lang.String,java.lang.Boolean)"
  id: "decryptMessage(java.lang.String,java.lang.Boolean)"
  parent: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy"
  langs:
  - "java"
  name: "decryptMessage(String inputMessage, Boolean requireEncryption)"
  nameWithType: "QueueEncryptionPolicy.decryptMessage(String inputMessage, Boolean requireEncryption)"
  fullName: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.decryptMessage(String inputMessage, Boolean requireEncryption)"
  overload: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.decryptMessage*"
  type: "Method"
  package: "com.microsoft.azure.storage.queue"
  summary: "Returns a plain text message given an encrypted message."
  syntax:
    content: " byte[] decryptMessage(String inputMessage, Boolean requireEncryption)"
    parameters:
    - id: "inputMessage"
      type: "java.lang.String"
      description: "The encrypted message."
    - id: "requireEncryption"
      type: "java.lang.Boolean"
      description: "A value to indicate that the data read from the server should be encrypted."
    return:
      type: "byte[]"
      description: "The plain text message bytes."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "An exception representing any error which occurred during the operation."
- uid: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.encryptMessage(byte[])"
  id: "encryptMessage(byte[])"
  parent: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy"
  langs:
  - "java"
  name: "encryptMessage(byte[] inputMessage)"
  nameWithType: "QueueEncryptionPolicy.encryptMessage(byte[] inputMessage)"
  fullName: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.encryptMessage(byte[] inputMessage)"
  overload: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.encryptMessage*"
  type: "Method"
  package: "com.microsoft.azure.storage.queue"
  summary: "Return an encrypted base64 encoded message along with encryption related metadata given a plain text message."
  syntax:
    content: " String encryptMessage(byte[] inputMessage)"
    parameters:
    - id: "inputMessage"
      type: "byte[]"
      description: "The input message in bytes."
    return:
      type: "java.lang.String"
      description: "The encrypted message that will be uploaded to the service."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "An exception representing any error which occurred during the operation."
- uid: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.getKey()"
  id: "getKey()"
  parent: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy"
  langs:
  - "java"
  name: "getKey()"
  nameWithType: "QueueEncryptionPolicy.getKey()"
  fullName: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.getKey()"
  overload: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.getKey*"
  type: "Method"
  package: "com.microsoft.azure.storage.queue"
  summary: "Gets the <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> that is used to wrap/unwrap the content key during encryption."
  syntax:
    content: "public IKey getKey()"
    return:
      type: "com.microsoft.azure.keyvault.core.IKey"
      description: "An <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> object."
- uid: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.getKeyResolver()"
  id: "getKeyResolver()"
  parent: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy"
  langs:
  - "java"
  name: "getKeyResolver()"
  nameWithType: "QueueEncryptionPolicy.getKeyResolver()"
  fullName: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.getKeyResolver()"
  overload: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.getKeyResolver*"
  type: "Method"
  package: "com.microsoft.azure.storage.queue"
  summary: "Gets the key resolver used to select the correct key for decrypting existing queue messages."
  syntax:
    content: "public IKeyResolver getKeyResolver()"
    return:
      type: "com.microsoft.azure.keyvault.core.IKeyResolver"
      description: "A resolver that returns an <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> given a keyId."
- uid: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.keyResolver"
  id: "keyResolver"
  parent: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy"
  langs:
  - "java"
  name: "keyResolver"
  nameWithType: "QueueEncryptionPolicy.keyResolver"
  fullName: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.keyResolver"
  type: "Field"
  package: "com.microsoft.azure.storage.queue"
  summary: "The <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKeyResolver</xref> used to select the correct key for decrypting existing queue messages."
  syntax:
    content: "public IKeyResolver keyResolver"
    return:
      type: "com.microsoft.azure.keyvault.core.IKeyResolver"
- uid: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.keyWrapper"
  id: "keyWrapper"
  parent: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy"
  langs:
  - "java"
  name: "keyWrapper"
  nameWithType: "QueueEncryptionPolicy.keyWrapper"
  fullName: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.keyWrapper"
  type: "Field"
  package: "com.microsoft.azure.storage.queue"
  summary: "An object of type <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> that is used to wrap/unwrap the content key during encryption."
  syntax:
    content: "public IKey keyWrapper"
    return:
      type: "com.microsoft.azure.keyvault.core.IKey"
- uid: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.setKey(com.microsoft.azure.keyvault.core.IKey)"
  id: "setKey(com.microsoft.azure.keyvault.core.IKey)"
  parent: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy"
  langs:
  - "java"
  name: "setKey(IKey key)"
  nameWithType: "QueueEncryptionPolicy.setKey(IKey key)"
  fullName: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.setKey(IKey key)"
  overload: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.setKey*"
  type: "Method"
  package: "com.microsoft.azure.storage.queue"
  summary: "Sets the <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> that is used to wrap/unwrap the content key during encryption."
  syntax:
    content: "public void setKey(IKey key)"
    parameters:
    - id: "key"
      type: "com.microsoft.azure.keyvault.core.IKey"
      description: "An <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> object."
- uid: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.setKeyResolver(com.microsoft.azure.keyvault.core.IKeyResolver)"
  id: "setKeyResolver(com.microsoft.azure.keyvault.core.IKeyResolver)"
  parent: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy"
  langs:
  - "java"
  name: "setKeyResolver(IKeyResolver keyResolver)"
  nameWithType: "QueueEncryptionPolicy.setKeyResolver(IKeyResolver keyResolver)"
  fullName: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.setKeyResolver(IKeyResolver keyResolver)"
  overload: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.setKeyResolver*"
  type: "Method"
  package: "com.microsoft.azure.storage.queue"
  summary: "Sets the key resolver used to select the correct key for decrypting existing queue messages."
  syntax:
    content: "public void setKeyResolver(IKeyResolver keyResolver)"
    parameters:
    - id: "keyResolver"
      type: "com.microsoft.azure.keyvault.core.IKeyResolver"
      description: "A resolver that returns an <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> given a keyId."
references:
- uid: "com.microsoft.azure.keyvault.core.IKey"
  spec.java:
  - uid: "com.microsoft.azure.keyvault.core.IKey"
    name: "IKey"
    fullName: "com.microsoft.azure.keyvault.core.IKey"
- uid: "com.microsoft.azure.keyvault.core.IKeyResolver"
  spec.java:
  - uid: "com.microsoft.azure.keyvault.core.IKeyResolver"
    name: "IKeyResolver"
    fullName: "com.microsoft.azure.keyvault.core.IKeyResolver"
- uid: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.QueueEncryptionPolicy*"
  name: "QueueEncryptionPolicy"
  nameWithType: "QueueEncryptionPolicy.QueueEncryptionPolicy"
  fullName: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.QueueEncryptionPolicy"
  package: "com.microsoft.azure.storage.queue"
- uid: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.getKey*"
  name: "getKey"
  nameWithType: "QueueEncryptionPolicy.getKey"
  fullName: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.getKey"
  package: "com.microsoft.azure.storage.queue"
- uid: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.getKeyResolver*"
  name: "getKeyResolver"
  nameWithType: "QueueEncryptionPolicy.getKeyResolver"
  fullName: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.getKeyResolver"
  package: "com.microsoft.azure.storage.queue"
- uid: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.setKey*"
  name: "setKey"
  nameWithType: "QueueEncryptionPolicy.setKey"
  fullName: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.setKey"
  package: "com.microsoft.azure.storage.queue"
- uid: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.setKeyResolver*"
  name: "setKeyResolver"
  nameWithType: "QueueEncryptionPolicy.setKeyResolver"
  fullName: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.setKeyResolver"
  package: "com.microsoft.azure.storage.queue"
- uid: "com.microsoft.azure.storage.StorageException"
  name: "StorageException"
  nameWithType: "StorageException"
  fullName: "com.microsoft.azure.storage.StorageException"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.encryptMessage*"
  name: "encryptMessage"
  nameWithType: "QueueEncryptionPolicy.encryptMessage"
  fullName: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.encryptMessage"
  package: "com.microsoft.azure.storage.queue"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.decryptMessage*"
  name: "decryptMessage"
  nameWithType: "QueueEncryptionPolicy.decryptMessage"
  fullName: "com.microsoft.azure.storage.queue.QueueEncryptionPolicy.decryptMessage"
  package: "com.microsoft.azure.storage.queue"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
