### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.blob.LeaseState"
  id: "LeaseState"
  parent: "com.microsoft.azure.storage.blob"
  children:
  - "com.microsoft.azure.storage.blob.LeaseState.AVAILABLE"
  - "com.microsoft.azure.storage.blob.LeaseState.BREAKING"
  - "com.microsoft.azure.storage.blob.LeaseState.BROKEN"
  - "com.microsoft.azure.storage.blob.LeaseState.EXPIRED"
  - "com.microsoft.azure.storage.blob.LeaseState.LEASED"
  - "com.microsoft.azure.storage.blob.LeaseState.UNSPECIFIED"
  - "com.microsoft.azure.storage.blob.LeaseState.parse(java.lang.String)"
  - "com.microsoft.azure.storage.blob.LeaseState.valueOf(java.lang.String)"
  - "com.microsoft.azure.storage.blob.LeaseState.values()"
  langs:
  - "java"
  name: "LeaseState"
  nameWithType: "LeaseState"
  fullName: "com.microsoft.azure.storage.blob.LeaseState"
  type: "Enum"
  package: "com.microsoft.azure.storage.blob"
  summary: "The lease state of a resource."
  syntax:
    content: "public enum LeaseState extends Enum<LeaseState>"
  inheritance:
  - "java.lang.Object"
  - "java.lang.Enum"
  inheritedMembers:
  - "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
  - "java.lang.Enum.clone()"
  - "java.lang.Enum.compareTo(E)"
  - "java.lang.Enum.equals(java.lang.Object)"
  - "java.lang.Enum.finalize()"
  - "java.lang.Enum.getDeclaringClass()"
  - "java.lang.Enum.hashCode()"
  - "java.lang.Enum.name()"
  - "java.lang.Enum.ordinal()"
  - "java.lang.Enum.toString()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.blob.LeaseState.AVAILABLE"
  id: "AVAILABLE"
  parent: "com.microsoft.azure.storage.blob.LeaseState"
  langs:
  - "java"
  name: "AVAILABLE"
  nameWithType: "LeaseState.AVAILABLE"
  fullName: "com.microsoft.azure.storage.blob.LeaseState.AVAILABLE"
  type: "Field"
  package: "com.microsoft.azure.storage.blob"
  summary: "The lease is in the Available state."
  syntax:
    content: "public static final LeaseState AVAILABLE"
    return:
      type: "com.microsoft.azure.storage.blob.LeaseState"
- uid: "com.microsoft.azure.storage.blob.LeaseState.BREAKING"
  id: "BREAKING"
  parent: "com.microsoft.azure.storage.blob.LeaseState"
  langs:
  - "java"
  name: "BREAKING"
  nameWithType: "LeaseState.BREAKING"
  fullName: "com.microsoft.azure.storage.blob.LeaseState.BREAKING"
  type: "Field"
  package: "com.microsoft.azure.storage.blob"
  summary: "The lease is in the Breaking state."
  syntax:
    content: "public static final LeaseState BREAKING"
    return:
      type: "com.microsoft.azure.storage.blob.LeaseState"
- uid: "com.microsoft.azure.storage.blob.LeaseState.BROKEN"
  id: "BROKEN"
  parent: "com.microsoft.azure.storage.blob.LeaseState"
  langs:
  - "java"
  name: "BROKEN"
  nameWithType: "LeaseState.BROKEN"
  fullName: "com.microsoft.azure.storage.blob.LeaseState.BROKEN"
  type: "Field"
  package: "com.microsoft.azure.storage.blob"
  summary: "The lease is in the Broken state."
  syntax:
    content: "public static final LeaseState BROKEN"
    return:
      type: "com.microsoft.azure.storage.blob.LeaseState"
- uid: "com.microsoft.azure.storage.blob.LeaseState.EXPIRED"
  id: "EXPIRED"
  parent: "com.microsoft.azure.storage.blob.LeaseState"
  langs:
  - "java"
  name: "EXPIRED"
  nameWithType: "LeaseState.EXPIRED"
  fullName: "com.microsoft.azure.storage.blob.LeaseState.EXPIRED"
  type: "Field"
  package: "com.microsoft.azure.storage.blob"
  summary: "The lease is in the Expired state."
  syntax:
    content: "public static final LeaseState EXPIRED"
    return:
      type: "com.microsoft.azure.storage.blob.LeaseState"
- uid: "com.microsoft.azure.storage.blob.LeaseState.LEASED"
  id: "LEASED"
  parent: "com.microsoft.azure.storage.blob.LeaseState"
  langs:
  - "java"
  name: "LEASED"
  nameWithType: "LeaseState.LEASED"
  fullName: "com.microsoft.azure.storage.blob.LeaseState.LEASED"
  type: "Field"
  package: "com.microsoft.azure.storage.blob"
  summary: "The lease is in the Leased state."
  syntax:
    content: "public static final LeaseState LEASED"
    return:
      type: "com.microsoft.azure.storage.blob.LeaseState"
- uid: "com.microsoft.azure.storage.blob.LeaseState.LeaseState()"
  id: "LeaseState()"
  parent: "com.microsoft.azure.storage.blob.LeaseState"
  langs:
  - "java"
  name: "LeaseState()"
  nameWithType: "LeaseState.LeaseState()"
  fullName: "com.microsoft.azure.storage.blob.LeaseState.LeaseState()"
  overload: "com.microsoft.azure.storage.blob.LeaseState.LeaseState*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  syntax:
    content: "private LeaseState()"
- uid: "com.microsoft.azure.storage.blob.LeaseState.UNSPECIFIED"
  id: "UNSPECIFIED"
  parent: "com.microsoft.azure.storage.blob.LeaseState"
  langs:
  - "java"
  name: "UNSPECIFIED"
  nameWithType: "LeaseState.UNSPECIFIED"
  fullName: "com.microsoft.azure.storage.blob.LeaseState.UNSPECIFIED"
  type: "Field"
  package: "com.microsoft.azure.storage.blob"
  summary: "The lease state is not specified."
  syntax:
    content: "public static final LeaseState UNSPECIFIED"
    return:
      type: "com.microsoft.azure.storage.blob.LeaseState"
- uid: "com.microsoft.azure.storage.blob.LeaseState.parse(java.lang.String)"
  id: "parse(java.lang.String)"
  parent: "com.microsoft.azure.storage.blob.LeaseState"
  langs:
  - "java"
  name: "parse(String typeString)"
  nameWithType: "LeaseState.parse(String typeString)"
  fullName: "com.microsoft.azure.storage.blob.LeaseState.parse(String typeString)"
  overload: "com.microsoft.azure.storage.blob.LeaseState.parse*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Parses a lease state from the given string."
  syntax:
    content: "protected static LeaseState parse(String typeString)"
    parameters:
    - id: "typeString"
      type: "java.lang.String"
      description: "A <code>String</code> which contains the lease state to parse."
    return:
      type: "com.microsoft.azure.storage.blob.LeaseState"
      description: "A <code>LeaseStatus</code> value that represents the lease status."
- uid: "com.microsoft.azure.storage.blob.LeaseState.valueOf(java.lang.String)"
  id: "valueOf(java.lang.String)"
  parent: "com.microsoft.azure.storage.blob.LeaseState"
  langs:
  - "java"
  name: "valueOf(String name)"
  nameWithType: "LeaseState.valueOf(String name)"
  fullName: "com.microsoft.azure.storage.blob.LeaseState.valueOf(String name)"
  overload: "com.microsoft.azure.storage.blob.LeaseState.valueOf*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  syntax:
    content: "public static LeaseState valueOf(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    return:
      type: "com.microsoft.azure.storage.blob.LeaseState"
- uid: "com.microsoft.azure.storage.blob.LeaseState.values()"
  id: "values()"
  parent: "com.microsoft.azure.storage.blob.LeaseState"
  langs:
  - "java"
  name: "values()"
  nameWithType: "LeaseState.values()"
  fullName: "com.microsoft.azure.storage.blob.LeaseState.values()"
  overload: "com.microsoft.azure.storage.blob.LeaseState.values*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  syntax:
    content: "public static LeaseState[] values()"
    return:
      type: "com.microsoft.azure.storage.blob.LeaseState[]"
references:
- uid: "com.microsoft.azure.storage.blob.LeaseState.LeaseState*"
  name: "LeaseState"
  nameWithType: "LeaseState.LeaseState"
  fullName: "com.microsoft.azure.storage.blob.LeaseState.LeaseState"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.LeaseState[]"
  spec.java:
  - uid: "com.microsoft.azure.storage.blob.LeaseState"
    name: "LeaseState"
    fullName: "com.microsoft.azure.storage.blob.LeaseState"
  - name: "[]"
    fullName: "[]"
- uid: "com.microsoft.azure.storage.blob.LeaseState.values*"
  name: "values"
  nameWithType: "LeaseState.values"
  fullName: "com.microsoft.azure.storage.blob.LeaseState.values"
  package: "com.microsoft.azure.storage.blob"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.microsoft.azure.storage.blob.LeaseState.valueOf*"
  name: "valueOf"
  nameWithType: "LeaseState.valueOf"
  fullName: "com.microsoft.azure.storage.blob.LeaseState.valueOf"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.LeaseState.parse*"
  name: "parse"
  nameWithType: "LeaseState.parse"
  fullName: "com.microsoft.azure.storage.blob.LeaseState.parse"
  package: "com.microsoft.azure.storage.blob"
- uid: "java.lang.Enum<com.microsoft.azure.storage.blob.LeaseState>"
  name: "Enum<LeaseState>"
  nameWithType: "Enum<LeaseState>"
  fullName: "java.lang.Enum<com.microsoft.azure.storage.blob.LeaseState>"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Enum.toString()"
  name: "Enum.toString()"
  nameWithType: "Enum.toString()"
  fullName: "java.lang.Enum.toString()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Enum.clone()"
  name: "Enum.clone()"
  nameWithType: "Enum.clone()"
  fullName: "java.lang.Enum.clone()"
- uid: "java.lang.Enum.finalize()"
  name: "Enum.finalize()"
  nameWithType: "Enum.finalize()"
  fullName: "java.lang.Enum.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Enum.compareTo(E)"
  name: "Enum.compareTo(E)"
  nameWithType: "Enum.compareTo(E)"
  fullName: "java.lang.Enum.compareTo(E)"
- uid: "java.lang.Enum.name()"
  name: "Enum.name()"
  nameWithType: "Enum.name()"
  fullName: "java.lang.Enum.name()"
- uid: "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
  name: "Enum.<T>valueOf(Class<T>,String)"
  nameWithType: "Enum.<T>valueOf(Class<T>,String)"
  fullName: "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Enum.getDeclaringClass()"
  name: "Enum.getDeclaringClass()"
  nameWithType: "Enum.getDeclaringClass()"
  fullName: "java.lang.Enum.getDeclaringClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Enum.ordinal()"
  name: "Enum.ordinal()"
  nameWithType: "Enum.ordinal()"
  fullName: "java.lang.Enum.ordinal()"
- uid: "java.lang.Enum.hashCode()"
  name: "Enum.hashCode()"
  nameWithType: "Enum.hashCode()"
  fullName: "java.lang.Enum.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Enum.equals(java.lang.Object)"
  name: "Enum.equals(Object)"
  nameWithType: "Enum.equals(Object)"
  fullName: "java.lang.Enum.equals(java.lang.Object)"
- uid: "java.lang.Enum"
  name: "Enum"
  nameWithType: "Enum"
  fullName: "java.lang.Enum"
- uid: "java.lang.Enum."
  name: "Enum."
  nameWithType: "Enum."
  fullName: "java.lang.Enum."
- uid: "T>,java.lang.String)"
  name: "T>,String)"
  nameWithType: "T>,String)"
  fullName: "T>,java.lang.String)"
- uid: "T>valueOf(java.lang.Class"
  name: "T>valueOf(Class"
  nameWithType: "T>valueOf(Class"
  fullName: "T>valueOf(java.lang.Class"
