### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.core.WrappedContentKey"
  id: "WrappedContentKey"
  parent: "com.microsoft.azure.storage.core"
  children:
  - "com.microsoft.azure.storage.core.WrappedContentKey.WrappedContentKey()"
  - "com.microsoft.azure.storage.core.WrappedContentKey.WrappedContentKey(java.lang.String,byte[],java.lang.String)"
  - "com.microsoft.azure.storage.core.WrappedContentKey.algorithm"
  - "com.microsoft.azure.storage.core.WrappedContentKey.deserialize(com.fasterxml.jackson.core.JsonParser)"
  - "com.microsoft.azure.storage.core.WrappedContentKey.encryptedKey"
  - "com.microsoft.azure.storage.core.WrappedContentKey.getAlgorithm()"
  - "com.microsoft.azure.storage.core.WrappedContentKey.getEncryptedKey()"
  - "com.microsoft.azure.storage.core.WrappedContentKey.getKeyId()"
  - "com.microsoft.azure.storage.core.WrappedContentKey.keyId"
  - "com.microsoft.azure.storage.core.WrappedContentKey.serialize(com.fasterxml.jackson.core.JsonGenerator)"
  - "com.microsoft.azure.storage.core.WrappedContentKey.setAlgorithm(java.lang.String)"
  - "com.microsoft.azure.storage.core.WrappedContentKey.setEncryptedKey(byte[])"
  - "com.microsoft.azure.storage.core.WrappedContentKey.setKeyId(java.lang.String)"
  langs:
  - "java"
  name: "WrappedContentKey"
  nameWithType: "WrappedContentKey"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey"
  type: "Class"
  package: "com.microsoft.azure.storage.core"
  summary: "RESERVED FOR INTERNAL USE. Represents the envelope key details stored on the service."
  syntax:
    content: "public class WrappedContentKey"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.WrappedContentKey()"
  id: "WrappedContentKey()"
  parent: "com.microsoft.azure.storage.core.WrappedContentKey"
  langs:
  - "java"
  name: "WrappedContentKey()"
  nameWithType: "WrappedContentKey.WrappedContentKey()"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.WrappedContentKey()"
  overload: "com.microsoft.azure.storage.core.WrappedContentKey.WrappedContentKey*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.core"
  summary: "Initializes a new instance of the <xref uid=\"com.microsoft.azure.storage.core.WrappedContentKey\" data-throw-if-not-resolved=\"false\">WrappedContentKey</xref> class."
  syntax:
    content: "public WrappedContentKey()"
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.WrappedContentKey(java.lang.String,byte[],java.lang.String)"
  id: "WrappedContentKey(java.lang.String,byte[],java.lang.String)"
  parent: "com.microsoft.azure.storage.core.WrappedContentKey"
  langs:
  - "java"
  name: "WrappedContentKey(String keyId, byte[] encryptedKey, String algorithm)"
  nameWithType: "WrappedContentKey.WrappedContentKey(String keyId, byte[] encryptedKey, String algorithm)"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.WrappedContentKey(String keyId, byte[] encryptedKey, String algorithm)"
  overload: "com.microsoft.azure.storage.core.WrappedContentKey.WrappedContentKey*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.core"
  summary: "Initializes a new instance of the <xref uid=\"com.microsoft.azure.storage.core.WrappedContentKey\" data-throw-if-not-resolved=\"false\">WrappedContentKey</xref> class using the specified key id, encrypted key and the algorithm."
  syntax:
    content: "public WrappedContentKey(String keyId, byte[] encryptedKey, String algorithm)"
    parameters:
    - id: "keyId"
      type: "java.lang.String"
      description: "The key identifier string."
    - id: "encryptedKey"
      type: "byte[]"
      description: "The encrypted content encryption key."
    - id: "algorithm"
      type: "java.lang.String"
      description: "The algorithm used for wrapping."
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.algorithm"
  id: "algorithm"
  parent: "com.microsoft.azure.storage.core.WrappedContentKey"
  langs:
  - "java"
  name: "algorithm"
  nameWithType: "WrappedContentKey.algorithm"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.algorithm"
  type: "Field"
  package: "com.microsoft.azure.storage.core"
  summary: "The algorithm used for wrapping."
  syntax:
    content: "public String algorithm"
    return:
      type: "java.lang.String"
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.deserialize(com.fasterxml.jackson.core.JsonParser)"
  id: "deserialize(com.fasterxml.jackson.core.JsonParser)"
  parent: "com.microsoft.azure.storage.core.WrappedContentKey"
  langs:
  - "java"
  name: "deserialize(JsonParser parser)"
  nameWithType: "WrappedContentKey.deserialize(JsonParser parser)"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.deserialize(JsonParser parser)"
  overload: "com.microsoft.azure.storage.core.WrappedContentKey.deserialize*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  syntax:
    content: "public static WrappedContentKey deserialize(JsonParser parser)"
    parameters:
    - id: "parser"
      type: "com.fasterxml.jackson.core.JsonParser"
    return:
      type: "com.microsoft.azure.storage.core.WrappedContentKey"
  exceptions:
  - type: "com.fasterxml.jackson.core.JsonParseException"
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.encryptedKey"
  id: "encryptedKey"
  parent: "com.microsoft.azure.storage.core.WrappedContentKey"
  langs:
  - "java"
  name: "encryptedKey"
  nameWithType: "WrappedContentKey.encryptedKey"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.encryptedKey"
  type: "Field"
  package: "com.microsoft.azure.storage.core"
  summary: "The encrypted content encryption key."
  syntax:
    content: "public byte[] encryptedKey"
    return:
      type: "byte[]"
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.getAlgorithm()"
  id: "getAlgorithm()"
  parent: "com.microsoft.azure.storage.core.WrappedContentKey"
  langs:
  - "java"
  name: "getAlgorithm()"
  nameWithType: "WrappedContentKey.getAlgorithm()"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.getAlgorithm()"
  overload: "com.microsoft.azure.storage.core.WrappedContentKey.getAlgorithm*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  summary: "Gets the algorithm used for wrapping."
  syntax:
    content: "public String getAlgorithm()"
    return:
      type: "java.lang.String"
      description: "The algorithm used for wrapping."
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.getEncryptedKey()"
  id: "getEncryptedKey()"
  parent: "com.microsoft.azure.storage.core.WrappedContentKey"
  langs:
  - "java"
  name: "getEncryptedKey()"
  nameWithType: "WrappedContentKey.getEncryptedKey()"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.getEncryptedKey()"
  overload: "com.microsoft.azure.storage.core.WrappedContentKey.getEncryptedKey*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  summary: "Gets the encrypted content encryption key."
  syntax:
    content: "public byte[] getEncryptedKey()"
    return:
      type: "byte[]"
      description: "The encrypted content encryption key."
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.getKeyId()"
  id: "getKeyId()"
  parent: "com.microsoft.azure.storage.core.WrappedContentKey"
  langs:
  - "java"
  name: "getKeyId()"
  nameWithType: "WrappedContentKey.getKeyId()"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.getKeyId()"
  overload: "com.microsoft.azure.storage.core.WrappedContentKey.getKeyId*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  summary: "Gets the key identifier. This identifier is used to identify the key that is used to wrap/unwrap the content encryption key."
  syntax:
    content: "public String getKeyId()"
    return:
      type: "java.lang.String"
      description: "The key identifier string."
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.keyId"
  id: "keyId"
  parent: "com.microsoft.azure.storage.core.WrappedContentKey"
  langs:
  - "java"
  name: "keyId"
  nameWithType: "WrappedContentKey.keyId"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.keyId"
  type: "Field"
  package: "com.microsoft.azure.storage.core"
  summary: "The key identifier string."
  syntax:
    content: "public String keyId"
    return:
      type: "java.lang.String"
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.serialize(com.fasterxml.jackson.core.JsonGenerator)"
  id: "serialize(com.fasterxml.jackson.core.JsonGenerator)"
  parent: "com.microsoft.azure.storage.core.WrappedContentKey"
  langs:
  - "java"
  name: "serialize(JsonGenerator generator)"
  nameWithType: "WrappedContentKey.serialize(JsonGenerator generator)"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.serialize(JsonGenerator generator)"
  overload: "com.microsoft.azure.storage.core.WrappedContentKey.serialize*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  syntax:
    content: "public void serialize(JsonGenerator generator)"
    parameters:
    - id: "generator"
      type: "com.fasterxml.jackson.core.JsonGenerator"
  exceptions:
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.setAlgorithm(java.lang.String)"
  id: "setAlgorithm(java.lang.String)"
  parent: "com.microsoft.azure.storage.core.WrappedContentKey"
  langs:
  - "java"
  name: "setAlgorithm(String algorithm)"
  nameWithType: "WrappedContentKey.setAlgorithm(String algorithm)"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.setAlgorithm(String algorithm)"
  overload: "com.microsoft.azure.storage.core.WrappedContentKey.setAlgorithm*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  summary: "Sets the algorithm used for wrapping."
  syntax:
    content: "public void setAlgorithm(String algorithm)"
    parameters:
    - id: "algorithm"
      type: "java.lang.String"
      description: "The algorithm used for wrapping."
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.setEncryptedKey(byte[])"
  id: "setEncryptedKey(byte[])"
  parent: "com.microsoft.azure.storage.core.WrappedContentKey"
  langs:
  - "java"
  name: "setEncryptedKey(byte[] encryptedKey)"
  nameWithType: "WrappedContentKey.setEncryptedKey(byte[] encryptedKey)"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.setEncryptedKey(byte[] encryptedKey)"
  overload: "com.microsoft.azure.storage.core.WrappedContentKey.setEncryptedKey*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  summary: "Sets the encrypted content encryption key."
  syntax:
    content: "public void setEncryptedKey(byte[] encryptedKey)"
    parameters:
    - id: "encryptedKey"
      type: "byte[]"
      description: "The encrypted content encryption key."
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.setKeyId(java.lang.String)"
  id: "setKeyId(java.lang.String)"
  parent: "com.microsoft.azure.storage.core.WrappedContentKey"
  langs:
  - "java"
  name: "setKeyId(String keyId)"
  nameWithType: "WrappedContentKey.setKeyId(String keyId)"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.setKeyId(String keyId)"
  overload: "com.microsoft.azure.storage.core.WrappedContentKey.setKeyId*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  summary: "Sets the key identifier. This identifier is used to identify the key that is used to wrap/unwrap the content encryption key."
  syntax:
    content: "public void setKeyId(String keyId)"
    parameters:
    - id: "keyId"
      type: "java.lang.String"
      description: "The key identifier string."
references:
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.WrappedContentKey*"
  name: "WrappedContentKey"
  nameWithType: "WrappedContentKey.WrappedContentKey"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.WrappedContentKey"
  package: "com.microsoft.azure.storage.core"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.getAlgorithm*"
  name: "getAlgorithm"
  nameWithType: "WrappedContentKey.getAlgorithm"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.getAlgorithm"
  package: "com.microsoft.azure.storage.core"
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.getEncryptedKey*"
  name: "getEncryptedKey"
  nameWithType: "WrappedContentKey.getEncryptedKey"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.getEncryptedKey"
  package: "com.microsoft.azure.storage.core"
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.getKeyId*"
  name: "getKeyId"
  nameWithType: "WrappedContentKey.getKeyId"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.getKeyId"
  package: "com.microsoft.azure.storage.core"
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.setAlgorithm*"
  name: "setAlgorithm"
  nameWithType: "WrappedContentKey.setAlgorithm"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.setAlgorithm"
  package: "com.microsoft.azure.storage.core"
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.setEncryptedKey*"
  name: "setEncryptedKey"
  nameWithType: "WrappedContentKey.setEncryptedKey"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.setEncryptedKey"
  package: "com.microsoft.azure.storage.core"
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.setKeyId*"
  name: "setKeyId"
  nameWithType: "WrappedContentKey.setKeyId"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.setKeyId"
  package: "com.microsoft.azure.storage.core"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "com.fasterxml.jackson.core.JsonGenerator"
  spec.java:
  - uid: "com.fasterxml.jackson.core.JsonGenerator"
    name: "JsonGenerator"
    fullName: "com.fasterxml.jackson.core.JsonGenerator"
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.serialize*"
  name: "serialize"
  nameWithType: "WrappedContentKey.serialize"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.serialize"
  package: "com.microsoft.azure.storage.core"
- uid: "com.fasterxml.jackson.core.JsonParseException"
  spec.java:
  - uid: "com.fasterxml.jackson.core.JsonParseException"
    name: "JsonParseException"
    fullName: "com.fasterxml.jackson.core.JsonParseException"
- uid: "com.fasterxml.jackson.core.JsonParser"
  spec.java:
  - uid: "com.fasterxml.jackson.core.JsonParser"
    name: "JsonParser"
    fullName: "com.fasterxml.jackson.core.JsonParser"
- uid: "com.microsoft.azure.storage.core.WrappedContentKey.deserialize*"
  name: "deserialize"
  nameWithType: "WrappedContentKey.deserialize"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey.deserialize"
  package: "com.microsoft.azure.storage.core"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
