### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.core.MarkableFileStream"
  id: "MarkableFileStream"
  parent: "com.microsoft.azure.storage.core"
  children:
  - "com.microsoft.azure.storage.core.MarkableFileStream.MarkableFileStream(java.io.FileInputStream)"
  - "com.microsoft.azure.storage.core.MarkableFileStream.mark(int)"
  - "com.microsoft.azure.storage.core.MarkableFileStream.markSupported()"
  - "com.microsoft.azure.storage.core.MarkableFileStream.reset()"
  langs:
  - "java"
  name: "MarkableFileStream"
  nameWithType: "MarkableFileStream"
  fullName: "com.microsoft.azure.storage.core.MarkableFileStream"
  type: "Class"
  package: "com.microsoft.azure.storage.core"
  summary: "RESERVED FOR INTERNAL USE. Wraps a FileStream to allow for more memory efficient uploading."
  syntax:
    content: "public final class MarkableFileStream extends FilterInputStream"
  inheritance:
  - "java.lang.Object"
  - "java.io.InputStream"
  - "java.io.FilterInputStream"
  inheritedMembers:
  - "java.io.FilterInputStream.available()"
  - "java.io.FilterInputStream.close()"
  - "java.io.FilterInputStream.mark(int)"
  - "java.io.FilterInputStream.markSupported()"
  - "java.io.FilterInputStream.read()"
  - "java.io.FilterInputStream.read(byte[])"
  - "java.io.FilterInputStream.read(byte[],int,int)"
  - "java.io.FilterInputStream.reset()"
  - "java.io.FilterInputStream.skip(long)"
  - "java.io.InputStream.nullInputStream()"
  - "java.io.InputStream.readAllBytes()"
  - "java.io.InputStream.readNBytes(byte[],int,int)"
  - "java.io.InputStream.readNBytes(int)"
  - "java.io.InputStream.transferTo(java.io.OutputStream)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.core.MarkableFileStream.MarkableFileStream(java.io.FileInputStream)"
  id: "MarkableFileStream(java.io.FileInputStream)"
  parent: "com.microsoft.azure.storage.core.MarkableFileStream"
  langs:
  - "java"
  name: "MarkableFileStream(FileInputStream stream)"
  nameWithType: "MarkableFileStream.MarkableFileStream(FileInputStream stream)"
  fullName: "com.microsoft.azure.storage.core.MarkableFileStream.MarkableFileStream(FileInputStream stream)"
  overload: "com.microsoft.azure.storage.core.MarkableFileStream.MarkableFileStream*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.core"
  syntax:
    content: "public MarkableFileStream(FileInputStream stream)"
    parameters:
    - id: "stream"
      type: "java.io.FileInputStream"
- uid: "com.microsoft.azure.storage.core.MarkableFileStream.mark(int)"
  id: "mark(int)"
  parent: "com.microsoft.azure.storage.core.MarkableFileStream"
  langs:
  - "java"
  name: "mark(int readlimit)"
  nameWithType: "MarkableFileStream.mark(int readlimit)"
  fullName: "com.microsoft.azure.storage.core.MarkableFileStream.mark(int readlimit)"
  overload: "com.microsoft.azure.storage.core.MarkableFileStream.mark*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  syntax:
    content: "public synchronized void mark(int readlimit)"
    parameters:
    - id: "readlimit"
      type: "int"
- uid: "com.microsoft.azure.storage.core.MarkableFileStream.markSupported()"
  id: "markSupported()"
  parent: "com.microsoft.azure.storage.core.MarkableFileStream"
  langs:
  - "java"
  name: "markSupported()"
  nameWithType: "MarkableFileStream.markSupported()"
  fullName: "com.microsoft.azure.storage.core.MarkableFileStream.markSupported()"
  overload: "com.microsoft.azure.storage.core.MarkableFileStream.markSupported*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  syntax:
    content: "public boolean markSupported()"
    return:
      type: "boolean"
- uid: "com.microsoft.azure.storage.core.MarkableFileStream.reset()"
  id: "reset()"
  parent: "com.microsoft.azure.storage.core.MarkableFileStream"
  langs:
  - "java"
  name: "reset()"
  nameWithType: "MarkableFileStream.reset()"
  fullName: "com.microsoft.azure.storage.core.MarkableFileStream.reset()"
  overload: "com.microsoft.azure.storage.core.MarkableFileStream.reset*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  syntax:
    content: "public synchronized void reset()"
  exceptions:
  - type: "java.io.IOException"
references:
- uid: "java.io.FileInputStream"
  spec.java:
  - uid: "java.io.FileInputStream"
    name: "FileInputStream"
    fullName: "java.io.FileInputStream"
- uid: "com.microsoft.azure.storage.core.MarkableFileStream.MarkableFileStream*"
  name: "MarkableFileStream"
  nameWithType: "MarkableFileStream.MarkableFileStream"
  fullName: "com.microsoft.azure.storage.core.MarkableFileStream.MarkableFileStream"
  package: "com.microsoft.azure.storage.core"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.microsoft.azure.storage.core.MarkableFileStream.mark*"
  name: "mark"
  nameWithType: "MarkableFileStream.mark"
  fullName: "com.microsoft.azure.storage.core.MarkableFileStream.mark"
  package: "com.microsoft.azure.storage.core"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "com.microsoft.azure.storage.core.MarkableFileStream.reset*"
  name: "reset"
  nameWithType: "MarkableFileStream.reset"
  fullName: "com.microsoft.azure.storage.core.MarkableFileStream.reset"
  package: "com.microsoft.azure.storage.core"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.microsoft.azure.storage.core.MarkableFileStream.markSupported*"
  name: "markSupported"
  nameWithType: "MarkableFileStream.markSupported"
  fullName: "com.microsoft.azure.storage.core.MarkableFileStream.markSupported"
  package: "com.microsoft.azure.storage.core"
- uid: "java.io.FilterInputStream"
  name: "FilterInputStream"
  nameWithType: "FilterInputStream"
  fullName: "java.io.FilterInputStream"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.io.FilterInputStream.close()"
  name: "FilterInputStream.close()"
  nameWithType: "FilterInputStream.close()"
  fullName: "java.io.FilterInputStream.close()"
- uid: "java.io.FilterInputStream.read(byte[],int,int)"
  name: "FilterInputStream.read(byte[],int,int)"
  nameWithType: "FilterInputStream.read(byte[],int,int)"
  fullName: "java.io.FilterInputStream.read(byte[],int,int)"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.io.InputStream.readNBytes(int)"
  name: "InputStream.readNBytes(int)"
  nameWithType: "InputStream.readNBytes(int)"
  fullName: "java.io.InputStream.readNBytes(int)"
- uid: "java.io.FilterInputStream.skip(long)"
  name: "FilterInputStream.skip(long)"
  nameWithType: "FilterInputStream.skip(long)"
  fullName: "java.io.FilterInputStream.skip(long)"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.io.FilterInputStream.reset()"
  name: "FilterInputStream.reset()"
  nameWithType: "FilterInputStream.reset()"
  fullName: "java.io.FilterInputStream.reset()"
- uid: "java.io.InputStream.nullInputStream()"
  name: "InputStream.nullInputStream()"
  nameWithType: "InputStream.nullInputStream()"
  fullName: "java.io.InputStream.nullInputStream()"
- uid: "java.io.InputStream.transferTo(java.io.OutputStream)"
  name: "InputStream.transferTo(OutputStream)"
  nameWithType: "InputStream.transferTo(OutputStream)"
  fullName: "java.io.InputStream.transferTo(java.io.OutputStream)"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.io.InputStream.readNBytes(byte[],int,int)"
  name: "InputStream.readNBytes(byte[],int,int)"
  nameWithType: "InputStream.readNBytes(byte[],int,int)"
  fullName: "java.io.InputStream.readNBytes(byte[],int,int)"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.io.InputStream.readAllBytes()"
  name: "InputStream.readAllBytes()"
  nameWithType: "InputStream.readAllBytes()"
  fullName: "java.io.InputStream.readAllBytes()"
- uid: "java.io.FilterInputStream.mark(int)"
  name: "FilterInputStream.mark(int)"
  nameWithType: "FilterInputStream.mark(int)"
  fullName: "java.io.FilterInputStream.mark(int)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.io.FilterInputStream.read()"
  name: "FilterInputStream.read()"
  nameWithType: "FilterInputStream.read()"
  fullName: "java.io.FilterInputStream.read()"
- uid: "java.io.FilterInputStream.markSupported()"
  name: "FilterInputStream.markSupported()"
  nameWithType: "FilterInputStream.markSupported()"
  fullName: "java.io.FilterInputStream.markSupported()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.io.FilterInputStream.read(byte[])"
  name: "FilterInputStream.read(byte[])"
  nameWithType: "FilterInputStream.read(byte[])"
  fullName: "java.io.FilterInputStream.read(byte[])"
- uid: "java.io.FilterInputStream.available()"
  name: "FilterInputStream.available()"
  nameWithType: "FilterInputStream.available()"
  fullName: "java.io.FilterInputStream.available()"
