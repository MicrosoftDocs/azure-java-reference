### YamlMime:ManagedReference
items:
- uid: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector"
  id: "OkHttpProxySelector"
  parent: "com.azure.core.http.okhttp.implementation"
  children:
  - "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.OkHttpProxySelector(java.net.Proxy.Type,java.net.SocketAddress,java.lang.String)"
  - "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.connectFailed(java.net.URI,java.net.SocketAddress,java.io.IOException)"
  - "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.select(java.net.URI)"
  langs:
  - "java"
  name: "OkHttpProxySelector"
  nameWithType: "OkHttpProxySelector"
  fullName: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector"
  type: "Class"
  package: "com.azure.core.http.okhttp.implementation"
  summary: "This class handles selecting the proxy during a request."
  syntax:
    content: "public final class OkHttpProxySelector extends ProxySelector"
  inheritance:
  - "java.lang.Object"
  - "java.net.ProxySelector"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "java.net.ProxySelector.connectFailed(java.net.URI,java.net.SocketAddress,java.io.IOException)"
  - "java.net.ProxySelector.getDefault()"
  - "java.net.ProxySelector.of(java.net.InetSocketAddress)"
  - "java.net.ProxySelector.select(java.net.URI)"
  - "java.net.ProxySelector.setDefault(java.net.ProxySelector)"
- uid: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.OkHttpProxySelector(java.net.Proxy.Type,java.net.SocketAddress,java.lang.String)"
  id: "OkHttpProxySelector(java.net.Proxy.Type,java.net.SocketAddress,java.lang.String)"
  parent: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector"
  langs:
  - "java"
  name: "OkHttpProxySelector(Proxy.Type proxyType, SocketAddress proxyAddress, String nonProxyHosts)"
  nameWithType: "OkHttpProxySelector.OkHttpProxySelector(Proxy.Type proxyType, SocketAddress proxyAddress, String nonProxyHosts)"
  fullName: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.OkHttpProxySelector(Proxy.Type proxyType, SocketAddress proxyAddress, String nonProxyHosts)"
  overload: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.OkHttpProxySelector*"
  type: "Constructor"
  package: "com.azure.core.http.okhttp.implementation"
  syntax:
    content: "public OkHttpProxySelector(Proxy.Type proxyType, SocketAddress proxyAddress, String nonProxyHosts)"
    parameters:
    - id: "proxyType"
      type: "java.net.Proxy.Type"
    - id: "proxyAddress"
      type: "java.net.SocketAddress"
    - id: "nonProxyHosts"
      type: "java.lang.String"
- uid: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.connectFailed(java.net.URI,java.net.SocketAddress,java.io.IOException)"
  id: "connectFailed(java.net.URI,java.net.SocketAddress,java.io.IOException)"
  parent: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector"
  langs:
  - "java"
  name: "connectFailed(URI uri, SocketAddress sa, IOException ioe)"
  nameWithType: "OkHttpProxySelector.connectFailed(URI uri, SocketAddress sa, IOException ioe)"
  fullName: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.connectFailed(URI uri, SocketAddress sa, IOException ioe)"
  overload: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.connectFailed*"
  type: "Method"
  package: "com.azure.core.http.okhttp.implementation"
  syntax:
    content: "public void connectFailed(URI uri, SocketAddress sa, IOException ioe)"
    parameters:
    - id: "uri"
      type: "java.net.URI"
    - id: "sa"
      type: "java.net.SocketAddress"
    - id: "ioe"
      type: "java.io.IOException"
- uid: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.select(java.net.URI)"
  id: "select(java.net.URI)"
  parent: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector"
  langs:
  - "java"
  name: "select(URI uri)"
  nameWithType: "OkHttpProxySelector.select(URI uri)"
  fullName: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.select(URI uri)"
  overload: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.select*"
  type: "Method"
  package: "com.azure.core.http.okhttp.implementation"
  syntax:
    content: "public List<Proxy> select(URI uri)"
    parameters:
    - id: "uri"
      type: "java.net.URI"
    return:
      type: "java.util.List<java.net.Proxy>"
references:
- uid: "java.net.Proxy.Type"
  spec.java:
  - uid: "java.net.Proxy.Type"
    name: "Type"
    fullName: "java.net.Proxy.Type"
- uid: "java.net.SocketAddress"
  spec.java:
  - uid: "java.net.SocketAddress"
    name: "SocketAddress"
    fullName: "java.net.SocketAddress"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.OkHttpProxySelector*"
  name: "OkHttpProxySelector"
  nameWithType: "OkHttpProxySelector.OkHttpProxySelector"
  fullName: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.OkHttpProxySelector"
  package: "com.azure.core.http.okhttp.implementation"
- uid: "java.net.URI"
  spec.java:
  - uid: "java.net.URI"
    name: "URI"
    fullName: "java.net.URI"
- uid: "java.util.List<java.net.Proxy>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.net.Proxy"
    name: "Proxy"
    fullName: "java.net.Proxy"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.select*"
  name: "select"
  nameWithType: "OkHttpProxySelector.select"
  fullName: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.select"
  package: "com.azure.core.http.okhttp.implementation"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.connectFailed*"
  name: "connectFailed"
  nameWithType: "OkHttpProxySelector.connectFailed"
  fullName: "com.azure.core.http.okhttp.implementation.OkHttpProxySelector.connectFailed"
  package: "com.azure.core.http.okhttp.implementation"
- uid: "java.net.ProxySelector"
  name: "ProxySelector"
  nameWithType: "ProxySelector"
  fullName: "java.net.ProxySelector"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.net.ProxySelector.select(java.net.URI)"
  name: "ProxySelector.select(URI)"
  nameWithType: "ProxySelector.select(URI)"
  fullName: "java.net.ProxySelector.select(java.net.URI)"
- uid: "java.net.ProxySelector.getDefault()"
  name: "ProxySelector.getDefault()"
  nameWithType: "ProxySelector.getDefault()"
  fullName: "java.net.ProxySelector.getDefault()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.net.ProxySelector.setDefault(java.net.ProxySelector)"
  name: "ProxySelector.setDefault(ProxySelector)"
  nameWithType: "ProxySelector.setDefault(ProxySelector)"
  fullName: "java.net.ProxySelector.setDefault(java.net.ProxySelector)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.net.ProxySelector.of(java.net.InetSocketAddress)"
  name: "ProxySelector.of(InetSocketAddress)"
  nameWithType: "ProxySelector.of(InetSocketAddress)"
  fullName: "java.net.ProxySelector.of(java.net.InetSocketAddress)"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.net.ProxySelector.connectFailed(java.net.URI,java.net.SocketAddress,java.io.IOException)"
  name: "ProxySelector.connectFailed(URI,SocketAddress,IOException)"
  nameWithType: "ProxySelector.connectFailed(URI,SocketAddress,IOException)"
  fullName: "java.net.ProxySelector.connectFailed(java.net.URI,java.net.SocketAddress,java.io.IOException)"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "java.net.Proxy"
  name: "Proxy"
  nameWithType: "Proxy"
  fullName: "java.net.Proxy"
