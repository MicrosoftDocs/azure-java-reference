### YamlMime:ManagedReference
items:
- uid: "com.azure.core.http.netty.implementation.HttpProxyExceptionHandler"
  id: "HttpProxyExceptionHandler"
  parent: "com.azure.core.http.netty.implementation"
  children:
  - "com.azure.core.http.netty.implementation.HttpProxyExceptionHandler.HttpProxyExceptionHandler()"
  - "com.azure.core.http.netty.implementation.HttpProxyExceptionHandler.exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
  langs:
  - "java"
  name: "HttpProxyExceptionHandler"
  nameWithType: "HttpProxyExceptionHandler"
  fullName: "com.azure.core.http.netty.implementation.HttpProxyExceptionHandler"
  type: "Class"
  package: "com.azure.core.http.netty.implementation"
  summary: "This class handles removing <xref uid=\"\" data-throw-if-not-resolved=\"false\">SSLExceptions</xref> from being propagated when connecting to the proxy fails.\n\nThe <xref uid=\"\" data-throw-if-not-resolved=\"false\">SSLException</xref> is removed since the <xref uid=\"\" data-throw-if-not-resolved=\"false\">SslHandler</xref> processes in the pipeline after the <xref uid=\"io.netty.handler.proxy.ProxyHandler\" data-throw-if-not-resolved=\"false\">ProxyHandler</xref> and if there is a failure to connect to the proxy it may bubble up as an issue with SSL. This will remove the <xref uid=\"\" data-throw-if-not-resolved=\"false\">SSLException</xref> if its cause is a <xref uid=\"\" data-throw-if-not-resolved=\"false\">ProxyConnectException</xref>, if this happens the <xref uid=\"\" data-throw-if-not-resolved=\"false\">ProxyConnectException</xref> will be bubbled up instead."
  syntax:
    content: "public final class HttpProxyExceptionHandler extends ChannelDuplexHandler"
  inheritance:
  - "java.lang.Object"
  - "io.netty.channel.ChannelHandlerAdapter"
  - "io.netty.channel.ChannelInboundHandlerAdapter"
  - "io.netty.channel.ChannelDuplexHandler"
  inheritedMembers:
  - "io.netty.channel.ChannelDuplexHandler.bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
  - "io.netty.channel.ChannelDuplexHandler.close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
  - "io.netty.channel.ChannelDuplexHandler.connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
  - "io.netty.channel.ChannelDuplexHandler.deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
  - "io.netty.channel.ChannelDuplexHandler.disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
  - "io.netty.channel.ChannelDuplexHandler.flush(io.netty.channel.ChannelHandlerContext)"
  - "io.netty.channel.ChannelDuplexHandler.read(io.netty.channel.ChannelHandlerContext)"
  - "io.netty.channel.ChannelDuplexHandler.write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
  - "io.netty.channel.ChannelHandlerAdapter.ensureNotSharable()"
  - "io.netty.channel.ChannelHandlerAdapter.handlerAdded(io.netty.channel.ChannelHandlerContext)"
  - "io.netty.channel.ChannelHandlerAdapter.handlerRemoved(io.netty.channel.ChannelHandlerContext)"
  - "io.netty.channel.ChannelHandlerAdapter.isSharable()"
  - "io.netty.channel.ChannelInboundHandlerAdapter.channelActive(io.netty.channel.ChannelHandlerContext)"
  - "io.netty.channel.ChannelInboundHandlerAdapter.channelInactive(io.netty.channel.ChannelHandlerContext)"
  - "io.netty.channel.ChannelInboundHandlerAdapter.channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
  - "io.netty.channel.ChannelInboundHandlerAdapter.channelReadComplete(io.netty.channel.ChannelHandlerContext)"
  - "io.netty.channel.ChannelInboundHandlerAdapter.channelRegistered(io.netty.channel.ChannelHandlerContext)"
  - "io.netty.channel.ChannelInboundHandlerAdapter.channelUnregistered(io.netty.channel.ChannelHandlerContext)"
  - "io.netty.channel.ChannelInboundHandlerAdapter.channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)"
  - "io.netty.channel.ChannelInboundHandlerAdapter.exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
  - "io.netty.channel.ChannelInboundHandlerAdapter.userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.http.netty.implementation.HttpProxyExceptionHandler.HttpProxyExceptionHandler()"
  id: "HttpProxyExceptionHandler()"
  parent: "com.azure.core.http.netty.implementation.HttpProxyExceptionHandler"
  langs:
  - "java"
  name: "HttpProxyExceptionHandler()"
  nameWithType: "HttpProxyExceptionHandler.HttpProxyExceptionHandler()"
  fullName: "com.azure.core.http.netty.implementation.HttpProxyExceptionHandler.HttpProxyExceptionHandler()"
  overload: "com.azure.core.http.netty.implementation.HttpProxyExceptionHandler.HttpProxyExceptionHandler*"
  type: "Constructor"
  package: "com.azure.core.http.netty.implementation"
  syntax:
    content: "public HttpProxyExceptionHandler()"
- uid: "com.azure.core.http.netty.implementation.HttpProxyExceptionHandler.exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
  id: "exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
  parent: "com.azure.core.http.netty.implementation.HttpProxyExceptionHandler"
  langs:
  - "java"
  name: "exceptionCaught(ChannelHandlerContext ctx, Throwable cause)"
  nameWithType: "HttpProxyExceptionHandler.exceptionCaught(ChannelHandlerContext ctx, Throwable cause)"
  fullName: "com.azure.core.http.netty.implementation.HttpProxyExceptionHandler.exceptionCaught(ChannelHandlerContext ctx, Throwable cause)"
  overload: "com.azure.core.http.netty.implementation.HttpProxyExceptionHandler.exceptionCaught*"
  type: "Method"
  package: "com.azure.core.http.netty.implementation"
  syntax:
    content: "public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)"
    parameters:
    - id: "ctx"
      type: "io.netty.channel.ChannelHandlerContext"
    - id: "cause"
      type: "java.lang.Throwable"
references:
- uid: "com.azure.core.http.netty.implementation.HttpProxyExceptionHandler.HttpProxyExceptionHandler*"
  name: "HttpProxyExceptionHandler"
  nameWithType: "HttpProxyExceptionHandler.HttpProxyExceptionHandler"
  fullName: "com.azure.core.http.netty.implementation.HttpProxyExceptionHandler.HttpProxyExceptionHandler"
  package: "com.azure.core.http.netty.implementation"
- uid: "io.netty.channel.ChannelHandlerContext"
  spec.java:
  - uid: "io.netty.channel.ChannelHandlerContext"
    name: "ChannelHandlerContext"
    fullName: "io.netty.channel.ChannelHandlerContext"
- uid: "java.lang.Throwable"
  spec.java:
  - uid: "java.lang.Throwable"
    name: "Throwable"
    fullName: "java.lang.Throwable"
- uid: "com.azure.core.http.netty.implementation.HttpProxyExceptionHandler.exceptionCaught*"
  name: "exceptionCaught"
  nameWithType: "HttpProxyExceptionHandler.exceptionCaught"
  fullName: "com.azure.core.http.netty.implementation.HttpProxyExceptionHandler.exceptionCaught"
  package: "com.azure.core.http.netty.implementation"
- uid: "io.netty.channel.ChannelDuplexHandler"
  name: "ChannelDuplexHandler"
  nameWithType: "ChannelDuplexHandler"
  fullName: "io.netty.channel.ChannelDuplexHandler"
- uid: "io.netty.channel.ChannelDuplexHandler.flush(io.netty.channel.ChannelHandlerContext)"
  name: "ChannelDuplexHandler.flush(ChannelHandlerContext)"
  nameWithType: "ChannelDuplexHandler.flush(ChannelHandlerContext)"
  fullName: "io.netty.channel.ChannelDuplexHandler.flush(io.netty.channel.ChannelHandlerContext)"
- uid: "io.netty.channel.ChannelHandlerAdapter.ensureNotSharable()"
  name: "ChannelHandlerAdapter.ensureNotSharable()"
  nameWithType: "ChannelHandlerAdapter.ensureNotSharable()"
  fullName: "io.netty.channel.ChannelHandlerAdapter.ensureNotSharable()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "io.netty.channel.ChannelInboundHandlerAdapter.channelReadComplete(io.netty.channel.ChannelHandlerContext)"
  name: "ChannelInboundHandlerAdapter.channelReadComplete(ChannelHandlerContext)"
  nameWithType: "ChannelInboundHandlerAdapter.channelReadComplete(ChannelHandlerContext)"
  fullName: "io.netty.channel.ChannelInboundHandlerAdapter.channelReadComplete(io.netty.channel.ChannelHandlerContext)"
- uid: "io.netty.channel.ChannelInboundHandlerAdapter.channelRegistered(io.netty.channel.ChannelHandlerContext)"
  name: "ChannelInboundHandlerAdapter.channelRegistered(ChannelHandlerContext)"
  nameWithType: "ChannelInboundHandlerAdapter.channelRegistered(ChannelHandlerContext)"
  fullName: "io.netty.channel.ChannelInboundHandlerAdapter.channelRegistered(io.netty.channel.ChannelHandlerContext)"
- uid: "io.netty.channel.ChannelDuplexHandler.write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
  name: "ChannelDuplexHandler.write(ChannelHandlerContext,Object,ChannelPromise)"
  nameWithType: "ChannelDuplexHandler.write(ChannelHandlerContext,Object,ChannelPromise)"
  fullName: "io.netty.channel.ChannelDuplexHandler.write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
- uid: "io.netty.channel.ChannelHandlerAdapter.isSharable()"
  name: "ChannelHandlerAdapter.isSharable()"
  nameWithType: "ChannelHandlerAdapter.isSharable()"
  fullName: "io.netty.channel.ChannelHandlerAdapter.isSharable()"
- uid: "io.netty.channel.ChannelDuplexHandler.bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
  name: "ChannelDuplexHandler.bind(ChannelHandlerContext,SocketAddress,ChannelPromise)"
  nameWithType: "ChannelDuplexHandler.bind(ChannelHandlerContext,SocketAddress,ChannelPromise)"
  fullName: "io.netty.channel.ChannelDuplexHandler.bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
- uid: "io.netty.channel.ChannelDuplexHandler.close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
  name: "ChannelDuplexHandler.close(ChannelHandlerContext,ChannelPromise)"
  nameWithType: "ChannelDuplexHandler.close(ChannelHandlerContext,ChannelPromise)"
  fullName: "io.netty.channel.ChannelDuplexHandler.close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
- uid: "io.netty.channel.ChannelInboundHandlerAdapter.channelUnregistered(io.netty.channel.ChannelHandlerContext)"
  name: "ChannelInboundHandlerAdapter.channelUnregistered(ChannelHandlerContext)"
  nameWithType: "ChannelInboundHandlerAdapter.channelUnregistered(ChannelHandlerContext)"
  fullName: "io.netty.channel.ChannelInboundHandlerAdapter.channelUnregistered(io.netty.channel.ChannelHandlerContext)"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "io.netty.channel.ChannelInboundHandlerAdapter.userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
  name: "ChannelInboundHandlerAdapter.userEventTriggered(ChannelHandlerContext,Object)"
  nameWithType: "ChannelInboundHandlerAdapter.userEventTriggered(ChannelHandlerContext,Object)"
  fullName: "io.netty.channel.ChannelInboundHandlerAdapter.userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
- uid: "io.netty.channel.ChannelDuplexHandler.read(io.netty.channel.ChannelHandlerContext)"
  name: "ChannelDuplexHandler.read(ChannelHandlerContext)"
  nameWithType: "ChannelDuplexHandler.read(ChannelHandlerContext)"
  fullName: "io.netty.channel.ChannelDuplexHandler.read(io.netty.channel.ChannelHandlerContext)"
- uid: "io.netty.channel.ChannelDuplexHandler.deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
  name: "ChannelDuplexHandler.deregister(ChannelHandlerContext,ChannelPromise)"
  nameWithType: "ChannelDuplexHandler.deregister(ChannelHandlerContext,ChannelPromise)"
  fullName: "io.netty.channel.ChannelDuplexHandler.deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
- uid: "io.netty.channel.ChannelInboundHandlerAdapter.channelInactive(io.netty.channel.ChannelHandlerContext)"
  name: "ChannelInboundHandlerAdapter.channelInactive(ChannelHandlerContext)"
  nameWithType: "ChannelInboundHandlerAdapter.channelInactive(ChannelHandlerContext)"
  fullName: "io.netty.channel.ChannelInboundHandlerAdapter.channelInactive(io.netty.channel.ChannelHandlerContext)"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "io.netty.channel.ChannelInboundHandlerAdapter.channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
  name: "ChannelInboundHandlerAdapter.channelRead(ChannelHandlerContext,Object)"
  nameWithType: "ChannelInboundHandlerAdapter.channelRead(ChannelHandlerContext,Object)"
  fullName: "io.netty.channel.ChannelInboundHandlerAdapter.channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
- uid: "io.netty.channel.ChannelInboundHandlerAdapter.channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)"
  name: "ChannelInboundHandlerAdapter.channelWritabilityChanged(ChannelHandlerContext)"
  nameWithType: "ChannelInboundHandlerAdapter.channelWritabilityChanged(ChannelHandlerContext)"
  fullName: "io.netty.channel.ChannelInboundHandlerAdapter.channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "io.netty.channel.ChannelInboundHandlerAdapter.channelActive(io.netty.channel.ChannelHandlerContext)"
  name: "ChannelInboundHandlerAdapter.channelActive(ChannelHandlerContext)"
  nameWithType: "ChannelInboundHandlerAdapter.channelActive(ChannelHandlerContext)"
  fullName: "io.netty.channel.ChannelInboundHandlerAdapter.channelActive(io.netty.channel.ChannelHandlerContext)"
- uid: "io.netty.channel.ChannelHandlerAdapter.handlerRemoved(io.netty.channel.ChannelHandlerContext)"
  name: "ChannelHandlerAdapter.handlerRemoved(ChannelHandlerContext)"
  nameWithType: "ChannelHandlerAdapter.handlerRemoved(ChannelHandlerContext)"
  fullName: "io.netty.channel.ChannelHandlerAdapter.handlerRemoved(io.netty.channel.ChannelHandlerContext)"
- uid: "io.netty.channel.ChannelInboundHandlerAdapter.exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
  name: "ChannelInboundHandlerAdapter.exceptionCaught(ChannelHandlerContext,Throwable)"
  nameWithType: "ChannelInboundHandlerAdapter.exceptionCaught(ChannelHandlerContext,Throwable)"
  fullName: "io.netty.channel.ChannelInboundHandlerAdapter.exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "io.netty.channel.ChannelDuplexHandler.connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
  name: "ChannelDuplexHandler.connect(ChannelHandlerContext,SocketAddress,SocketAddress,ChannelPromise)"
  nameWithType: "ChannelDuplexHandler.connect(ChannelHandlerContext,SocketAddress,SocketAddress,ChannelPromise)"
  fullName: "io.netty.channel.ChannelDuplexHandler.connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)"
- uid: "io.netty.channel.ChannelHandlerAdapter.handlerAdded(io.netty.channel.ChannelHandlerContext)"
  name: "ChannelHandlerAdapter.handlerAdded(ChannelHandlerContext)"
  nameWithType: "ChannelHandlerAdapter.handlerAdded(ChannelHandlerContext)"
  fullName: "io.netty.channel.ChannelHandlerAdapter.handlerAdded(io.netty.channel.ChannelHandlerContext)"
- uid: "io.netty.channel.ChannelDuplexHandler.disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
  name: "ChannelDuplexHandler.disconnect(ChannelHandlerContext,ChannelPromise)"
  nameWithType: "ChannelDuplexHandler.disconnect(ChannelHandlerContext,ChannelPromise)"
  fullName: "io.netty.channel.ChannelDuplexHandler.disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)"
