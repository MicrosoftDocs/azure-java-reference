### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  id: "LogRecordStreamReader"
  parent: "com.microsoft.azure.storage.analytics"
  children:
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.FIELD_DELIMITER"
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.LogRecordStreamReader(java.io.InputStream)"
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.QUOTE_CHAR"
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.RECORD_DELIMITER"
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.endCurrentRecord()"
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.hasMoreFieldsInRecord()"
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.isEndOfFile()"
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.peek()"
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.read()"
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readBoolean()"
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readDate(java.text.DateFormat)"
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readDouble()"
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readInteger()"
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readLong()"
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readQuotedString()"
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readString()"
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readUri()"
  - "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readUuid()"
  langs:
  - "java"
  name: "LogRecordStreamReader"
  nameWithType: "LogRecordStreamReader"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  type: "Class"
  package: "com.microsoft.azure.storage.analytics"
  summary: "RESERVED FOR INTERNAL USE. Reads LogRecord information from an InputStream."
  syntax:
    content: " class LogRecordStreamReader extends InputStreamReader"
  inheritance:
  - "java.lang.Object"
  - "java.io.Reader"
  - "java.io.InputStreamReader"
  inheritedMembers:
  - "java.io.InputStreamReader.close()"
  - "java.io.InputStreamReader.getEncoding()"
  - "java.io.InputStreamReader.read()"
  - "java.io.InputStreamReader.read(char[],int,int)"
  - "java.io.InputStreamReader.ready()"
  - "java.io.Reader.mark(int)"
  - "java.io.Reader.markSupported()"
  - "java.io.Reader.nullReader()"
  - "java.io.Reader.read(char[])"
  - "java.io.Reader.read(java.nio.CharBuffer)"
  - "java.io.Reader.reset()"
  - "java.io.Reader.skip(long)"
  - "java.io.Reader.transferTo(java.io.Writer)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.FIELD_DELIMITER"
  id: "FIELD_DELIMITER"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "FIELD_DELIMITER"
  nameWithType: "LogRecordStreamReader.FIELD_DELIMITER"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.FIELD_DELIMITER"
  type: "Field"
  package: "com.microsoft.azure.storage.analytics"
  summary: "Holds the field delimiter character."
  syntax:
    content: "public static final char FIELD_DELIMITER"
    return:
      type: "char"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.LogRecordStreamReader(java.io.InputStream)"
  id: "LogRecordStreamReader(java.io.InputStream)"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "LogRecordStreamReader(InputStream stream)"
  nameWithType: "LogRecordStreamReader.LogRecordStreamReader(InputStream stream)"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.LogRecordStreamReader(InputStream stream)"
  overload: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.LogRecordStreamReader*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.analytics"
  summary: "Constructs a new LogRecordStreamReader to read the stream given."
  syntax:
    content: "public LogRecordStreamReader(InputStream stream)"
    parameters:
    - id: "stream"
      type: "java.io.InputStream"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.QUOTE_CHAR"
  id: "QUOTE_CHAR"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "QUOTE_CHAR"
  nameWithType: "LogRecordStreamReader.QUOTE_CHAR"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.QUOTE_CHAR"
  type: "Field"
  package: "com.microsoft.azure.storage.analytics"
  summary: "Holds the quote character."
  syntax:
    content: "public static final char QUOTE_CHAR"
    return:
      type: "char"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.RECORD_DELIMITER"
  id: "RECORD_DELIMITER"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "RECORD_DELIMITER"
  nameWithType: "LogRecordStreamReader.RECORD_DELIMITER"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.RECORD_DELIMITER"
  type: "Field"
  package: "com.microsoft.azure.storage.analytics"
  summary: "Holds the record delimiter character."
  syntax:
    content: "public static final char RECORD_DELIMITER"
    return:
      type: "char"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.endCurrentRecord()"
  id: "endCurrentRecord()"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "endCurrentRecord()"
  nameWithType: "LogRecordStreamReader.endCurrentRecord()"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.endCurrentRecord()"
  overload: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.endCurrentRecord*"
  type: "Method"
  package: "com.microsoft.azure.storage.analytics"
  summary: "Ends the current record by reading the record delimiter and adjusting internal state."
  syntax:
    content: "public void endCurrentRecord()"
  exceptions:
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.hasMoreFieldsInRecord()"
  id: "hasMoreFieldsInRecord()"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "hasMoreFieldsInRecord()"
  nameWithType: "LogRecordStreamReader.hasMoreFieldsInRecord()"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.hasMoreFieldsInRecord()"
  overload: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.hasMoreFieldsInRecord*"
  type: "Method"
  package: "com.microsoft.azure.storage.analytics"
  summary: "Checks if another field exists in the record."
  syntax:
    content: "public boolean hasMoreFieldsInRecord()"
    return:
      type: "boolean"
      description: "true if another field exists, false otherwise."
  exceptions:
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.isEndOfFile()"
  id: "isEndOfFile()"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "isEndOfFile()"
  nameWithType: "LogRecordStreamReader.isEndOfFile()"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.isEndOfFile()"
  overload: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.isEndOfFile*"
  type: "Method"
  package: "com.microsoft.azure.storage.analytics"
  summary: "Checks to see if the end of the stream has been reached."
  syntax:
    content: "public boolean isEndOfFile()"
    return:
      type: "boolean"
      description: "true if at the end of the stream, false otherwise."
  exceptions:
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.peek()"
  id: "peek()"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "peek()"
  nameWithType: "LogRecordStreamReader.peek()"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.peek()"
  overload: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.peek*"
  type: "Method"
  package: "com.microsoft.azure.storage.analytics"
  summary: "Peek a character from the stream. This character is not consumed until read() is called."
  syntax:
    content: "protected int peek()"
    return:
      type: "int"
      description: "the character peeked, or -1 if none exist."
  exceptions:
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.read()"
  id: "read()"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "read()"
  nameWithType: "LogRecordStreamReader.read()"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.read()"
  overload: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.read*"
  type: "Method"
  package: "com.microsoft.azure.storage.analytics"
  syntax:
    content: "public int read()"
    return:
      type: "int"
  exceptions:
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readBoolean()"
  id: "readBoolean()"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "readBoolean()"
  nameWithType: "LogRecordStreamReader.readBoolean()"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readBoolean()"
  overload: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readBoolean*"
  type: "Method"
  package: "com.microsoft.azure.storage.analytics"
  summary: "Read a Boolean from the stream."
  syntax:
    content: "public Boolean readBoolean()"
    return:
      type: "java.lang.Boolean"
      description: "the Boolean read."
  exceptions:
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readDate(java.text.DateFormat)"
  id: "readDate(java.text.DateFormat)"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "readDate(DateFormat format)"
  nameWithType: "LogRecordStreamReader.readDate(DateFormat format)"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readDate(DateFormat format)"
  overload: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readDate*"
  type: "Method"
  package: "com.microsoft.azure.storage.analytics"
  summary: "Read a Date from the stream."
  syntax:
    content: "public Date readDate(DateFormat format)"
    parameters:
    - id: "format"
      type: "java.text.DateFormat"
      description: "the format in which the date is stored, for parsing purposes."
    return:
      type: "java.util.Date"
      description: "the Date read."
  exceptions:
  - type: "java.io.IOException"
  - type: "java.text.ParseException"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readDouble()"
  id: "readDouble()"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "readDouble()"
  nameWithType: "LogRecordStreamReader.readDouble()"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readDouble()"
  overload: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readDouble*"
  type: "Method"
  package: "com.microsoft.azure.storage.analytics"
  summary: "Read a Double from the stream."
  syntax:
    content: "public Double readDouble()"
    return:
      type: "java.lang.Double"
      description: "the Double read."
  exceptions:
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readInteger()"
  id: "readInteger()"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "readInteger()"
  nameWithType: "LogRecordStreamReader.readInteger()"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readInteger()"
  overload: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readInteger*"
  type: "Method"
  package: "com.microsoft.azure.storage.analytics"
  summary: "Read an Integer from the stream."
  syntax:
    content: "public Integer readInteger()"
    return:
      type: "java.lang.Integer"
      description: "the Integer read."
  exceptions:
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readLong()"
  id: "readLong()"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "readLong()"
  nameWithType: "LogRecordStreamReader.readLong()"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readLong()"
  overload: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readLong*"
  type: "Method"
  package: "com.microsoft.azure.storage.analytics"
  summary: "Read a Long from the stream."
  syntax:
    content: "public Long readLong()"
    return:
      type: "java.lang.Long"
      description: "the Long read."
  exceptions:
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readQuotedString()"
  id: "readQuotedString()"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "readQuotedString()"
  nameWithType: "LogRecordStreamReader.readQuotedString()"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readQuotedString()"
  overload: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readQuotedString*"
  type: "Method"
  package: "com.microsoft.azure.storage.analytics"
  summary: "Read a quoted String from the stream."
  syntax:
    content: "public String readQuotedString()"
    return:
      type: "java.lang.String"
      description: "the String read."
  exceptions:
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readString()"
  id: "readString()"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "readString()"
  nameWithType: "LogRecordStreamReader.readString()"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readString()"
  overload: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readString*"
  type: "Method"
  package: "com.microsoft.azure.storage.analytics"
  summary: "Read a String from the stream."
  syntax:
    content: "public String readString()"
    return:
      type: "java.lang.String"
      description: "the String read."
  exceptions:
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readUri()"
  id: "readUri()"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "readUri()"
  nameWithType: "LogRecordStreamReader.readUri()"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readUri()"
  overload: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readUri*"
  type: "Method"
  package: "com.microsoft.azure.storage.analytics"
  summary: "Read a URI from the stream."
  syntax:
    content: "public URI readUri()"
    return:
      type: "java.net.URI"
      description: "the URI read."
  exceptions:
  - type: "java.net.URISyntaxException"
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readUuid()"
  id: "readUuid()"
  parent: "com.microsoft.azure.storage.analytics.LogRecordStreamReader"
  langs:
  - "java"
  name: "readUuid()"
  nameWithType: "LogRecordStreamReader.readUuid()"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readUuid()"
  overload: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readUuid*"
  type: "Method"
  package: "com.microsoft.azure.storage.analytics"
  summary: "Read a UUID from the stream."
  syntax:
    content: "public UUID readUuid()"
    return:
      type: "java.util.UUID"
      description: "the UUID read."
  exceptions:
  - type: "java.io.IOException"
references:
- uid: "java.io.InputStream"
  spec.java:
  - uid: "java.io.InputStream"
    name: "InputStream"
    fullName: "java.io.InputStream"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.LogRecordStreamReader*"
  name: "LogRecordStreamReader"
  nameWithType: "LogRecordStreamReader.LogRecordStreamReader"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.LogRecordStreamReader"
  package: "com.microsoft.azure.storage.analytics"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.hasMoreFieldsInRecord*"
  name: "hasMoreFieldsInRecord"
  nameWithType: "LogRecordStreamReader.hasMoreFieldsInRecord"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.hasMoreFieldsInRecord"
  package: "com.microsoft.azure.storage.analytics"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.isEndOfFile*"
  name: "isEndOfFile"
  nameWithType: "LogRecordStreamReader.isEndOfFile"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.isEndOfFile"
  package: "com.microsoft.azure.storage.analytics"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readString*"
  name: "readString"
  nameWithType: "LogRecordStreamReader.readString"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readString"
  package: "com.microsoft.azure.storage.analytics"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readQuotedString*"
  name: "readQuotedString"
  nameWithType: "LogRecordStreamReader.readQuotedString"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readQuotedString"
  package: "com.microsoft.azure.storage.analytics"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readBoolean*"
  name: "readBoolean"
  nameWithType: "LogRecordStreamReader.readBoolean"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readBoolean"
  package: "com.microsoft.azure.storage.analytics"
- uid: "java.text.ParseException"
  spec.java:
  - uid: "java.text.ParseException"
    name: "ParseException"
    fullName: "java.text.ParseException"
- uid: "java.text.DateFormat"
  spec.java:
  - uid: "java.text.DateFormat"
    name: "DateFormat"
    fullName: "java.text.DateFormat"
- uid: "java.util.Date"
  spec.java:
  - uid: "java.util.Date"
    name: "Date"
    fullName: "java.util.Date"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readDate*"
  name: "readDate"
  nameWithType: "LogRecordStreamReader.readDate"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readDate"
  package: "com.microsoft.azure.storage.analytics"
- uid: "java.lang.Double"
  spec.java:
  - uid: "java.lang.Double"
    name: "Double"
    fullName: "java.lang.Double"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readDouble*"
  name: "readDouble"
  nameWithType: "LogRecordStreamReader.readDouble"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readDouble"
  package: "com.microsoft.azure.storage.analytics"
- uid: "java.util.UUID"
  spec.java:
  - uid: "java.util.UUID"
    name: "UUID"
    fullName: "java.util.UUID"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readUuid*"
  name: "readUuid"
  nameWithType: "LogRecordStreamReader.readUuid"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readUuid"
  package: "com.microsoft.azure.storage.analytics"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readInteger*"
  name: "readInteger"
  nameWithType: "LogRecordStreamReader.readInteger"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readInteger"
  package: "com.microsoft.azure.storage.analytics"
- uid: "java.lang.Long"
  spec.java:
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readLong*"
  name: "readLong"
  nameWithType: "LogRecordStreamReader.readLong"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readLong"
  package: "com.microsoft.azure.storage.analytics"
- uid: "java.net.URISyntaxException"
  spec.java:
  - uid: "java.net.URISyntaxException"
    name: "URISyntaxException"
    fullName: "java.net.URISyntaxException"
- uid: "java.net.URI"
  spec.java:
  - uid: "java.net.URI"
    name: "URI"
    fullName: "java.net.URI"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readUri*"
  name: "readUri"
  nameWithType: "LogRecordStreamReader.readUri"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.readUri"
  package: "com.microsoft.azure.storage.analytics"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.endCurrentRecord*"
  name: "endCurrentRecord"
  nameWithType: "LogRecordStreamReader.endCurrentRecord"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.endCurrentRecord"
  package: "com.microsoft.azure.storage.analytics"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.read*"
  name: "read"
  nameWithType: "LogRecordStreamReader.read"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.read"
  package: "com.microsoft.azure.storage.analytics"
- uid: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.peek*"
  name: "peek"
  nameWithType: "LogRecordStreamReader.peek"
  fullName: "com.microsoft.azure.storage.analytics.LogRecordStreamReader.peek"
  package: "com.microsoft.azure.storage.analytics"
- uid: "char"
  spec.java:
  - uid: "char"
    name: "char"
    fullName: "char"
- uid: "java.io.InputStreamReader"
  name: "InputStreamReader"
  nameWithType: "InputStreamReader"
  fullName: "java.io.InputStreamReader"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.io.InputStreamReader.read(char[],int,int)"
  name: "InputStreamReader.read(char[],int,int)"
  nameWithType: "InputStreamReader.read(char[],int,int)"
  fullName: "java.io.InputStreamReader.read(char[],int,int)"
- uid: "java.io.InputStreamReader.close()"
  name: "InputStreamReader.close()"
  nameWithType: "InputStreamReader.close()"
  fullName: "java.io.InputStreamReader.close()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.io.Reader.mark(int)"
  name: "Reader.mark(int)"
  nameWithType: "Reader.mark(int)"
  fullName: "java.io.Reader.mark(int)"
- uid: "java.io.Reader.read(char[])"
  name: "Reader.read(char[])"
  nameWithType: "Reader.read(char[])"
  fullName: "java.io.Reader.read(char[])"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.io.Reader.transferTo(java.io.Writer)"
  name: "Reader.transferTo(Writer)"
  nameWithType: "Reader.transferTo(Writer)"
  fullName: "java.io.Reader.transferTo(java.io.Writer)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.io.InputStreamReader.getEncoding()"
  name: "InputStreamReader.getEncoding()"
  nameWithType: "InputStreamReader.getEncoding()"
  fullName: "java.io.InputStreamReader.getEncoding()"
- uid: "java.io.Reader.nullReader()"
  name: "Reader.nullReader()"
  nameWithType: "Reader.nullReader()"
  fullName: "java.io.Reader.nullReader()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.io.Reader.read(java.nio.CharBuffer)"
  name: "Reader.read(CharBuffer)"
  nameWithType: "Reader.read(CharBuffer)"
  fullName: "java.io.Reader.read(java.nio.CharBuffer)"
- uid: "java.io.Reader.reset()"
  name: "Reader.reset()"
  nameWithType: "Reader.reset()"
  fullName: "java.io.Reader.reset()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.io.Reader.skip(long)"
  name: "Reader.skip(long)"
  nameWithType: "Reader.skip(long)"
  fullName: "java.io.Reader.skip(long)"
- uid: "java.io.Reader.markSupported()"
  name: "Reader.markSupported()"
  nameWithType: "Reader.markSupported()"
  fullName: "java.io.Reader.markSupported()"
- uid: "java.io.InputStreamReader.read()"
  name: "InputStreamReader.read()"
  nameWithType: "InputStreamReader.read()"
  fullName: "java.io.InputStreamReader.read()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.io.InputStreamReader.ready()"
  name: "InputStreamReader.ready()"
  nameWithType: "InputStreamReader.ready()"
  fullName: "java.io.InputStreamReader.ready()"
