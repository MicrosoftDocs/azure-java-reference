### YamlMime:ManagedReference
items:
- uid: "com.azure.core.http.netty.implementation.ChallengeHolder"
  id: "ChallengeHolder"
  parent: "com.azure.core.http.netty.implementation"
  children:
  - "com.azure.core.http.netty.implementation.ChallengeHolder.ChallengeHolder(boolean,java.util.List<java.util.Map<java.lang.String,java.lang.String>>)"
  - "com.azure.core.http.netty.implementation.ChallengeHolder.getDigestChallenges()"
  - "com.azure.core.http.netty.implementation.ChallengeHolder.hasBasicChallenge()"
  langs:
  - "java"
  name: "ChallengeHolder"
  nameWithType: "ChallengeHolder"
  fullName: "com.azure.core.http.netty.implementation.ChallengeHolder"
  type: "Class"
  package: "com.azure.core.http.netty.implementation"
  summary: "Model class that contains the authentication challenges returned by a server."
  syntax:
    content: "public final class ChallengeHolder"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.http.netty.implementation.ChallengeHolder.ChallengeHolder(boolean,java.util.List<java.util.Map<java.lang.String,java.lang.String>>)"
  id: "ChallengeHolder(boolean,java.util.List<java.util.Map<java.lang.String,java.lang.String>>)"
  parent: "com.azure.core.http.netty.implementation.ChallengeHolder"
  langs:
  - "java"
  name: "ChallengeHolder(boolean hasBasicChallenge, List<Map<String,String>> digestChallenges)"
  nameWithType: "ChallengeHolder.ChallengeHolder(boolean hasBasicChallenge, List<Map<String,String>> digestChallenges)"
  fullName: "com.azure.core.http.netty.implementation.ChallengeHolder.ChallengeHolder(boolean hasBasicChallenge, List<Map<String,String>> digestChallenges)"
  overload: "com.azure.core.http.netty.implementation.ChallengeHolder.ChallengeHolder*"
  type: "Constructor"
  package: "com.azure.core.http.netty.implementation"
  summary: "Creates a <xref uid=\"com.azure.core.http.netty.implementation.ChallengeHolder\" data-throw-if-not-resolved=\"false\">ChallengeHolder</xref> which contains the parsed authentication digest challenges and a flag indicating if basic authorization is accepted."
  syntax:
    content: "public ChallengeHolder(boolean hasBasicChallenge, List<Map<String,String>> digestChallenges)"
    parameters:
    - id: "hasBasicChallenge"
      type: "boolean"
      description: "Flag indicating if basic authorization is accepted."
    - id: "digestChallenges"
      type: "java.util.List<java.util.Map<java.lang.String,java.lang.String>>"
      description: "Parsed digest challenges."
- uid: "com.azure.core.http.netty.implementation.ChallengeHolder.getDigestChallenges()"
  id: "getDigestChallenges()"
  parent: "com.azure.core.http.netty.implementation.ChallengeHolder"
  langs:
  - "java"
  name: "getDigestChallenges()"
  nameWithType: "ChallengeHolder.getDigestChallenges()"
  fullName: "com.azure.core.http.netty.implementation.ChallengeHolder.getDigestChallenges()"
  overload: "com.azure.core.http.netty.implementation.ChallengeHolder.getDigestChallenges*"
  type: "Method"
  package: "com.azure.core.http.netty.implementation"
  syntax:
    content: "public List<Map<String,String>> getDigestChallenges()"
    return:
      type: "java.util.List<java.util.Map<java.lang.String,java.lang.String>>"
      description: "The parsed digest challenges."
- uid: "com.azure.core.http.netty.implementation.ChallengeHolder.hasBasicChallenge()"
  id: "hasBasicChallenge()"
  parent: "com.azure.core.http.netty.implementation.ChallengeHolder"
  langs:
  - "java"
  name: "hasBasicChallenge()"
  nameWithType: "ChallengeHolder.hasBasicChallenge()"
  fullName: "com.azure.core.http.netty.implementation.ChallengeHolder.hasBasicChallenge()"
  overload: "com.azure.core.http.netty.implementation.ChallengeHolder.hasBasicChallenge*"
  type: "Method"
  package: "com.azure.core.http.netty.implementation"
  syntax:
    content: "public boolean hasBasicChallenge()"
    return:
      type: "boolean"
      description: "Flag indicating if basic authorization is accepted."
references:
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "java.util.List<java.util.Map<java.lang.String,java.lang.String>>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.http.netty.implementation.ChallengeHolder.ChallengeHolder*"
  name: "ChallengeHolder"
  nameWithType: "ChallengeHolder.ChallengeHolder"
  fullName: "com.azure.core.http.netty.implementation.ChallengeHolder.ChallengeHolder"
  package: "com.azure.core.http.netty.implementation"
- uid: "com.azure.core.http.netty.implementation.ChallengeHolder.hasBasicChallenge*"
  name: "hasBasicChallenge"
  nameWithType: "ChallengeHolder.hasBasicChallenge"
  fullName: "com.azure.core.http.netty.implementation.ChallengeHolder.hasBasicChallenge"
  package: "com.azure.core.http.netty.implementation"
- uid: "com.azure.core.http.netty.implementation.ChallengeHolder.getDigestChallenges*"
  name: "getDigestChallenges"
  nameWithType: "ChallengeHolder.getDigestChallenges"
  fullName: "com.azure.core.http.netty.implementation.ChallengeHolder.getDigestChallenges"
  package: "com.azure.core.http.netty.implementation"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
