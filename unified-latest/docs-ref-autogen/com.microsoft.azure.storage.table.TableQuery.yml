### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.table.TableQuery"
  id: "TableQuery"
  parent: "com.microsoft.azure.storage.table"
  children:
  - "com.microsoft.azure.storage.table.TableQuery.<T>from(java.lang.Class<T>)"
  - "com.microsoft.azure.storage.table.TableQuery.Operators"
  - "com.microsoft.azure.storage.table.TableQuery.QueryComparisons"
  - "com.microsoft.azure.storage.table.TableQuery.TableQuery()"
  - "com.microsoft.azure.storage.table.TableQuery.TableQuery(java.lang.Class<T>)"
  - "com.microsoft.azure.storage.table.TableQuery.combineFilters(java.lang.String,java.lang.String,java.lang.String)"
  - "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,boolean)"
  - "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,byte[])"
  - "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,double)"
  - "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,int)"
  - "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,java.lang.Byte[])"
  - "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,java.lang.String)"
  - "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.storage.table.EdmType)"
  - "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,java.util.Date)"
  - "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,java.util.UUID)"
  - "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,long)"
  - "com.microsoft.azure.storage.table.TableQuery.generateQueryBuilder()"
  - "com.microsoft.azure.storage.table.TableQuery.getClazzType()"
  - "com.microsoft.azure.storage.table.TableQuery.getColumns()"
  - "com.microsoft.azure.storage.table.TableQuery.getFilterString()"
  - "com.microsoft.azure.storage.table.TableQuery.getSourceTableName()"
  - "com.microsoft.azure.storage.table.TableQuery.getTakeCount()"
  - "com.microsoft.azure.storage.table.TableQuery.select(java.lang.String[])"
  - "com.microsoft.azure.storage.table.TableQuery.setClazzType(java.lang.Class<T>)"
  - "com.microsoft.azure.storage.table.TableQuery.setColumns(java.lang.String[])"
  - "com.microsoft.azure.storage.table.TableQuery.setFilterString(java.lang.String)"
  - "com.microsoft.azure.storage.table.TableQuery.setSourceTableName(java.lang.String)"
  - "com.microsoft.azure.storage.table.TableQuery.setTakeCount(java.lang.Integer)"
  - "com.microsoft.azure.storage.table.TableQuery.take(java.lang.Integer)"
  - "com.microsoft.azure.storage.table.TableQuery.where(java.lang.String)"
  langs:
  - "java"
  name: "TableQuery<T>"
  nameWithType: "TableQuery<T>"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>"
  type: "Class"
  package: "com.microsoft.azure.storage.table"
  summary: "A class which represents a query against a specified table. A <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\">TableQuery</xref> instance aggregates the query parameters to use when the query is executed. One of the `execute` or `executeSegmented` methods of <xref uid=\"com.microsoft.azure.storage.table.CloudTableClient\" data-throw-if-not-resolved=\"false\">CloudTableClient</xref> must be called to execute the query. The parameters are encoded and passed to the server when the table query is executed.\n\nTo create a table query with fluent syntax, the <xref uid=\"\" data-throw-if-not-resolved=\"false\">#from</xref> static factory method and the <xref uid=\"\" data-throw-if-not-resolved=\"false\">#where</xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\">#select</xref>, and <xref uid=\"\" data-throw-if-not-resolved=\"false\">#take</xref> mutator methods each return a reference to the object which can be chained into a single expression. Use the <xref uid=\"com.microsoft.azure.storage.table.TableQuery.&lt;T&gt;from(java.lang.Class&lt;T&gt;)\" data-throw-if-not-resolved=\"false\">#from(Class)</xref> static class factory method to create a `TableQuery` instance that executes on the named table with entities of the specified <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref> implementing type. Use the <xref uid=\"\" data-throw-if-not-resolved=\"false\">#where</xref> method to specify a filter expression for the entities returned. Use the <xref uid=\"\" data-throw-if-not-resolved=\"false\">#select</xref> method to specify the table entity properties to return. Use the <xref uid=\"\" data-throw-if-not-resolved=\"false\">#take</xref> method to limit the number of entities returned by the query. Note that nothing prevents calling these methods more than once on a `TableQuery`, so the values saved in the `TableQuery` will be the last encountered in order of execution.\n\nAs an example, you could construct a table query using fluent syntax:\n\n`TableQuery<TableServiceEntity> myQuery = TableQuery.from(\"Products\", DynamicTableEntity.class) \_\_\_\_.where(\"(PartitionKey eq 'ProductsMNO') and (RowKey ge 'Napkin')\") \_\_\_\_.take(25) \_\_\_\_.select(new String[] {\"InventoryCount\"});`\n\nThis example creates a query on the \"Products\" table for all entities where the PartitionKey value is \"ProductsMNO\" and the RowKey value is greater than or equal to \"Napkin\" and requests the first 25 matching entities, selecting only the common properties and the property named \"InventoryCount\", and returns them as <xref uid=\"com.microsoft.azure.storage.table.DynamicTableEntity\" data-throw-if-not-resolved=\"false\">DynamicTableEntity</xref> objects.\n\nFilter expressions for use with the <xref uid=\"\" data-throw-if-not-resolved=\"false\">#where</xref> method or <xref uid=\"\" data-throw-if-not-resolved=\"false\">#setFilterString</xref> method can be created using fluent syntax with the overloaded <xref uid=\"\" data-throw-if-not-resolved=\"false\">#generateFilterCondition</xref> methods and <xref uid=\"\" data-throw-if-not-resolved=\"false\">#combineFilters</xref> method, using the comparison operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\">QueryComparisons</xref> and the logical operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\">Operators</xref>. Note that the first operand in a filter comparison must be a property name, and the second operand must evaluate to a constant. The PartitionKey and RowKey property values are `String` types for comparison purposes.\n\nThe values that may be used in table queries are explained in more detail in the MSDN topic [Querying Tables and Entities][], but note that the space characters within values do not need to be URL-encoded, as this will be done when the query is executed.\n\nThe <xref uid=\"com.microsoft.azure.storage.table.TableQuery.TableQuery(java.lang.Class&lt;T&gt;)\" data-throw-if-not-resolved=\"false\">TableQuery#TableQuery(Class)</xref> constructor and <xref uid=\"com.microsoft.azure.storage.table.TableQuery.&lt;T&gt;from(java.lang.Class&lt;T&gt;)\" data-throw-if-not-resolved=\"false\">TableQuery#from(Class)</xref> static factory methods require a class type which implements <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref> and contains a nullary constructor. If the query will be executed using an <xref uid=\"com.microsoft.azure.storage.table.EntityResolver\" data-throw-if-not-resolved=\"false\">EntityResolver</xref>, the caller may specify <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref> `.class` as the class type.\n\n\n[Querying Tables and Entities]: http://msdn.microsoft.com/en-us/library/azure/dd894031.aspx"
  syntax:
    content: "public class TableQuery<T>"
    typeParameters:
    - id: "T"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.table.TableQuery.<T>from(java.lang.Class<T>)"
  id: "<T>from(java.lang.Class<T>)"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "<T>from(Class<T> clazzType)"
  nameWithType: "TableQuery<T>.<T>from(Class<T> clazzType)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.<T>from(Class<T> clazzType)"
  overload: "com.microsoft.azure.storage.table.TableQuery.from*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "A static factory method that constructs a <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\">TableQuery</xref> instance and defines its table entity type. The method returns the <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\">TableQuery</xref> instance reference, allowing additional methods to be chained to modify the query.\n\nThe created <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\">TableQuery</xref> instance is specialized for table entities of the specified class type T. Callers may specify <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref> `.class` as the class type parameter if no more specialized type is required."
  syntax:
    content: "public static TableQuery<T> <T>from(Class<T> clazzType)"
    parameters:
    - id: "clazzType"
      type: "java.lang.Class<T>"
      description: "The <code>java.lang.Class</code> of the class <code>T</code> implementing the <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref>\n            interface that represents the table entity type for the query."
    return:
      type: "com.microsoft.azure.storage.table.TableQuery<T>"
      description: "The <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\">TableQuery</xref> instance with the entity type specialization set."
- uid: "com.microsoft.azure.storage.table.TableQuery.TableQuery()"
  id: "TableQuery()"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "TableQuery()"
  nameWithType: "TableQuery<T>.TableQuery()"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.TableQuery()"
  overload: "com.microsoft.azure.storage.table.TableQuery.TableQuery*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.table"
  summary: "Initializes an empty <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\">TableQuery</xref> instance. This table query cannot be executed without setting a table entity type."
  syntax:
    content: "public TableQuery()"
- uid: "com.microsoft.azure.storage.table.TableQuery.TableQuery(java.lang.Class<T>)"
  id: "TableQuery(java.lang.Class<T>)"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "TableQuery(Class<T> clazzType)"
  nameWithType: "TableQuery<T>.TableQuery(Class<T> clazzType)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.TableQuery(Class<T> clazzType)"
  overload: "com.microsoft.azure.storage.table.TableQuery.TableQuery*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.table"
  summary: "Initializes a <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\">TableQuery</xref> with the specified table entity type. Callers may specify <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref>`.class` as the class type parameter if no more specialized type is required."
  syntax:
    content: "public TableQuery(Class<T> clazzType)"
    parameters:
    - id: "clazzType"
      type: "java.lang.Class<T>"
      description: "The <code>java.lang.Class</code> of the class <code>T</code> that represents the table entity type for\n            the query. Class <code>T</code> must be a type that implements <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref> and has a nullary\n            constructor."
- uid: "com.microsoft.azure.storage.table.TableQuery.combineFilters(java.lang.String,java.lang.String,java.lang.String)"
  id: "combineFilters(java.lang.String,java.lang.String,java.lang.String)"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "combineFilters(String filterA, String operator, String filterB)"
  nameWithType: "TableQuery<T>.combineFilters(String filterA, String operator, String filterB)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.combineFilters(String filterA, String operator, String filterB)"
  overload: "com.microsoft.azure.storage.table.TableQuery.combineFilters*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Creates a filter condition using the specified logical operator on two filter conditions."
  syntax:
    content: "public static String combineFilters(String filterA, String operator, String filterB)"
    parameters:
    - id: "filterA"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the first formatted filter condition."
    - id: "operator"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies <code>Operators.AND</code> or <code>Operators.OR</code>."
    - id: "filterB"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the first formatted filter condition."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the combined filter expression."
- uid: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,boolean)"
  id: "generateFilterCondition(java.lang.String,java.lang.String,boolean)"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "generateFilterCondition(String propertyName, String operation, boolean value)"
  nameWithType: "TableQuery<T>.generateFilterCondition(String propertyName, String operation, boolean value)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.generateFilterCondition(String propertyName, String operation, boolean value)"
  overload: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Generates a property filter condition string for a `boolean` value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a boolean, as in the following example:\n\n`String condition = generateFilterCondition(\"BooleanProperty\", QueryComparisons.EQUAL, false);`\n\nThis statement sets `condition` to the following value:\n\n`BooleanProperty eq false`"
  syntax:
    content: "public static String generateFilterCondition(String propertyName, String operation, boolean value)"
    parameters:
    - id: "propertyName"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the name of the property to compare."
    - id: "operation"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the comparison operator to use."
    - id: "value"
      type: "boolean"
      description: "A <code>boolean</code> which specifies the value to compare with the property."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the formatted filter condition."
- uid: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,byte[])"
  id: "generateFilterCondition(java.lang.String,java.lang.String,byte[])"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "generateFilterCondition(String propertyName, String operation, byte[] value)"
  nameWithType: "TableQuery<T>.generateFilterCondition(String propertyName, String operation, byte[] value)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.generateFilterCondition(String propertyName, String operation, byte[] value)"
  overload: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Generates a property filter condition string for a `byte[]` value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a binary value, as in the following example:\n\n`String condition = generateFilterCondition(\"ByteArray\", QueryComparisons.EQUAL, new byte[] {0x01, 0x0f});`\n\nThis statement sets `condition` to the following value:\n\n`ByteArray eq X'010f'`"
  syntax:
    content: "public static String generateFilterCondition(String propertyName, String operation, byte[] value)"
    parameters:
    - id: "propertyName"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the name of the property to compare."
    - id: "operation"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the comparison operator to use."
    - id: "value"
      type: "byte[]"
      description: "A <code>byte</code> array which specifies the value to compare with the property."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the formatted filter condition."
- uid: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,double)"
  id: "generateFilterCondition(java.lang.String,java.lang.String,double)"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "generateFilterCondition(String propertyName, String operation, double value)"
  nameWithType: "TableQuery<T>.generateFilterCondition(String propertyName, String operation, double value)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.generateFilterCondition(String propertyName, String operation, double value)"
  overload: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Generates a property filter condition string for a `double` value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a double value, as in the following example:\n\n`String condition = generateFilterCondition(\"Circumference\", QueryComparisons.EQUAL, 2 * 3.141592);`\n\nThis statement sets `condition` to the following value:\n\n`Circumference eq 6.283184`"
  syntax:
    content: "public static String generateFilterCondition(String propertyName, String operation, double value)"
    parameters:
    - id: "propertyName"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the name of the property to compare."
    - id: "operation"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the comparison operator to use."
    - id: "value"
      type: "double"
      description: "A <code>double</code> which specifies the value to compare with the property."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the formatted filter condition."
- uid: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,int)"
  id: "generateFilterCondition(java.lang.String,java.lang.String,int)"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "generateFilterCondition(String propertyName, String operation, int value)"
  nameWithType: "TableQuery<T>.generateFilterCondition(String propertyName, String operation, int value)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.generateFilterCondition(String propertyName, String operation, int value)"
  overload: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Generates a property filter condition string for an `int` value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a numeric value, as in the following example:\n\n`String condition = generateFilterCondition(\"Population\", QueryComparisons.GREATER_THAN, 1000);`\n\nThis statement sets `condition` to the following value:\n\n`Population gt 1000`"
  syntax:
    content: "public static String generateFilterCondition(String propertyName, String operation, int value)"
    parameters:
    - id: "propertyName"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the name of the property to compare."
    - id: "operation"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the comparison operator to use."
    - id: "value"
      type: "int"
      description: "An <code>int</code> which specifies the value to compare with the property."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the formatted filter condition."
- uid: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,java.lang.Byte[])"
  id: "generateFilterCondition(java.lang.String,java.lang.String,java.lang.Byte[])"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "generateFilterCondition(String propertyName, String operation, Byte[] value)"
  nameWithType: "TableQuery<T>.generateFilterCondition(String propertyName, String operation, Byte[] value)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.generateFilterCondition(String propertyName, String operation, Byte[] value)"
  overload: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Generates a property filter condition string for a `Byte[]` value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a binary value, as in the following example:\n\n`String condition = generateFilterCondition(\"ByteArray\", QueryComparisons.EQUAL, new Byte[] {0x01, 0xfe});`\n\nThis statement sets `condition` to the following value:\n\n`ByteArray eq X'01fe'`"
  syntax:
    content: "public static String generateFilterCondition(String propertyName, String operation, Byte[] value)"
    parameters:
    - id: "propertyName"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the name of the property to compare."
    - id: "operation"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the comparison operator to use."
    - id: "value"
      type: "java.lang.Byte[]"
      description: "A <code>Byte</code> array which specifies the value to compare with the property."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the formatted filter condition."
- uid: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,java.lang.String)"
  id: "generateFilterCondition(java.lang.String,java.lang.String,java.lang.String)"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "generateFilterCondition(String propertyName, String operation, String value)"
  nameWithType: "TableQuery<T>.generateFilterCondition(String propertyName, String operation, String value)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.generateFilterCondition(String propertyName, String operation, String value)"
  overload: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Generates a property filter condition string for a `String` value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a string value, as in the following example:\n\n`String condition = generateFilterCondition(\"Platform\", QueryComparisons.EQUAL, \"Azure\");`\n\nThis statement sets `condition` to the following value:\n\n`Platform eq 'Azure'`"
  syntax:
    content: "public static String generateFilterCondition(String propertyName, String operation, String value)"
    parameters:
    - id: "propertyName"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the name of the property to compare."
    - id: "operation"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the comparison operator to use."
    - id: "value"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the value to compare with the property."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the formatted filter condition."
- uid: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.storage.table.EdmType)"
  id: "generateFilterCondition(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.storage.table.EdmType)"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "generateFilterCondition(String propertyName, String operation, String value, EdmType edmType)"
  nameWithType: "TableQuery<T>.generateFilterCondition(String propertyName, String operation, String value, EdmType edmType)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.generateFilterCondition(String propertyName, String operation, String value, EdmType edmType)"
  overload: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Generates a property filter condition string. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as the specified <xref uid=\"com.microsoft.azure.storage.table.EdmType\" data-throw-if-not-resolved=\"false\">EdmType</xref>."
  syntax:
    content: "public static String generateFilterCondition(String propertyName, String operation, String value, EdmType edmType)"
    parameters:
    - id: "propertyName"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the name of the property to compare."
    - id: "operation"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the comparison operator to use."
    - id: "value"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the value to compare with the property."
    - id: "edmType"
      type: "com.microsoft.azure.storage.table.EdmType"
      description: "The <xref uid=\"com.microsoft.azure.storage.table.EdmType\" data-throw-if-not-resolved=\"false\">EdmType</xref> to format the value as."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the formatted filter condition."
- uid: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,java.util.Date)"
  id: "generateFilterCondition(java.lang.String,java.lang.String,java.util.Date)"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "generateFilterCondition(String propertyName, String operation, Date value)"
  nameWithType: "TableQuery<T>.generateFilterCondition(String propertyName, String operation, Date value)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.generateFilterCondition(String propertyName, String operation, Date value)"
  overload: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Generates a property filter condition string for a `java.util.Date` value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a datetime value, as in the following example:\n\n`String condition = generateFilterCondition(\"FutureDate\", QueryComparisons.GREATER_THAN, new Date());`\n\nThis statement sets `condition` to something like the following value:\n\n`FutureDate gt datetime'2013-01-31T09:00:00'`"
  syntax:
    content: "public static String generateFilterCondition(String propertyName, String operation, Date value)"
    parameters:
    - id: "propertyName"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the name of the property to compare."
    - id: "operation"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the comparison operator to use."
    - id: "value"
      type: "java.util.Date"
      description: "A <code>java.util.Date</code> which specifies the value to compare with the property."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the formatted filter condition."
- uid: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,java.util.UUID)"
  id: "generateFilterCondition(java.lang.String,java.lang.String,java.util.UUID)"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "generateFilterCondition(String propertyName, String operation, UUID value)"
  nameWithType: "TableQuery<T>.generateFilterCondition(String propertyName, String operation, UUID value)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.generateFilterCondition(String propertyName, String operation, UUID value)"
  overload: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Generates a property filter condition string for a `UUID` value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a UUID value, as in the following example:\n\n`String condition = generateFilterCondition(\"Identity\", QueryComparisons.EQUAL, UUID.fromString(` `\"c9da6455-213d-42c9-9a79-3e9149a57833\"));`\n\nThis statement sets `condition` to the following value:\n\n`Identity eq guid'c9da6455-213d-42c9-9a79-3e9149a57833'`"
  syntax:
    content: "public static String generateFilterCondition(String propertyName, String operation, UUID value)"
    parameters:
    - id: "propertyName"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the name of the property to compare."
    - id: "operation"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the comparison operator to use."
    - id: "value"
      type: "java.util.UUID"
      description: "A <code>UUID</code> which specifies the value to compare with the property."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the formatted filter condition."
- uid: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition(java.lang.String,java.lang.String,long)"
  id: "generateFilterCondition(java.lang.String,java.lang.String,long)"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "generateFilterCondition(String propertyName, String operation, long value)"
  nameWithType: "TableQuery<T>.generateFilterCondition(String propertyName, String operation, long value)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.generateFilterCondition(String propertyName, String operation, long value)"
  overload: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Generates a property filter condition string for a `long` value. Creates a formatted string to use in a filter expression that uses the specified operation to compare the property with the value, formatted as a numeric value, as in the following example:\n\n`String condition = generateFilterCondition(\"StellarMass\", QueryComparisons.GREATER_THAN, 7000000000L);`\n\nThis statement sets `condition` to the following value:\n\n`StellarMass gt 7000000000`"
  syntax:
    content: "public static String generateFilterCondition(String propertyName, String operation, long value)"
    parameters:
    - id: "propertyName"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the name of the property to compare."
    - id: "operation"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the comparison operator to use."
    - id: "value"
      type: "long"
      description: "A <code>long</code> which specifies the value to compare with the property."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the formatted filter condition."
- uid: "com.microsoft.azure.storage.table.TableQuery.generateQueryBuilder()"
  id: "generateQueryBuilder()"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "generateQueryBuilder()"
  nameWithType: "TableQuery<T>.generateQueryBuilder()"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.generateQueryBuilder()"
  overload: "com.microsoft.azure.storage.table.TableQuery.generateQueryBuilder*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Reserved for internal use. Creates a <xref uid=\"com.microsoft.azure.storage.core.UriQueryBuilder\" data-throw-if-not-resolved=\"false\">UriQueryBuilder</xref> object representing the table query."
  syntax:
    content: "protected UriQueryBuilder generateQueryBuilder()"
    return:
      type: "com.microsoft.azure.storage.core.UriQueryBuilder"
      description: "A <xref uid=\"com.microsoft.azure.storage.core.UriQueryBuilder\" data-throw-if-not-resolved=\"false\">UriQueryBuilder</xref> object representing the table query."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "if an error occurs in adding or encoding the query parameters."
- uid: "com.microsoft.azure.storage.table.TableQuery.getClazzType()"
  id: "getClazzType()"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "getClazzType()"
  nameWithType: "TableQuery<T>.getClazzType()"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.getClazzType()"
  overload: "com.microsoft.azure.storage.table.TableQuery.getClazzType*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Gets the class type of the table entities returned by the query."
  syntax:
    content: "public Class<T> getClazzType()"
    return:
      type: "java.lang.Class<T>"
      description: "The <code>java.lang.Class</code> of the class <code>T</code> that represents the table entity type for\n         the query."
- uid: "com.microsoft.azure.storage.table.TableQuery.getColumns()"
  id: "getColumns()"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "getColumns()"
  nameWithType: "TableQuery<T>.getColumns()"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.getColumns()"
  overload: "com.microsoft.azure.storage.table.TableQuery.getColumns*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Gets an array of the table entity property names specified in the table query. All properties in the table are returned by default if no property names are specified with a select clause in the table query. The table entity properties to return may be specified with a call to the <xref uid=\"\" data-throw-if-not-resolved=\"false\">#setColumns</xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\">#select</xref> methods with a array of property names as parameter.\n\nNote that the system properties `PartitionKey`, `RowKey`, and `Timestamp` are automatically requested from the table service whether specified in the <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\">TableQuery</xref> or not."
  syntax:
    content: "public String[] getColumns()"
    return:
      type: "java.lang.String[]"
      description: "An array of <code>String</code> objects which represents the property names of the table entity properties to\n         return in the query."
- uid: "com.microsoft.azure.storage.table.TableQuery.getFilterString()"
  id: "getFilterString()"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "getFilterString()"
  nameWithType: "TableQuery<T>.getFilterString()"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.getFilterString()"
  overload: "com.microsoft.azure.storage.table.TableQuery.getFilterString*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Gets the filter expression specified in the table query. All entities in the table are returned by default if no filter expression is specified in the table query. A filter for the entities to return may be specified with a call to the <xref uid=\"\" data-throw-if-not-resolved=\"false\">#setFilterString</xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\">#where</xref> methods."
  syntax:
    content: "public String getFilterString()"
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the filter expression used in the query."
- uid: "com.microsoft.azure.storage.table.TableQuery.getSourceTableName()"
  id: "getSourceTableName()"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "getSourceTableName()"
  nameWithType: "TableQuery<T>.getSourceTableName()"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.getSourceTableName()"
  overload: "com.microsoft.azure.storage.table.TableQuery.getSourceTableName*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Gets the name of the source table specified in the table query."
  syntax:
    content: "protected String getSourceTableName()"
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the name of the source table used in the query."
- uid: "com.microsoft.azure.storage.table.TableQuery.getTakeCount()"
  id: "getTakeCount()"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "getTakeCount()"
  nameWithType: "TableQuery<T>.getTakeCount()"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.getTakeCount()"
  overload: "com.microsoft.azure.storage.table.TableQuery.getTakeCount*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Gets the number of entities the query returns specified in the table query. If this value is not specified in a table query, a maximum of 1,000 entries will be returned. The number of entities to return may be specified with a call to the <xref uid=\"\" data-throw-if-not-resolved=\"false\">#setTakeCount</xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\">#take</xref> methods.\n\nIf the value returned by `getTakeCount` is greater than 1,000, the query will throw a <xref uid=\"com.microsoft.azure.storage.StorageException\" data-throw-if-not-resolved=\"false\">StorageException</xref> when executed."
  syntax:
    content: "public Integer getTakeCount()"
    return:
      type: "java.lang.Integer"
      description: "An <code>Integer</code> which represents the maximum number of entities for the table query to return."
- uid: "com.microsoft.azure.storage.table.TableQuery.select(java.lang.String[])"
  id: "select(java.lang.String[])"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "select(String[] columns)"
  nameWithType: "TableQuery<T>.select(String[] columns)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.select(String[] columns)"
  overload: "com.microsoft.azure.storage.table.TableQuery.select*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Defines the property names of the table entity properties to return when the table query is executed. The `select` clause is optional on a table query, used to limit the table properties returned from the server. By default, a query will return all properties from the table entity.\n\nNote that the system properties `PartitionKey`, `RowKey`, and `Timestamp` are automatically requested from the table service whether specified in the <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\">TableQuery</xref> or not."
  syntax:
    content: "public TableQuery<T> select(String[] columns)"
    parameters:
    - id: "columns"
      type: "java.lang.String[]"
      description: "An array of <code>String</code> objects which specify the property names of the table entity properties\n            to return when the query is executed."
    return:
      type: "com.microsoft.azure.storage.table.TableQuery<T>"
      description: "A reference to the <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\">TableQuery</xref> instance with the table entity properties to return set."
- uid: "com.microsoft.azure.storage.table.TableQuery.setClazzType(java.lang.Class<T>)"
  id: "setClazzType(java.lang.Class<T>)"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "setClazzType(Class<T> clazzType)"
  nameWithType: "TableQuery<T>.setClazzType(Class<T> clazzType)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.setClazzType(Class<T> clazzType)"
  overload: "com.microsoft.azure.storage.table.TableQuery.setClazzType*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Sets the class type of the table entities returned by the query. A class type is required to execute a table query.\n\nCallers may specify <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref>`.class` as the class type parameter if no more specialized type is required."
  syntax:
    content: "public void setClazzType(Class<T> clazzType)"
    parameters:
    - id: "clazzType"
      type: "java.lang.Class<T>"
      description: "The <code>java.lang.Class</code> of the class <code>T</code> that represents the table entity type for\n            the query. Class <code>T</code> must be a type that implements <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref> and has a nullary\n            constructor,"
- uid: "com.microsoft.azure.storage.table.TableQuery.setColumns(java.lang.String[])"
  id: "setColumns(java.lang.String[])"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "setColumns(String[] columns)"
  nameWithType: "TableQuery<T>.setColumns(String[] columns)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.setColumns(String[] columns)"
  overload: "com.microsoft.azure.storage.table.TableQuery.setColumns*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Sets the property names of the table entity properties to return when the table query is executed. By default, a query will return all properties from the table entity.\n\nNote that the system properties `PartitionKey`, `RowKey`, and `Timestamp` are automatically requested from the table service whether specified in the <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\">TableQuery</xref> or not."
  syntax:
    content: "public void setColumns(String[] columns)"
    parameters:
    - id: "columns"
      type: "java.lang.String[]"
      description: "An array of <code>String</code> objects which specify the property names of the table entity properties\n            to return when the query is executed."
- uid: "com.microsoft.azure.storage.table.TableQuery.setFilterString(java.lang.String)"
  id: "setFilterString(java.lang.String)"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "setFilterString(String filterString)"
  nameWithType: "TableQuery<T>.setFilterString(String filterString)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.setFilterString(String filterString)"
  overload: "com.microsoft.azure.storage.table.TableQuery.setFilterString*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Sets the filter expression to use in the table query. A filter expression is optional; by default a table query will return all entities in the table.\n\nFilter expressions for use with the <xref uid=\"\" data-throw-if-not-resolved=\"false\">#setFilterString</xref> method can be created using fluent syntax with the overloaded <xref uid=\"\" data-throw-if-not-resolved=\"false\">#generateFilterCondition</xref> methods and <xref uid=\"\" data-throw-if-not-resolved=\"false\">#combineFilters</xref> method, using the comparison operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\">QueryComparisons</xref> and the logical operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\">Operators</xref>. Note that the first operand in a filter comparison must be a property name, and the second operand must evaluate to a constant. The PartitionKey and RowKey property values are `String` types for comparison purposes. For example, to query all entities with a PartitionKey value of \"AccessLogs\" on table query `myQuery`:\n\n`\_\_\_\_myQuery.setFilterString(\"PartitionKey eq 'AccessLogs'\");`\n\nThe values that may be used in table queries are explained in more detail in the MSDN topic [Querying Tables and Entities][], but note that the space characters within values do not need to be URL-encoded, as this will be done when the query is executed.\n\nNote that no more than 15 discrete comparisons are permitted within a filter string.\n\n\n[Querying Tables and Entities]: http://msdn.microsoft.com/en-us/library/azure/dd894031.aspx"
  syntax:
    content: "public void setFilterString(String filterString)"
    parameters:
    - id: "filterString"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the filter expression to use in the query."
- uid: "com.microsoft.azure.storage.table.TableQuery.setSourceTableName(java.lang.String)"
  id: "setSourceTableName(java.lang.String)"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "setSourceTableName(String sourceTableName)"
  nameWithType: "TableQuery<T>.setSourceTableName(String sourceTableName)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.setSourceTableName(String sourceTableName)"
  overload: "com.microsoft.azure.storage.table.TableQuery.setSourceTableName*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Sets the name of the source table for the table query. A table query must have a source table to be executed."
  syntax:
    content: "protected void setSourceTableName(String sourceTableName)"
    parameters:
    - id: "sourceTableName"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the name of the source table to use in the query."
- uid: "com.microsoft.azure.storage.table.TableQuery.setTakeCount(java.lang.Integer)"
  id: "setTakeCount(java.lang.Integer)"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "setTakeCount(Integer takeCount)"
  nameWithType: "TableQuery<T>.setTakeCount(Integer takeCount)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.setTakeCount(Integer takeCount)"
  overload: "com.microsoft.azure.storage.table.TableQuery.setTakeCount*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Sets the upper bound for the number of entities the query returns. If this value is not specified in a table query, by default a maximum of 1,000 entries will be returned.\n\nIf the value specified for the `takeCount` parameter is greater than 1,000, the query will throw a <xref uid=\"com.microsoft.azure.storage.StorageException\" data-throw-if-not-resolved=\"false\">StorageException</xref> when executed."
  syntax:
    content: "public void setTakeCount(Integer takeCount)"
    parameters:
    - id: "takeCount"
      type: "java.lang.Integer"
      description: "An <code>Integer</code> which represents the maximum number of entities for the table query to return."
- uid: "com.microsoft.azure.storage.table.TableQuery.take(java.lang.Integer)"
  id: "take(java.lang.Integer)"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "take(Integer take)"
  nameWithType: "TableQuery<T>.take(Integer take)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.take(Integer take)"
  overload: "com.microsoft.azure.storage.table.TableQuery.take*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Defines the upper bound for the number of entities the query returns. If this value is not specified in a table query, by default a maximum of 1,000 entries will be returned.\n\nIf the value specified for the `take` parameter is greater than 1,000, the query will throw a <xref uid=\"com.microsoft.azure.storage.StorageException\" data-throw-if-not-resolved=\"false\">StorageException</xref> when executed."
  syntax:
    content: "public TableQuery<T> take(Integer take)"
    parameters:
    - id: "take"
      type: "java.lang.Integer"
      description: "An <code>Integer</code> which represents the maximum number of entities for the table query to return."
    return:
      type: "com.microsoft.azure.storage.table.TableQuery<T>"
      description: "A reference to the <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\">TableQuery</xref> instance with the number of entities to return set."
- uid: "com.microsoft.azure.storage.table.TableQuery.where(java.lang.String)"
  id: "where(java.lang.String)"
  parent: "com.microsoft.azure.storage.table.TableQuery"
  langs:
  - "java"
  name: "where(String filter)"
  nameWithType: "TableQuery<T>.where(String filter)"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.where(String filter)"
  overload: "com.microsoft.azure.storage.table.TableQuery.where*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Defines a filter expression for the table query. Only entities that satisfy the specified filter expression will be returned by the query. Setting a filter expression is optional; by default, all entities in the table are returned if no filter expression is specified in the table query.\n\nFilter expressions for use with the <xref uid=\"\" data-throw-if-not-resolved=\"false\">#where</xref> method can be created using fluent syntax with the overloaded <xref uid=\"\" data-throw-if-not-resolved=\"false\">#generateFilterCondition</xref> methods and <xref uid=\"\" data-throw-if-not-resolved=\"false\">#combineFilters</xref> method, using the comparison operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\">QueryComparisons</xref> and the logical operators defined in <xref uid=\"\" data-throw-if-not-resolved=\"false\">Operators</xref>. Note that the first operand in a filter comparison must be a property name, and the second operand must evaluate to a constant. The PartitionKey and RowKey property values are `String` types for comparison purposes. For example, to query all entities with a PartitionKey value of \"AccessLogs\" on table query `myQuery`:\n\n`\_\_\_\_myQuery = myQuery.where(\"PartitionKey eq 'AccessLogs'\");`\n\nThe values that may be used in table queries are explained in more detail in the MSDN topic [Querying Tables and Entities][], but note that the space characters within values do not need to be URL-encoded, as this will be done when the query is executed.\n\nNote that no more than 15 discrete comparisons are permitted within a filter string.\n\n\n[Querying Tables and Entities]: http://msdn.microsoft.com/en-us/library/azure/dd894031.aspx"
  syntax:
    content: "public TableQuery<T> where(String filter)"
    parameters:
    - id: "filter"
      type: "java.lang.String"
      description: "A <code>String</code> which specifies the filter expression to apply to the table query."
    return:
      type: "com.microsoft.azure.storage.table.TableQuery<T>"
      description: "A reference to the <xref uid=\"com.microsoft.azure.storage.table.TableQuery\" data-throw-if-not-resolved=\"false\">TableQuery</xref> instance with the filter on entities to return set."
references:
- uid: "com.microsoft.azure.storage.table.TableQuery.TableQuery*"
  name: "TableQuery"
  nameWithType: "TableQuery<T>.TableQuery"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.TableQuery"
  package: "com.microsoft.azure.storage.table"
- uid: "java.lang.Class<T>"
  spec.java:
  - uid: "java.lang.Class"
    name: "Class"
    fullName: "java.lang.Class"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.table.TableQuery<T>"
  spec.java:
  - uid: "com.microsoft.azure.storage.table.TableQuery"
    name: "TableQuery"
    fullName: "com.microsoft.azure.storage.table.TableQuery"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.table.TableQuery.from*"
  name: "<T>from"
  nameWithType: "TableQuery<T>.<T>from"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.<T>from"
  package: "com.microsoft.azure.storage.table"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.microsoft.azure.storage.table.TableQuery.generateFilterCondition*"
  name: "generateFilterCondition"
  nameWithType: "TableQuery<T>.generateFilterCondition"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.generateFilterCondition"
  package: "com.microsoft.azure.storage.table"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "java.lang.Byte[]"
  spec.java:
  - uid: "java.lang.Byte"
    name: "Byte"
    fullName: "java.lang.Byte"
  - name: "[]"
    fullName: "[]"
- uid: "java.util.Date"
  spec.java:
  - uid: "java.util.Date"
    name: "Date"
    fullName: "java.util.Date"
- uid: "double"
  spec.java:
  - uid: "double"
    name: "double"
    fullName: "double"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.microsoft.azure.storage.table.EdmType"
  name: "EdmType"
  nameWithType: "EdmType"
  fullName: "com.microsoft.azure.storage.table.EdmType"
- uid: "java.util.UUID"
  spec.java:
  - uid: "java.util.UUID"
    name: "UUID"
    fullName: "java.util.UUID"
- uid: "com.microsoft.azure.storage.table.TableQuery.combineFilters*"
  name: "combineFilters"
  nameWithType: "TableQuery<T>.combineFilters"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.combineFilters"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableQuery.getClazzType*"
  name: "getClazzType"
  nameWithType: "TableQuery<T>.getClazzType"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.getClazzType"
  package: "com.microsoft.azure.storage.table"
- uid: "java.lang.String[]"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: "[]"
    fullName: "[]"
- uid: "com.microsoft.azure.storage.table.TableQuery.getColumns*"
  name: "getColumns"
  nameWithType: "TableQuery<T>.getColumns"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.getColumns"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableQuery.getFilterString*"
  name: "getFilterString"
  nameWithType: "TableQuery<T>.getFilterString"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.getFilterString"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableQuery.getSourceTableName*"
  name: "getSourceTableName"
  nameWithType: "TableQuery<T>.getSourceTableName"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.getSourceTableName"
  package: "com.microsoft.azure.storage.table"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "com.microsoft.azure.storage.table.TableQuery.getTakeCount*"
  name: "getTakeCount"
  nameWithType: "TableQuery<T>.getTakeCount"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.getTakeCount"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableQuery.select*"
  name: "select"
  nameWithType: "TableQuery<T>.select"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.select"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableQuery.setClazzType*"
  name: "setClazzType"
  nameWithType: "TableQuery<T>.setClazzType"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.setClazzType"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableQuery.setColumns*"
  name: "setColumns"
  nameWithType: "TableQuery<T>.setColumns"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.setColumns"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableQuery.setFilterString*"
  name: "setFilterString"
  nameWithType: "TableQuery<T>.setFilterString"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.setFilterString"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableQuery.setSourceTableName*"
  name: "setSourceTableName"
  nameWithType: "TableQuery<T>.setSourceTableName"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.setSourceTableName"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableQuery.setTakeCount*"
  name: "setTakeCount"
  nameWithType: "TableQuery<T>.setTakeCount"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.setTakeCount"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableQuery.take*"
  name: "take"
  nameWithType: "TableQuery<T>.take"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.take"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableQuery.where*"
  name: "where"
  nameWithType: "TableQuery<T>.where"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.where"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.StorageException"
  name: "StorageException"
  nameWithType: "StorageException"
  fullName: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.core.UriQueryBuilder"
  name: "UriQueryBuilder"
  nameWithType: "UriQueryBuilder"
  fullName: "com.microsoft.azure.storage.core.UriQueryBuilder"
- uid: "com.microsoft.azure.storage.table.TableQuery.generateQueryBuilder*"
  name: "generateQueryBuilder"
  nameWithType: "TableQuery<T>.generateQueryBuilder"
  fullName: "com.microsoft.azure.storage.table.TableQuery<T>.generateQueryBuilder"
  package: "com.microsoft.azure.storage.table"
- uid: "T"
  name: "T"
  nameWithType: "T"
  fullName: "T"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.microsoft.azure.storage.table.TableQuery.Operators"
  name: "TableQuery.Operators"
  nameWithType: "TableQuery.Operators"
  fullName: "com.microsoft.azure.storage.table.TableQuery.Operators"
- uid: "com.microsoft.azure.storage.table.TableQuery.QueryComparisons"
  name: "TableQuery.QueryComparisons"
  nameWithType: "TableQuery.QueryComparisons"
  fullName: "com.microsoft.azure.storage.table.TableQuery.QueryComparisons"
- uid: "java.lang.Class"
  name: "Class"
  nameWithType: "Class"
  fullName: "java.lang.Class"
