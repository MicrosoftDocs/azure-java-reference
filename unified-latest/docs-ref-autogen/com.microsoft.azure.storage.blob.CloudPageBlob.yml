### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob"
  id: "CloudPageBlob"
  parent: "com.microsoft.azure.storage.blob"
  children:
  - "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(com.microsoft.azure.storage.StorageUri)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(com.microsoft.azure.storage.StorageUri,com.microsoft.azure.storage.StorageCredentials)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.StorageCredentials)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(com.microsoft.azure.storage.blob.CloudPageBlob)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(java.lang.String,java.lang.String,com.microsoft.azure.storage.blob.CloudBlobContainer)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(java.net.URI)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(java.net.URI,com.microsoft.azure.storage.StorageCredentials)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(java.net.URI,java.lang.String,com.microsoft.azure.storage.StorageCredentials)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.clearPages(long,long)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.clearPages(long,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.create(long)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.create(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.create(long,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges()"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges(long,java.lang.Long)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges(long,java.lang.Long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRangesDiff(java.lang.String)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRangesDiff(java.lang.String,java.lang.Long,java.lang.Long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteExisting()"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteExisting(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteNew(long)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteNew(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteNew(long,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.putPagesFromURI(long,long,java.net.URI,java.lang.Long)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.putPagesFromURI(long,long,java.net.URI,java.lang.Long,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.resize(long)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.resize(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.setStreamWriteSizeInBytes(int)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.startCopy(com.microsoft.azure.storage.blob.CloudPageBlob)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.startCopy(com.microsoft.azure.storage.blob.CloudPageBlob,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.startCopy(com.microsoft.azure.storage.blob.CloudPageBlob,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy(com.microsoft.azure.storage.blob.CloudPageBlob)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy(com.microsoft.azure.storage.blob.CloudPageBlob,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy(java.net.URI)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy(java.net.URI,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.updateSequenceNumberFromResponse(java.net.HttpURLConnection)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.upload(java.io.InputStream,long)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.upload(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.upload(java.io.InputStream,long,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.uploadFromByteArray(byte[],int,int,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.uploadFromFile(java.lang.String,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPages(java.io.InputStream,long,long)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPages(java.io.InputStream,long,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPremiumPageBlobTier(com.microsoft.azure.storage.blob.PremiumPageBlobTier)"
  - "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPremiumPageBlobTier(com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  langs:
  - "java"
  name: "CloudPageBlob"
  nameWithType: "CloudPageBlob"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob"
  type: "Class"
  package: "com.microsoft.azure.storage.blob"
  summary: "Represents a Microsoft Azure page blob."
  syntax:
    content: "public final class CloudPageBlob extends CloudBlob"
  inheritance:
  - "java.lang.Object"
  - "com.microsoft.azure.storage.blob.CloudBlob"
  inheritedMembers:
  - "com.microsoft.azure.storage.blob.CloudBlob.<T,R>validateCPKHeaders(com.microsoft.azure.storage.core.StorageRequest<com.microsoft.azure.storage.blob.CloudBlobClient,T,R>,com.microsoft.azure.storage.blob.BlobRequestOptions,boolean)"
  - "com.microsoft.azure.storage.blob.CloudBlob.abortCopy(java.lang.String)"
  - "com.microsoft.azure.storage.blob.CloudBlob.abortCopy(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.acquireLease()"
  - "com.microsoft.azure.storage.blob.CloudBlob.acquireLease(java.lang.Integer,java.lang.String)"
  - "com.microsoft.azure.storage.blob.CloudBlob.acquireLease(java.lang.Integer,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.assertCorrectBlobType()"
  - "com.microsoft.azure.storage.blob.CloudBlob.assertNoWriteOperationForSnapshot()"
  - "com.microsoft.azure.storage.blob.CloudBlob.breakLease(java.lang.Integer)"
  - "com.microsoft.azure.storage.blob.CloudBlob.breakLease(java.lang.Integer,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.changeLease(java.lang.String,com.microsoft.azure.storage.AccessCondition)"
  - "com.microsoft.azure.storage.blob.CloudBlob.changeLease(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot()"
  - "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(java.util.HashMap<java.lang.String,java.lang.String>,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.delete()"
  - "com.microsoft.azure.storage.blob.CloudBlob.delete(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.deleteIfExists()"
  - "com.microsoft.azure.storage.blob.CloudBlob.deleteIfExists(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.deleteImpl(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions)"
  - "com.microsoft.azure.storage.blob.CloudBlob.download(java.io.OutputStream)"
  - "com.microsoft.azure.storage.blob.CloudBlob.download(java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInfo()"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInfo(com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInformationImpl(com.microsoft.azure.storage.RequestOptions)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadAttributes()"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadAttributes(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadRange(long,java.lang.Long,java.io.OutputStream)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadRange(long,java.lang.Long,java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeInternal(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeToByteArray(long,java.lang.Long,byte[],int)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeToByteArray(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadToByteArray(byte[],int)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadToByteArray(byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadToFile(java.lang.String)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadToFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.exists()"
  - "com.microsoft.azure.storage.blob.CloudBlob.exists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,java.lang.String)"
  - "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,java.lang.String,com.microsoft.azure.storage.IPRange,com.microsoft.azure.storage.SharedAccessProtocols)"
  - "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,java.lang.String)"
  - "com.microsoft.azure.storage.blob.CloudBlob.generateUserDelegationSharedAccessSignature(com.microsoft.azure.storage.UserDelegationKey,com.microsoft.azure.storage.blob.SharedAccessBlobPolicy)"
  - "com.microsoft.azure.storage.blob.CloudBlob.generateUserDelegationSharedAccessSignature(com.microsoft.azure.storage.UserDelegationKey,com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,com.microsoft.azure.storage.IPRange,com.microsoft.azure.storage.SharedAccessProtocols)"
  - "com.microsoft.azure.storage.blob.CloudBlob.getCanonicalName(boolean)"
  - "com.microsoft.azure.storage.blob.CloudBlob.getContainer()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getCopyState()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getMetadata()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getName()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getParent()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getParentNameFromURI(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.blob.CloudBlobContainer)"
  - "com.microsoft.azure.storage.blob.CloudBlob.getProperties()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getQualifiedStorageUri()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getQualifiedUri()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getServiceClient()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotID()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotQualifiedStorageUri()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotQualifiedUri()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getStorageUri()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getStreamMinimumReadSizeInBytes()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getStreamWriteSizeInBytes()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getTransformedAddress(com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.getUri()"
  - "com.microsoft.azure.storage.blob.CloudBlob.isSnapshot()"
  - "com.microsoft.azure.storage.blob.CloudBlob.openInputStream()"
  - "com.microsoft.azure.storage.blob.CloudBlob.openInputStream(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.openInputStream(long,java.lang.Long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.releaseLease(com.microsoft.azure.storage.AccessCondition)"
  - "com.microsoft.azure.storage.blob.CloudBlob.releaseLease(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.renewLease(com.microsoft.azure.storage.AccessCondition)"
  - "com.microsoft.azure.storage.blob.CloudBlob.renewLease(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.setContainer(com.microsoft.azure.storage.blob.CloudBlobContainer)"
  - "com.microsoft.azure.storage.blob.CloudBlob.setMetadata(java.util.HashMap<java.lang.String,java.lang.String>)"
  - "com.microsoft.azure.storage.blob.CloudBlob.setProperties(com.microsoft.azure.storage.blob.BlobProperties)"
  - "com.microsoft.azure.storage.blob.CloudBlob.setSnapshotID(java.lang.String)"
  - "com.microsoft.azure.storage.blob.CloudBlob.setStorageUri(com.microsoft.azure.storage.StorageUri)"
  - "com.microsoft.azure.storage.blob.CloudBlob.setStreamMinimumReadSizeInBytes(int)"
  - "com.microsoft.azure.storage.blob.CloudBlob.setStreamWriteSizeInBytes(int)"
  - "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI)"
  - "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,boolean,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,boolean,java.lang.String,com.microsoft.azure.storage.blob.RehydratePriority,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.startCopyImpl(java.net.URI,java.lang.String,boolean,boolean,java.lang.String,com.microsoft.azure.storage.blob.RehydratePriority,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions)"
  - "com.microsoft.azure.storage.blob.CloudBlob.undelete()"
  - "com.microsoft.azure.storage.blob.CloudBlob.undelete(com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.updateEtagAndLastModifiedFromResponse(java.net.HttpURLConnection)"
  - "com.microsoft.azure.storage.blob.CloudBlob.updateLengthFromResponse(java.net.HttpURLConnection)"
  - "com.microsoft.azure.storage.blob.CloudBlob.upload(java.io.InputStream,long)"
  - "com.microsoft.azure.storage.blob.CloudBlob.upload(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadBlobTierImpl(java.lang.String,java.lang.String,com.microsoft.azure.storage.blob.BlobRequestOptions)"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadFromByteArray(byte[],int,int)"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadFromByteArray(byte[],int,int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadFromFile(java.lang.String)"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadFromFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadMetadata()"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadMetadata(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadProperties()"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadProperties(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(com.microsoft.azure.storage.StorageUri)"
  id: "CloudPageBlob(com.microsoft.azure.storage.StorageUri)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "CloudPageBlob(StorageUri blobAbsoluteUri)"
  nameWithType: "CloudPageBlob.CloudPageBlob(StorageUri blobAbsoluteUri)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(StorageUri blobAbsoluteUri)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an instance of the `CloudPageBlob` class using the specified absolute URI and storage service client."
  syntax:
    content: "public CloudPageBlob(StorageUri blobAbsoluteUri)"
    parameters:
    - id: "blobAbsoluteUri"
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> object which represents the absolute URI to the blob."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(com.microsoft.azure.storage.StorageUri,com.microsoft.azure.storage.StorageCredentials)"
  id: "CloudPageBlob(com.microsoft.azure.storage.StorageUri,com.microsoft.azure.storage.StorageCredentials)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "CloudPageBlob(StorageUri blobAbsoluteUri, StorageCredentials credentials)"
  nameWithType: "CloudPageBlob.CloudPageBlob(StorageUri blobAbsoluteUri, StorageCredentials credentials)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(StorageUri blobAbsoluteUri, StorageCredentials credentials)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an instance of the `CloudPageBlob` class using the specified absolute StorageUri and credentials."
  syntax:
    content: "public CloudPageBlob(StorageUri blobAbsoluteUri, StorageCredentials credentials)"
    parameters:
    - id: "blobAbsoluteUri"
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> object that represents the absolute URI to the blob."
    - id: "credentials"
      type: "com.microsoft.azure.storage.StorageCredentials"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageCredentials\" data-throw-if-not-resolved=\"false\">StorageCredentials</xref> object used to authenticate access."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.StorageCredentials)"
  id: "CloudPageBlob(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.StorageCredentials)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "CloudPageBlob(StorageUri blobAbsoluteUri, String snapshotID, StorageCredentials credentials)"
  nameWithType: "CloudPageBlob.CloudPageBlob(StorageUri blobAbsoluteUri, String snapshotID, StorageCredentials credentials)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(StorageUri blobAbsoluteUri, String snapshotID, StorageCredentials credentials)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an instance of the `CloudPageBlob` class using the specified absolute StorageUri, snapshot ID, and credentials."
  syntax:
    content: "public CloudPageBlob(StorageUri blobAbsoluteUri, String snapshotID, StorageCredentials credentials)"
    parameters:
    - id: "blobAbsoluteUri"
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> object that represents the absolute URI to the blob."
    - id: "snapshotID"
      type: "java.lang.String"
      description: "A <code>String</code> that represents the snapshot version, if applicable."
    - id: "credentials"
      type: "com.microsoft.azure.storage.StorageCredentials"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageCredentials\" data-throw-if-not-resolved=\"false\">StorageCredentials</xref> object used to authenticate access."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(com.microsoft.azure.storage.blob.CloudPageBlob)"
  id: "CloudPageBlob(com.microsoft.azure.storage.blob.CloudPageBlob)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "CloudPageBlob(CloudPageBlob otherBlob)"
  nameWithType: "CloudPageBlob.CloudPageBlob(CloudPageBlob otherBlob)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(CloudPageBlob otherBlob)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an instance of the `CloudPageBlob` class by copying values from another page blob."
  syntax:
    content: "public CloudPageBlob(CloudPageBlob otherBlob)"
    parameters:
    - id: "otherBlob"
      type: "com.microsoft.azure.storage.blob.CloudPageBlob"
      description: "A <code>CloudPageBlob</code> object which represents the page blob to copy."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(java.lang.String,java.lang.String,com.microsoft.azure.storage.blob.CloudBlobContainer)"
  id: "CloudPageBlob(java.lang.String,java.lang.String,com.microsoft.azure.storage.blob.CloudBlobContainer)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "CloudPageBlob(String blobName, String snapshotID, CloudBlobContainer container)"
  nameWithType: "CloudPageBlob.CloudPageBlob(String blobName, String snapshotID, CloudBlobContainer container)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(String blobName, String snapshotID, CloudBlobContainer container)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an instance of the `CloudPageBlob` class using the specified type, name, snapshot ID, and container."
  syntax:
    content: "protected CloudPageBlob(String blobName, String snapshotID, CloudBlobContainer container)"
    parameters:
    - id: "blobName"
      type: "java.lang.String"
      description: "Name of the blob."
    - id: "snapshotID"
      type: "java.lang.String"
      description: "A <code>String</code> that represents the snapshot version, if applicable."
    - id: "container"
      type: "com.microsoft.azure.storage.blob.CloudBlobContainer"
      description: "The reference to the parent container."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(java.net.URI)"
  id: "CloudPageBlob(java.net.URI)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "CloudPageBlob(URI blobAbsoluteUri)"
  nameWithType: "CloudPageBlob.CloudPageBlob(URI blobAbsoluteUri)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(URI blobAbsoluteUri)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an instance of the `CloudPageBlob` class using the specified absolute URI and storage service client."
  syntax:
    content: "public CloudPageBlob(URI blobAbsoluteUri)"
    parameters:
    - id: "blobAbsoluteUri"
      type: "java.net.URI"
      description: "A <code>java.net.URI</code> object which represents the absolute URI to the blob."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(java.net.URI,com.microsoft.azure.storage.StorageCredentials)"
  id: "CloudPageBlob(java.net.URI,com.microsoft.azure.storage.StorageCredentials)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "CloudPageBlob(URI blobAbsoluteUri, StorageCredentials credentials)"
  nameWithType: "CloudPageBlob.CloudPageBlob(URI blobAbsoluteUri, StorageCredentials credentials)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(URI blobAbsoluteUri, StorageCredentials credentials)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an instance of the `CloudPageBlob` class using the specified absolute URI and credentials."
  syntax:
    content: "public CloudPageBlob(URI blobAbsoluteUri, StorageCredentials credentials)"
    parameters:
    - id: "blobAbsoluteUri"
      type: "java.net.URI"
      description: "A <code>java.net.URI</code> object that represents the absolute URI to the blob."
    - id: "credentials"
      type: "com.microsoft.azure.storage.StorageCredentials"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageCredentials\" data-throw-if-not-resolved=\"false\">StorageCredentials</xref> object used to authenticate access."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(java.net.URI,java.lang.String,com.microsoft.azure.storage.StorageCredentials)"
  id: "CloudPageBlob(java.net.URI,java.lang.String,com.microsoft.azure.storage.StorageCredentials)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "CloudPageBlob(URI blobAbsoluteUri, String snapshotID, StorageCredentials credentials)"
  nameWithType: "CloudPageBlob.CloudPageBlob(URI blobAbsoluteUri, String snapshotID, StorageCredentials credentials)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob(URI blobAbsoluteUri, String snapshotID, StorageCredentials credentials)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an instance of the `CloudPageBlob` class using the specified absolute URI, snapshot ID, and credentials."
  syntax:
    content: "public CloudPageBlob(URI blobAbsoluteUri, String snapshotID, StorageCredentials credentials)"
    parameters:
    - id: "blobAbsoluteUri"
      type: "java.net.URI"
      description: "A <code>java.net.URI</code> object that represents the absolute URI to the blob."
    - id: "snapshotID"
      type: "java.lang.String"
      description: "A <code>String</code> that represents the snapshot version, if applicable."
    - id: "credentials"
      type: "com.microsoft.azure.storage.StorageCredentials"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageCredentials\" data-throw-if-not-resolved=\"false\">StorageCredentials</xref> object used to authenticate access."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.clearPages(long,long)"
  id: "clearPages(long,long)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "clearPages(long offset, long length)"
  nameWithType: "CloudPageBlob.clearPages(long offset, long length)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.clearPages(long offset, long length)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.clearPages*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Clears pages from a page blob.\n\nCalling `clearPages` releases the storage space used by the specified pages. Pages that have been cleared are no longer tracked as part of the page blob, and no longer incur a charge against the storage account."
  syntax:
    content: "public void clearPages(long offset, long length)"
    parameters:
    - id: "offset"
      type: "long"
      description: "The offset, in bytes, at which to begin clearing pages. This value must be a multiple of 512."
    - id: "length"
      type: "long"
      description: "The length, in bytes, of the data range to be cleared. This value must be a multiple of 512."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.clearPages(long,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "clearPages(long,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "clearPages(long offset, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.clearPages(long offset, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.clearPages(long offset, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.clearPages*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Clears pages from a page blob using the specified lease ID, request options, and operation context.\n\nCalling `clearPages` releases the storage space used by the specified pages. Pages that have been cleared are no longer tracked as part of the page blob, and no longer incur a charge against the storage account."
  syntax:
    content: "public void clearPages(long offset, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "offset"
      type: "long"
      description: "A <code>long</code> which represents the offset, in bytes, at which to begin clearing pages. This\n            value must be a multiple of 512."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the data range to be cleared. This value\n            must be a multiple of 512."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.create(long)"
  id: "create(long)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "create(long length)"
  nameWithType: "CloudPageBlob.create(long length)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.create(long length)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.create*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates a page blob. If the blob already exists, this will replace it. To instead throw an error if the blob already exists, use the <xref uid=\"com.microsoft.azure.storage.blob.CloudPageBlob.create(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)\" data-throw-if-not-resolved=\"false\">#create(long, AccessCondition, BlobRequestOptions, OperationContext)</xref> overload with <xref uid=\"com.microsoft.azure.storage.AccessCondition.generateIfNotExistsCondition()\" data-throw-if-not-resolved=\"false\">AccessCondition#generateIfNotExistsCondition()</xref>."
  syntax:
    content: "public void create(long length)"
    parameters:
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the size, in bytes, of the page blob."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If the length is not a multiple of 512."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.create(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "create(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "create(long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.create(long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.create(long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.create*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates a page blob using the specified request options and operation context. If the blob already exists, this will replace it. To instead throw an error if the blob already exists, use <xref uid=\"com.microsoft.azure.storage.AccessCondition.generateIfNotExistsCondition()\" data-throw-if-not-resolved=\"false\">AccessCondition#generateIfNotExistsCondition()</xref>."
  syntax:
    content: "public void create(long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the size, in bytes, of the page blob."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If the length is not a multiple of 512."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.create(long,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "create(long,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "create(long length, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.create(long length, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.create(long length, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.create*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates a page blob using the specified request options and operation context. If the blob already exists, this will replace it. To instead throw an error if the blob already exists, use <xref uid=\"com.microsoft.azure.storage.AccessCondition.generateIfNotExistsCondition()\" data-throw-if-not-resolved=\"false\">AccessCondition#generateIfNotExistsCondition()</xref>."
  syntax:
    content: "public void create(long length, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the size, in bytes, of the page blob."
    - id: "premiumBlobTier"
      type: "com.microsoft.azure.storage.blob.PremiumPageBlobTier"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.PremiumPageBlobTier\" data-throw-if-not-resolved=\"false\">PremiumPageBlobTier</xref> object which represents the tier of the blob."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If the length is not a multiple of 512."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges()"
  id: "downloadPageRanges()"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "downloadPageRanges()"
  nameWithType: "CloudPageBlob.downloadPageRanges()"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges()"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Returns a collection of page ranges and their starting and ending byte offsets.\n\nThe start and end byte offsets for each page range are inclusive."
  syntax:
    content: "public ArrayList<PageRange> downloadPageRanges()"
    return:
      type: "java.util.ArrayList<com.microsoft.azure.storage.blob.PageRange>"
      description: "An <code>ArrayList</code> object which represents the set of page ranges and their starting and ending\n         byte offsets."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "downloadPageRanges(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "downloadPageRanges(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.downloadPageRanges(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Returns a collection of page ranges and their starting and ending byte offsets using the specified request options and operation context."
  syntax:
    content: "public ArrayList<PageRange> downloadPageRanges(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "java.util.ArrayList<com.microsoft.azure.storage.blob.PageRange>"
      description: "An <code>ArrayList</code> object which represents the set of page ranges and their starting and ending\n         byte offsets."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges(long,java.lang.Long)"
  id: "downloadPageRanges(long,java.lang.Long)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "downloadPageRanges(long offset, Long length)"
  nameWithType: "CloudPageBlob.downloadPageRanges(long offset, Long length)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges(long offset, Long length)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Returns a collection of page ranges and their starting and ending byte offsets."
  syntax:
    content: "public List<PageRange> downloadPageRanges(long offset, Long length)"
    parameters:
    - id: "offset"
      type: "long"
      description: "The starting offset of the data range over which to list page ranges, in bytes. Must be a multiple of\n            512."
    - id: "length"
      type: "java.lang.Long"
      description: "The length of the data range over which to list page ranges, in bytes. Must be a multiple of 512."
    return:
      type: "java.util.List<com.microsoft.azure.storage.blob.PageRange>"
      description: "A <code>List</code> object which represents the set of page ranges and their starting and ending\n         byte offsets."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges(long,java.lang.Long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "downloadPageRanges(long,java.lang.Long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "downloadPageRanges(long offset, Long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.downloadPageRanges(long offset, Long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges(long offset, Long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Returns a collection of page ranges and their starting and ending byte offsets using the specified request options and operation context."
  syntax:
    content: "public List<PageRange> downloadPageRanges(long offset, Long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "offset"
      type: "long"
      description: "The starting offset of the data range over which to list page ranges, in bytes. Must be a multiple of\n            512."
    - id: "length"
      type: "java.lang.Long"
      description: "The length of the data range over which to list page ranges, in bytes. Must be a multiple of 512."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "java.util.List<com.microsoft.azure.storage.blob.PageRange>"
      description: "A <code>List</code> object which represents the set of page ranges and their starting and ending\n         byte offsets."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRangesDiff(java.lang.String)"
  id: "downloadPageRangesDiff(java.lang.String)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "downloadPageRangesDiff(String previousSnapshot)"
  nameWithType: "CloudPageBlob.downloadPageRangesDiff(String previousSnapshot)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRangesDiff(String previousSnapshot)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRangesDiff*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Gets the collection of page ranges that differ between a specified snapshot and this object."
  syntax:
    content: "public List<PageRangeDiff> downloadPageRangesDiff(String previousSnapshot)"
    parameters:
    - id: "previousSnapshot"
      type: "java.lang.String"
      description: "A string representing the snapshot to use as the starting point for the diff. If this\n            CloudPageBlob represents a snapshot, the previousSnapshot parameter must be prior to the current\n            snapshot."
    return:
      type: "java.util.List<com.microsoft.azure.storage.blob.PageRangeDiff>"
      description: "A <code>List</code> object containing the set of differing page ranges."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRangesDiff(java.lang.String,java.lang.Long,java.lang.Long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "downloadPageRangesDiff(java.lang.String,java.lang.Long,java.lang.Long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "downloadPageRangesDiff(String previousSnapshot, Long offset, Long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.downloadPageRangesDiff(String previousSnapshot, Long offset, Long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRangesDiff(String previousSnapshot, Long offset, Long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRangesDiff*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Gets the collection of page ranges that differ between a specified snapshot and this object."
  syntax:
    content: "public List<PageRangeDiff> downloadPageRangesDiff(String previousSnapshot, Long offset, Long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "previousSnapshot"
      type: "java.lang.String"
      description: "A string representing the snapshot timestamp to use as the starting point for the diff. If this\n            CloudPageBlob represents a snapshot, the previousSnapshot parameter must be prior to the current\n            snapshot."
    - id: "offset"
      type: "java.lang.Long"
      description: "The starting offset of the data range over which to list page ranges, in bytes. Must be a multiple of\n            512."
    - id: "length"
      type: "java.lang.Long"
      description: "The length of the data range over which to list page ranges, in bytes. Must be a multiple of 512."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "java.util.List<com.microsoft.azure.storage.blob.PageRangeDiff>"
      description: "A <code>List</code> object containing the set of differing page ranges."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteExisting()"
  id: "openWriteExisting()"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "openWriteExisting()"
  nameWithType: "CloudPageBlob.openWriteExisting()"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteExisting()"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteExisting*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Opens an output stream object to write data to the page blob. The page blob must already exist and any existing data may be overwritten."
  syntax:
    content: "public BlobOutputStream openWriteExisting()"
    return:
      type: "com.microsoft.azure.storage.blob.BlobOutputStream"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobOutputStream\" data-throw-if-not-resolved=\"false\">BlobOutputStream</xref> object used to write data to the blob."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteExisting(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "openWriteExisting(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "openWriteExisting(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.openWriteExisting(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteExisting(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteExisting*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Opens an output stream object to write data to the page blob, using the specified lease ID, request options and operation context. The page blob must already exist and any existing data may be overwritten."
  syntax:
    content: "public BlobOutputStream openWriteExisting(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "com.microsoft.azure.storage.blob.BlobOutputStream"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobOutputStream\" data-throw-if-not-resolved=\"false\">BlobOutputStream</xref> object used to write data to the blob."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteNew(long)"
  id: "openWriteNew(long)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "openWriteNew(long length)"
  nameWithType: "CloudPageBlob.openWriteNew(long length)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteNew(long length)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteNew*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Opens an output stream object to write data to the page blob. The page blob does not need to yet exist and will be created with the length specified. If the blob already exists on the service, it will be overwritten.\n\nTo avoid overwriting and instead throw an error, please use the <xref uid=\"com.microsoft.azure.storage.blob.CloudPageBlob.openWriteNew(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)\" data-throw-if-not-resolved=\"false\">#openWriteNew(long, AccessCondition, BlobRequestOptions, OperationContext)</xref> overload with the appropriate <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref>."
  syntax:
    content: "public BlobOutputStream openWriteNew(long length)"
    parameters:
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the stream to create. This value must be\n            a multiple of 512."
    return:
      type: "com.microsoft.azure.storage.blob.BlobOutputStream"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobOutputStream\" data-throw-if-not-resolved=\"false\">BlobOutputStream</xref> object used to write data to the blob."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteNew(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "openWriteNew(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "openWriteNew(long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.openWriteNew(long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteNew(long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteNew*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Opens an output stream object to write data to the page blob, using the specified lease ID, request options and operation context. The page blob does not need to yet exist and will be created with the length specified.If the blob already exists on the service, it will be overwritten.\n\nTo avoid overwriting and instead throw an error, please pass in an <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> generated using <xref uid=\"com.microsoft.azure.storage.AccessCondition.generateIfNotExistsCondition()\" data-throw-if-not-resolved=\"false\">AccessCondition#generateIfNotExistsCondition()</xref>."
  syntax:
    content: "public BlobOutputStream openWriteNew(long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the stream to create. This value must be\n            a multiple of 512."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "com.microsoft.azure.storage.blob.BlobOutputStream"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobOutputStream\" data-throw-if-not-resolved=\"false\">BlobOutputStream</xref> object used to write data to the blob."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteNew(long,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "openWriteNew(long,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "openWriteNew(long length, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.openWriteNew(long length, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteNew(long length, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteNew*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Opens an output stream object to write data to the page blob, using the specified lease ID, request options and operation context. The page blob does not need to yet exist and will be created with the length specified.If the blob already exists on the service, it will be overwritten.\n\nTo avoid overwriting and instead throw an error, please pass in an <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> generated using <xref uid=\"com.microsoft.azure.storage.AccessCondition.generateIfNotExistsCondition()\" data-throw-if-not-resolved=\"false\">AccessCondition#generateIfNotExistsCondition()</xref>."
  syntax:
    content: "public BlobOutputStream openWriteNew(long length, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the stream to create. This value must be\n            a multiple of 512."
    - id: "premiumBlobTier"
      type: "com.microsoft.azure.storage.blob.PremiumPageBlobTier"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.PremiumPageBlobTier\" data-throw-if-not-resolved=\"false\">PremiumPageBlobTier</xref> object which represents the tier of the blob."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "com.microsoft.azure.storage.blob.BlobOutputStream"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobOutputStream\" data-throw-if-not-resolved=\"false\">BlobOutputStream</xref> object used to write data to the blob."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.putPagesFromURI(long,long,java.net.URI,java.lang.Long)"
  id: "putPagesFromURI(long,long,java.net.URI,java.lang.Long)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "putPagesFromURI(long offset, long length, URI copySource, Long sourceOffset)"
  nameWithType: "CloudPageBlob.putPagesFromURI(long offset, long length, URI copySource, Long sourceOffset)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.putPagesFromURI(long offset, long length, URI copySource, Long sourceOffset)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.putPagesFromURI*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Writes a PageRange, using the specified source URL."
  syntax:
    content: "public void putPagesFromURI(long offset, long length, URI copySource, Long sourceOffset)"
    parameters:
    - id: "offset"
      type: "long"
      description: "The offset, in bytes, at which to begin writing pages. This value must be a multiple of 512."
    - id: "length"
      type: "long"
      description: "The length, in bytes, of the data range to be written. This value must be a multiple of 512. This\n            value will also be used as the length of data to copy from the source."
    - id: "copySource"
      type: "java.net.URI"
      description: "The <code>URI</code> of the source data. It can point to any Azure Blob or File that is public or the\n            URL can include a shared access signature."
    - id: "sourceOffset"
      type: "java.lang.Long"
      description: "A <code>long</code> which represents the offset to use as the starting point for the source. The length\n           of data to copy from the source will be taken from the source length parameter."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.putPagesFromURI(long,long,java.net.URI,java.lang.Long,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "putPagesFromURI(long,long,java.net.URI,java.lang.Long,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "putPagesFromURI(long offset, long length, URI copySource, Long sourceOffset, String md5, AccessCondition accessCondition, AccessCondition sourceAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.putPagesFromURI(long offset, long length, URI copySource, Long sourceOffset, String md5, AccessCondition accessCondition, AccessCondition sourceAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.putPagesFromURI(long offset, long length, URI copySource, Long sourceOffset, String md5, AccessCondition accessCondition, AccessCondition sourceAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.putPagesFromURI*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Writes a PageRange, using the specified source URL."
  syntax:
    content: "public void putPagesFromURI(long offset, long length, URI copySource, Long sourceOffset, String md5, AccessCondition accessCondition, AccessCondition sourceAccessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "offset"
      type: "long"
      description: "The offset, in bytes, at which to begin writing pages. This value must be a multiple of 512."
    - id: "length"
      type: "long"
      description: "The length, in bytes, of the data range to be written. This value must be a multiple of 512. This\n            value will also be used as the length of data to copy from the source."
    - id: "copySource"
      type: "java.net.URI"
      description: "The <code>URI</code> of the source data. It can point to any Azure Blob or File that is public or the\n            URL can include a shared access signature."
    - id: "sourceOffset"
      type: "java.lang.Long"
      description: "A <code>long</code> which represents the offset to use as the starting point for the source. The length\n           of data to copy from the source will be taken from the source length parameter."
    - id: "md5"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the MD5 hash for the data."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "sourceAccessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the source blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.resize(long)"
  id: "resize(long)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "resize(long size)"
  nameWithType: "CloudPageBlob.resize(long size)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.resize(long size)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.resize*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Resizes the page blob to the specified size."
  syntax:
    content: "public void resize(long size)"
    parameters:
    - id: "size"
      type: "long"
      description: "A <code>long</code> which represents the size of the page blob, in bytes."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.resize(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "resize(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "resize(long size, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.resize(long size, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.resize(long size, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.resize*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Resizes the page blob to the specified size."
  syntax:
    content: "public void resize(long size, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "size"
      type: "long"
      description: "A <code>long</code> which represents the size of the page blob, in bytes."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.setStreamWriteSizeInBytes(int)"
  id: "setStreamWriteSizeInBytes(int)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "setStreamWriteSizeInBytes(int streamWriteSizeInBytes)"
  nameWithType: "CloudPageBlob.setStreamWriteSizeInBytes(int streamWriteSizeInBytes)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.setStreamWriteSizeInBytes(int streamWriteSizeInBytes)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.setStreamWriteSizeInBytes*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Sets the number of bytes to buffer when writing to a <xref uid=\"com.microsoft.azure.storage.blob.BlobOutputStream\" data-throw-if-not-resolved=\"false\">BlobOutputStream</xref>."
  syntax:
    content: "public void setStreamWriteSizeInBytes(int streamWriteSizeInBytes)"
    parameters:
    - id: "streamWriteSizeInBytes"
      type: "int"
      description: "An <code>int</code> which represents the maximum number of bytes to buffer when writing to a page blob\n            stream. This value must be a\n            multiple of 512 and\n            less than or equal to 4 MB."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.startCopy(com.microsoft.azure.storage.blob.CloudPageBlob)"
  id: "startCopy(com.microsoft.azure.storage.blob.CloudPageBlob)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "startCopy(CloudPageBlob sourceBlob)"
  nameWithType: "CloudPageBlob.startCopy(CloudPageBlob sourceBlob)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.startCopy(CloudPageBlob sourceBlob)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.startCopy*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Requests the service to start copying a blob's contents, properties, and metadata to a new blob."
  syntax:
    content: "public final String startCopy(CloudPageBlob sourceBlob)"
    parameters:
    - id: "sourceBlob"
      type: "com.microsoft.azure.storage.blob.CloudPageBlob"
      description: "A <code>CloudPageBlob</code> object that represents the source blob to copy."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the copy ID associated with the copy operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.startCopy(com.microsoft.azure.storage.blob.CloudPageBlob,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "startCopy(com.microsoft.azure.storage.blob.CloudPageBlob,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "startCopy(CloudPageBlob sourceBlob, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.startCopy(CloudPageBlob sourceBlob, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.startCopy(CloudPageBlob sourceBlob, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.startCopy*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Requests the service to start copying a blob's contents, properties, and metadata to a new blob, using the specified access conditions, lease ID, request options, and operation context."
  syntax:
    content: "public final String startCopy(CloudPageBlob sourceBlob, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "sourceBlob"
      type: "com.microsoft.azure.storage.blob.CloudPageBlob"
      description: "A <code>CloudPageBlob</code> object that represents the source blob to copy."
    - id: "sourceAccessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the source blob."
    - id: "destinationAccessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the destination blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the copy ID associated with the copy operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.startCopy(com.microsoft.azure.storage.blob.CloudPageBlob,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "startCopy(com.microsoft.azure.storage.blob.CloudPageBlob,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "startCopy(CloudPageBlob sourceBlob, PremiumPageBlobTier premiumBlobTier, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.startCopy(CloudPageBlob sourceBlob, PremiumPageBlobTier premiumBlobTier, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.startCopy(CloudPageBlob sourceBlob, PremiumPageBlobTier premiumBlobTier, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.startCopy*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Requests the service to start copying a blob's contents, properties, and metadata to a new blob, using the specified blob tier, access conditions, lease ID, request options, and operation context."
  syntax:
    content: "public final String startCopy(CloudPageBlob sourceBlob, PremiumPageBlobTier premiumBlobTier, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "sourceBlob"
      type: "com.microsoft.azure.storage.blob.CloudPageBlob"
      description: "A <code>CloudPageBlob</code> object that represents the source blob to copy."
    - id: "premiumBlobTier"
      type: "com.microsoft.azure.storage.blob.PremiumPageBlobTier"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.PremiumPageBlobTier\" data-throw-if-not-resolved=\"false\">PremiumPageBlobTier</xref> object which represents the tier of the blob."
    - id: "sourceAccessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the source blob."
    - id: "destinationAccessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the destination blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the copy ID associated with the copy operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy(com.microsoft.azure.storage.blob.CloudPageBlob)"
  id: "startIncrementalCopy(com.microsoft.azure.storage.blob.CloudPageBlob)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "startIncrementalCopy(CloudPageBlob sourceSnapshot)"
  nameWithType: "CloudPageBlob.startIncrementalCopy(CloudPageBlob sourceSnapshot)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy(CloudPageBlob sourceSnapshot)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Requests the service to start an incremental copy of another page blob's contents, properties, and metadata to this blob."
  syntax:
    content: "public final String startIncrementalCopy(CloudPageBlob sourceSnapshot)"
    parameters:
    - id: "sourceSnapshot"
      type: "com.microsoft.azure.storage.blob.CloudPageBlob"
      description: "A <code>CloudPageBlob</code> object that represents the source blob to copy. Must be a snapshot."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the copy ID associated with the copy operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy(com.microsoft.azure.storage.blob.CloudPageBlob,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "startIncrementalCopy(com.microsoft.azure.storage.blob.CloudPageBlob,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "startIncrementalCopy(CloudPageBlob sourceSnapshot, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.startIncrementalCopy(CloudPageBlob sourceSnapshot, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy(CloudPageBlob sourceSnapshot, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Requests the service to start copying a blob's contents, properties, and metadata to a new blob, using the specified access conditions, lease ID, request options, and operation context."
  syntax:
    content: "public final String startIncrementalCopy(CloudPageBlob sourceSnapshot, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "sourceSnapshot"
      type: "com.microsoft.azure.storage.blob.CloudPageBlob"
      description: "A <code>CloudPageBlob</code> object that represents the source blob to copy. Must be a snapshot."
    - id: "destinationAccessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the destination blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the copy ID associated with the copy operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy(java.net.URI)"
  id: "startIncrementalCopy(java.net.URI)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "startIncrementalCopy(URI sourceSnapshot)"
  nameWithType: "CloudPageBlob.startIncrementalCopy(URI sourceSnapshot)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy(URI sourceSnapshot)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Requests the service to start an incremental copy of another page blob's contents, properties, and metadata to this blob."
  syntax:
    content: "public final String startIncrementalCopy(URI sourceSnapshot)"
    parameters:
    - id: "sourceSnapshot"
      type: "java.net.URI"
      description: "A <code>CloudPageBlob</code> object that represents the source blob to copy. Must be a snapshot."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the copy ID associated with the copy operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy(java.net.URI,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "startIncrementalCopy(java.net.URI,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "startIncrementalCopy(URI sourceSnapshot, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.startIncrementalCopy(URI sourceSnapshot, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy(URI sourceSnapshot, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Requests the service to start copying a blob's contents, properties, and metadata to a new blob, using the specified access conditions, lease ID, request options, and operation context."
  syntax:
    content: "public final String startIncrementalCopy(URI sourceSnapshot, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "sourceSnapshot"
      type: "java.net.URI"
      description: "A <code>CloudPageBlob</code> object that represents the source blob to copy. Must be a snapshot."
    - id: "destinationAccessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the destination blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the copy ID associated with the copy operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.updateSequenceNumberFromResponse(java.net.HttpURLConnection)"
  id: "updateSequenceNumberFromResponse(java.net.HttpURLConnection)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "updateSequenceNumberFromResponse(HttpURLConnection request)"
  nameWithType: "CloudPageBlob.updateSequenceNumberFromResponse(HttpURLConnection request)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.updateSequenceNumberFromResponse(HttpURLConnection request)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.updateSequenceNumberFromResponse*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  syntax:
    content: "protected void updateSequenceNumberFromResponse(HttpURLConnection request)"
    parameters:
    - id: "request"
      type: "java.net.HttpURLConnection"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.upload(java.io.InputStream,long)"
  id: "upload(java.io.InputStream,long)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "upload(InputStream sourceStream, long length)"
  nameWithType: "CloudPageBlob.upload(InputStream sourceStream, long length)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.upload(InputStream sourceStream, long length)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.upload*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Uploads the source stream data to the page blob. If the blob already exists on the service, it will be overwritten."
  syntax:
    content: "public void upload(InputStream sourceStream, long length)"
    parameters:
    - id: "sourceStream"
      type: "java.io.InputStream"
      description: "An <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> object to read from."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the stream data, must be non zero and a\n            multiple of 512."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If an I/O exception occurred."
  - type: "java.io.IOException"
    description: "If an I/O exception occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.upload(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "upload(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "upload(InputStream sourceStream, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.upload(InputStream sourceStream, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.upload(InputStream sourceStream, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.upload*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Uploads the source stream data to the page blob using the specified lease ID, request options, and operation context. If the blob already exists on the service, it will be overwritten."
  syntax:
    content: "public void upload(InputStream sourceStream, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "sourceStream"
      type: "java.io.InputStream"
      description: "An <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> object to read from."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the stream data. This must be great than\n            zero and a multiple of 512."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If an I/O exception occurred."
  - type: "java.io.IOException"
    description: "If an I/O exception occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.upload(java.io.InputStream,long,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "upload(java.io.InputStream,long,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "upload(InputStream sourceStream, long length, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.upload(InputStream sourceStream, long length, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.upload(InputStream sourceStream, long length, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.upload*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Uploads the source stream data to the page blob using the specified lease ID, request options, and operation context. If the blob already exists on the service, it will be overwritten."
  syntax:
    content: "public void upload(InputStream sourceStream, long length, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "sourceStream"
      type: "java.io.InputStream"
      description: "An <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> object to read from."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the stream data. This must be great than\n            zero and a multiple of 512."
    - id: "premiumBlobTier"
      type: "com.microsoft.azure.storage.blob.PremiumPageBlobTier"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.PremiumPageBlobTier\" data-throw-if-not-resolved=\"false\">PremiumPageBlobTier</xref> object which represents the tier of the blob."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If an I/O exception occurred."
  - type: "java.io.IOException"
    description: "If an I/O exception occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadFromByteArray(byte[],int,int,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "uploadFromByteArray(byte[],int,int,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "uploadFromByteArray(byte[] buffer, int offset, int length, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.uploadFromByteArray(byte[] buffer, int offset, int length, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadFromByteArray(byte[] buffer, int offset, int length, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadFromByteArray*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Uploads a blob from data in a byte array. If the blob already exists on the service, it will be overwritten."
  syntax:
    content: "public void uploadFromByteArray(byte[] buffer, int offset, int length, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "buffer"
      type: "byte[]"
      description: "A <code>byte</code> array which represents the data to write to the blob."
    - id: "offset"
      type: "int"
      description: "A <code>int</code> which represents the offset of the byte array from which to start the data upload."
    - id: "length"
      type: "int"
      description: "An <code>int</code> which represents the number of bytes to upload from the input buffer."
    - id: "premiumBlobTier"
      type: "com.microsoft.azure.storage.blob.PremiumPageBlobTier"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.PremiumPageBlobTier\" data-throw-if-not-resolved=\"false\">PremiumPageBlobTier</xref> object which represents the tier of the blob."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadFromFile(java.lang.String,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "uploadFromFile(java.lang.String,com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "uploadFromFile(String path, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.uploadFromFile(String path, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadFromFile(String path, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadFromFile*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Uploads a blob from a file. If the blob already exists on the service, it will be overwritten."
  syntax:
    content: "public void uploadFromFile(String path, PremiumPageBlobTier premiumBlobTier, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "path"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the path to the file to be uploaded."
    - id: "premiumBlobTier"
      type: "com.microsoft.azure.storage.blob.PremiumPageBlobTier"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.PremiumPageBlobTier\" data-throw-if-not-resolved=\"false\">PremiumPageBlobTier</xref> object which represents the tier of the blob."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPages(java.io.InputStream,long,long)"
  id: "uploadPages(java.io.InputStream,long,long)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "uploadPages(InputStream sourceStream, long offset, long length)"
  nameWithType: "CloudPageBlob.uploadPages(InputStream sourceStream, long offset, long length)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPages(InputStream sourceStream, long offset, long length)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPages*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Uploads a range of contiguous pages, up to 4 MB in size, at the specified offset in the page blob."
  syntax:
    content: "public void uploadPages(InputStream sourceStream, long offset, long length)"
    parameters:
    - id: "sourceStream"
      type: "java.io.InputStream"
      description: "An <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> object which represents the input stream to write to the page blob."
    - id: "offset"
      type: "long"
      description: "A <code>long</code> which represents the offset, in number of bytes, at which to begin writing the\n            data. This value must be a multiple of 512."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the data to write. This value must be a\n            multiple of 512."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If the offset or length are not multiples of 512, or if the length is greater than 4 MB."
  - type: "java.io.IOException"
    description: "If the offset or length are not multiples of 512, or if the length is greater than 4 MB."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPages(java.io.InputStream,long,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "uploadPages(java.io.InputStream,long,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "uploadPages(InputStream sourceStream, long offset, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.uploadPages(InputStream sourceStream, long offset, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPages(InputStream sourceStream, long offset, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPages*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Uploads a range of contiguous pages, up to 4 MB in size, at the specified offset in the page blob, using the specified lease ID, request options, and operation context."
  syntax:
    content: "public void uploadPages(InputStream sourceStream, long offset, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "sourceStream"
      type: "java.io.InputStream"
      description: "An <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> object which represents the input stream to write to the page blob."
    - id: "offset"
      type: "long"
      description: "A <code>long</code> which represents the offset, in number of bytes, at which to begin writing the\n            data. This value must be a multiple of\n            512."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the data to write. This value must be a\n            multiple of 512."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If the offset or length are not multiples of 512, or if the length is greater than 4 MB."
  - type: "java.io.IOException"
    description: "If the offset or length are not multiples of 512, or if the length is greater than 4 MB."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPremiumPageBlobTier(com.microsoft.azure.storage.blob.PremiumPageBlobTier)"
  id: "uploadPremiumPageBlobTier(com.microsoft.azure.storage.blob.PremiumPageBlobTier)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "uploadPremiumPageBlobTier(PremiumPageBlobTier premiumBlobTier)"
  nameWithType: "CloudPageBlob.uploadPremiumPageBlobTier(PremiumPageBlobTier premiumBlobTier)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPremiumPageBlobTier(PremiumPageBlobTier premiumBlobTier)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPremiumPageBlobTier*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Sets the blob tier on a page blob on a premium storage account."
  syntax:
    content: "public void uploadPremiumPageBlobTier(PremiumPageBlobTier premiumBlobTier)"
    parameters:
    - id: "premiumBlobTier"
      type: "com.microsoft.azure.storage.blob.PremiumPageBlobTier"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.PremiumPageBlobTier\" data-throw-if-not-resolved=\"false\">PremiumPageBlobTier</xref> object which represents the tier of the blob."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPremiumPageBlobTier(com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "uploadPremiumPageBlobTier(com.microsoft.azure.storage.blob.PremiumPageBlobTier,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudPageBlob"
  langs:
  - "java"
  name: "uploadPremiumPageBlobTier(PremiumPageBlobTier premiumBlobTier, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudPageBlob.uploadPremiumPageBlobTier(PremiumPageBlobTier premiumBlobTier, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPremiumPageBlobTier(PremiumPageBlobTier premiumBlobTier, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPremiumPageBlobTier*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Sets the tier on a page blob on a premium storage account."
  syntax:
    content: "public void uploadPremiumPageBlobTier(PremiumPageBlobTier premiumBlobTier, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "premiumBlobTier"
      type: "com.microsoft.azure.storage.blob.PremiumPageBlobTier"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.PremiumPageBlobTier\" data-throw-if-not-resolved=\"false\">PremiumPageBlobTier</xref> object which represents the tier of the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
references:
- uid: "java.net.URI"
  spec.java:
  - uid: "java.net.URI"
    name: "URI"
    fullName: "java.net.URI"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob*"
  name: "CloudPageBlob"
  nameWithType: "CloudPageBlob.CloudPageBlob"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.CloudPageBlob"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.StorageUri"
  name: "StorageUri"
  nameWithType: "StorageUri"
  fullName: "com.microsoft.azure.storage.StorageUri"
- uid: "com.microsoft.azure.storage.StorageCredentials"
  name: "StorageCredentials"
  nameWithType: "StorageCredentials"
  fullName: "com.microsoft.azure.storage.StorageCredentials"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.microsoft.azure.storage.blob.CloudBlobContainer"
  name: "CloudBlobContainer"
  nameWithType: "CloudBlobContainer"
  fullName: "com.microsoft.azure.storage.blob.CloudBlobContainer"
- uid: "com.microsoft.azure.storage.StorageException"
  name: "StorageException"
  nameWithType: "StorageException"
  fullName: "com.microsoft.azure.storage.StorageException"
- uid: "java.net.URISyntaxException"
  spec.java:
  - uid: "java.net.URISyntaxException"
    name: "URISyntaxException"
    fullName: "java.net.URISyntaxException"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.startCopy*"
  name: "startCopy"
  nameWithType: "CloudPageBlob.startCopy"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.startCopy"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.AccessCondition"
  name: "AccessCondition"
  nameWithType: "AccessCondition"
  fullName: "com.microsoft.azure.storage.AccessCondition"
- uid: "com.microsoft.azure.storage.blob.BlobRequestOptions"
  name: "BlobRequestOptions"
  nameWithType: "BlobRequestOptions"
  fullName: "com.microsoft.azure.storage.blob.BlobRequestOptions"
- uid: "com.microsoft.azure.storage.OperationContext"
  name: "OperationContext"
  nameWithType: "OperationContext"
  fullName: "com.microsoft.azure.storage.OperationContext"
- uid: "com.microsoft.azure.storage.blob.PremiumPageBlobTier"
  name: "PremiumPageBlobTier"
  nameWithType: "PremiumPageBlobTier"
  fullName: "com.microsoft.azure.storage.blob.PremiumPageBlobTier"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy*"
  name: "startIncrementalCopy"
  nameWithType: "CloudPageBlob.startIncrementalCopy"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.startIncrementalCopy"
  package: "com.microsoft.azure.storage.blob"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.clearPages*"
  name: "clearPages"
  nameWithType: "CloudPageBlob.clearPages"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.clearPages"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.create*"
  name: "create"
  nameWithType: "CloudPageBlob.create"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.create"
  package: "com.microsoft.azure.storage.blob"
- uid: "java.util.ArrayList<com.microsoft.azure.storage.blob.PageRange>"
  spec.java:
  - uid: "java.util.ArrayList"
    name: "ArrayList"
    fullName: "java.util.ArrayList"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.blob.PageRange"
    name: "PageRange"
    fullName: "com.microsoft.azure.storage.blob.PageRange"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges*"
  name: "downloadPageRanges"
  nameWithType: "CloudPageBlob.downloadPageRanges"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRanges"
  package: "com.microsoft.azure.storage.blob"
- uid: "java.lang.Long"
  spec.java:
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
- uid: "java.util.List<com.microsoft.azure.storage.blob.PageRange>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.blob.PageRange"
    name: "PageRange"
    fullName: "com.microsoft.azure.storage.blob.PageRange"
  - name: ">"
    fullName: ">"
- uid: "java.util.List<com.microsoft.azure.storage.blob.PageRangeDiff>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.blob.PageRangeDiff"
    name: "PageRangeDiff"
    fullName: "com.microsoft.azure.storage.blob.PageRangeDiff"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRangesDiff*"
  name: "downloadPageRangesDiff"
  nameWithType: "CloudPageBlob.downloadPageRangesDiff"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.downloadPageRangesDiff"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.BlobOutputStream"
  name: "BlobOutputStream"
  nameWithType: "BlobOutputStream"
  fullName: "com.microsoft.azure.storage.blob.BlobOutputStream"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteExisting*"
  name: "openWriteExisting"
  nameWithType: "CloudPageBlob.openWriteExisting"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteExisting"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteNew*"
  name: "openWriteNew"
  nameWithType: "CloudPageBlob.openWriteNew"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.openWriteNew"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.putPagesFromURI*"
  name: "putPagesFromURI"
  nameWithType: "CloudPageBlob.putPagesFromURI"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.putPagesFromURI"
  package: "com.microsoft.azure.storage.blob"
- uid: "java.net.HttpURLConnection"
  spec.java:
  - uid: "java.net.HttpURLConnection"
    name: "HttpURLConnection"
    fullName: "java.net.HttpURLConnection"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.updateSequenceNumberFromResponse*"
  name: "updateSequenceNumberFromResponse"
  nameWithType: "CloudPageBlob.updateSequenceNumberFromResponse"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.updateSequenceNumberFromResponse"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.resize*"
  name: "resize"
  nameWithType: "CloudPageBlob.resize"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.resize"
  package: "com.microsoft.azure.storage.blob"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadFromByteArray*"
  name: "uploadFromByteArray"
  nameWithType: "CloudPageBlob.uploadFromByteArray"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadFromByteArray"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadFromFile*"
  name: "uploadFromFile"
  nameWithType: "CloudPageBlob.uploadFromFile"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadFromFile"
  package: "com.microsoft.azure.storage.blob"
- uid: "java.io.InputStream"
  spec.java:
  - uid: "java.io.InputStream"
    name: "InputStream"
    fullName: "java.io.InputStream"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.upload*"
  name: "upload"
  nameWithType: "CloudPageBlob.upload"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.upload"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPages*"
  name: "uploadPages"
  nameWithType: "CloudPageBlob.uploadPages"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPages"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.setStreamWriteSizeInBytes*"
  name: "setStreamWriteSizeInBytes"
  nameWithType: "CloudPageBlob.setStreamWriteSizeInBytes"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.setStreamWriteSizeInBytes"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPremiumPageBlobTier*"
  name: "uploadPremiumPageBlobTier"
  nameWithType: "CloudPageBlob.uploadPremiumPageBlobTier"
  fullName: "com.microsoft.azure.storage.blob.CloudPageBlob.uploadPremiumPageBlobTier"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudBlob"
  name: "CloudBlob"
  nameWithType: "CloudBlob"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.acquireLease(java.lang.Integer,java.lang.String)"
  name: "CloudBlob.acquireLease(Integer,String)"
  nameWithType: "CloudBlob.acquireLease(Integer,String)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.acquireLease(java.lang.Integer,java.lang.String)"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getQualifiedUri()"
  name: "CloudBlob.getQualifiedUri()"
  nameWithType: "CloudBlob.getQualifiedUri()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getQualifiedUri()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotQualifiedStorageUri()"
  name: "CloudBlob.getSnapshotQualifiedStorageUri()"
  nameWithType: "CloudBlob.getSnapshotQualifiedStorageUri()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotQualifiedStorageUri()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.setStorageUri(com.microsoft.azure.storage.StorageUri)"
  name: "CloudBlob.setStorageUri(StorageUri)"
  nameWithType: "CloudBlob.setStorageUri(StorageUri)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.setStorageUri(com.microsoft.azure.storage.StorageUri)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.exists()"
  name: "CloudBlob.exists()"
  nameWithType: "CloudBlob.exists()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.exists()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.abortCopy(java.lang.String)"
  name: "CloudBlob.abortCopy(String)"
  nameWithType: "CloudBlob.abortCopy(String)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.abortCopy(java.lang.String)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeToByteArray(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.downloadRangeToByteArray(long,Long,byte[],int,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.downloadRangeToByteArray(long,Long,byte[],int,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeToByteArray(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.changeLease(java.lang.String,com.microsoft.azure.storage.AccessCondition)"
  name: "CloudBlob.changeLease(String,AccessCondition)"
  nameWithType: "CloudBlob.changeLease(String,AccessCondition)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.changeLease(java.lang.String,com.microsoft.azure.storage.AccessCondition)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.generateUserDelegationSharedAccessSignature(com.microsoft.azure.storage.UserDelegationKey,com.microsoft.azure.storage.blob.SharedAccessBlobPolicy)"
  name: "CloudBlob.generateUserDelegationSharedAccessSignature(UserDelegationKey,SharedAccessBlobPolicy)"
  nameWithType: "CloudBlob.generateUserDelegationSharedAccessSignature(UserDelegationKey,SharedAccessBlobPolicy)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.generateUserDelegationSharedAccessSignature(com.microsoft.azure.storage.UserDelegationKey,com.microsoft.azure.storage.blob.SharedAccessBlobPolicy)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.upload(java.io.InputStream,long)"
  name: "CloudBlob.upload(InputStream,long)"
  nameWithType: "CloudBlob.upload(InputStream,long)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.upload(java.io.InputStream,long)"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.changeLease(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.changeLease(String,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.changeLease(String,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.changeLease(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.delete(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.delete(DeleteSnapshotsOption,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.delete(DeleteSnapshotsOption,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.delete(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadProperties()"
  name: "CloudBlob.uploadProperties()"
  nameWithType: "CloudBlob.uploadProperties()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadProperties()"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.assertNoWriteOperationForSnapshot()"
  name: "CloudBlob.assertNoWriteOperationForSnapshot()"
  nameWithType: "CloudBlob.assertNoWriteOperationForSnapshot()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.assertNoWriteOperationForSnapshot()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getServiceClient()"
  name: "CloudBlob.getServiceClient()"
  nameWithType: "CloudBlob.getServiceClient()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getServiceClient()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadBlobTierImpl(java.lang.String,java.lang.String,com.microsoft.azure.storage.blob.BlobRequestOptions)"
  name: "CloudBlob.uploadBlobTierImpl(String,String,BlobRequestOptions)"
  nameWithType: "CloudBlob.uploadBlobTierImpl(String,String,BlobRequestOptions)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadBlobTierImpl(java.lang.String,java.lang.String,com.microsoft.azure.storage.blob.BlobRequestOptions)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getParent()"
  name: "CloudBlob.getParent()"
  nameWithType: "CloudBlob.getParent()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getParent()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,boolean,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.startCopy(URI,String,boolean,String,AccessCondition,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.startCopy(URI,String,boolean,String,AccessCondition,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,boolean,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.openInputStream()"
  name: "CloudBlob.openInputStream()"
  nameWithType: "CloudBlob.openInputStream()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.openInputStream()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.updateEtagAndLastModifiedFromResponse(java.net.HttpURLConnection)"
  name: "CloudBlob.updateEtagAndLastModifiedFromResponse(HttpURLConnection)"
  nameWithType: "CloudBlob.updateEtagAndLastModifiedFromResponse(HttpURLConnection)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.updateEtagAndLastModifiedFromResponse(java.net.HttpURLConnection)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.acquireLease()"
  name: "CloudBlob.acquireLease()"
  nameWithType: "CloudBlob.acquireLease()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.acquireLease()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.delete()"
  name: "CloudBlob.delete()"
  nameWithType: "CloudBlob.delete()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.delete()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.exists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.exists(AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.exists(AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.exists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadFromByteArray(byte[],int,int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.uploadFromByteArray(byte[],int,int,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.uploadFromByteArray(byte[],int,int,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadFromByteArray(byte[],int,int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.setContainer(com.microsoft.azure.storage.blob.CloudBlobContainer)"
  name: "CloudBlob.setContainer(CloudBlobContainer)"
  nameWithType: "CloudBlob.setContainer(CloudBlobContainer)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.setContainer(com.microsoft.azure.storage.blob.CloudBlobContainer)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadToByteArray(byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.downloadToByteArray(byte[],int,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.downloadToByteArray(byte[],int,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadToByteArray(byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.isSnapshot()"
  name: "CloudBlob.isSnapshot()"
  nameWithType: "CloudBlob.isSnapshot()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.isSnapshot()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.setSnapshotID(java.lang.String)"
  name: "CloudBlob.setSnapshotID(String)"
  nameWithType: "CloudBlob.setSnapshotID(String)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.setSnapshotID(java.lang.String)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadFromFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.uploadFromFile(String,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.uploadFromFile(String,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadFromFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadToByteArray(byte[],int)"
  name: "CloudBlob.downloadToByteArray(byte[],int)"
  nameWithType: "CloudBlob.downloadToByteArray(byte[],int)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadToByteArray(byte[],int)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,boolean,java.lang.String,com.microsoft.azure.storage.blob.RehydratePriority,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.startCopy(URI,String,boolean,String,RehydratePriority,AccessCondition,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.startCopy(URI,String,boolean,String,RehydratePriority,AccessCondition,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,boolean,java.lang.String,com.microsoft.azure.storage.blob.RehydratePriority,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot()"
  name: "CloudBlob.createSnapshot()"
  nameWithType: "CloudBlob.createSnapshot()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.undelete(com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.undelete(BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.undelete(BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.undelete(com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.startCopy(URI,AccessCondition,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.startCopy(URI,AccessCondition,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadRange(long,java.lang.Long,java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.downloadRange(long,Long,OutputStream,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.downloadRange(long,Long,OutputStream,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadRange(long,java.lang.Long,java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,java.lang.String)"
  name: "CloudBlob.generateSharedAccessSignature(SharedAccessBlobPolicy,String)"
  nameWithType: "CloudBlob.generateSharedAccessSignature(SharedAccessBlobPolicy,String)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,java.lang.String)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadToFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.downloadToFile(String,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.downloadToFile(String,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadToFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.openInputStream(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.openInputStream(AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.openInputStream(AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.openInputStream(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.updateLengthFromResponse(java.net.HttpURLConnection)"
  name: "CloudBlob.updateLengthFromResponse(HttpURLConnection)"
  nameWithType: "CloudBlob.updateLengthFromResponse(HttpURLConnection)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.updateLengthFromResponse(java.net.HttpURLConnection)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.startCopyImpl(java.net.URI,java.lang.String,boolean,boolean,java.lang.String,com.microsoft.azure.storage.blob.RehydratePriority,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions)"
  name: "CloudBlob.startCopyImpl(URI,String,boolean,boolean,String,RehydratePriority,AccessCondition,AccessCondition,BlobRequestOptions)"
  nameWithType: "CloudBlob.startCopyImpl(URI,String,boolean,boolean,String,RehydratePriority,AccessCondition,AccessCondition,BlobRequestOptions)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.startCopyImpl(java.net.URI,java.lang.String,boolean,boolean,java.lang.String,com.microsoft.azure.storage.blob.RehydratePriority,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotID()"
  name: "CloudBlob.getSnapshotID()"
  nameWithType: "CloudBlob.getSnapshotID()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotID()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getContainer()"
  name: "CloudBlob.getContainer()"
  nameWithType: "CloudBlob.getContainer()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getContainer()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.startCopy(URI,String,AccessCondition,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.startCopy(URI,String,AccessCondition,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI)"
  name: "CloudBlob.startCopy(URI)"
  nameWithType: "CloudBlob.startCopy(URI)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotQualifiedUri()"
  name: "CloudBlob.getSnapshotQualifiedUri()"
  nameWithType: "CloudBlob.getSnapshotQualifiedUri()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotQualifiedUri()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.releaseLease(com.microsoft.azure.storage.AccessCondition)"
  name: "CloudBlob.releaseLease(AccessCondition)"
  nameWithType: "CloudBlob.releaseLease(AccessCondition)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.releaseLease(com.microsoft.azure.storage.AccessCondition)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getCanonicalName(boolean)"
  name: "CloudBlob.getCanonicalName(boolean)"
  nameWithType: "CloudBlob.getCanonicalName(boolean)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getCanonicalName(boolean)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.deleteImpl(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions)"
  name: "CloudBlob.deleteImpl(DeleteSnapshotsOption,AccessCondition,BlobRequestOptions)"
  nameWithType: "CloudBlob.deleteImpl(DeleteSnapshotsOption,AccessCondition,BlobRequestOptions)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.deleteImpl(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getUri()"
  name: "CloudBlob.getUri()"
  nameWithType: "CloudBlob.getUri()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getUri()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadAttributes()"
  name: "CloudBlob.downloadAttributes()"
  nameWithType: "CloudBlob.downloadAttributes()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadAttributes()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.setProperties(com.microsoft.azure.storage.blob.BlobProperties)"
  name: "CloudBlob.setProperties(BlobProperties)"
  nameWithType: "CloudBlob.setProperties(BlobProperties)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.setProperties(com.microsoft.azure.storage.blob.BlobProperties)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.setMetadata(java.util.HashMap<java.lang.String,java.lang.String>)"
  name: "CloudBlob.setMetadata(HashMap<String,String>)"
  nameWithType: "CloudBlob.setMetadata(HashMap<String,String>)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.setMetadata(java.util.HashMap<java.lang.String,java.lang.String>)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeInternal(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.downloadRangeInternal(long,Long,byte[],int,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.downloadRangeInternal(long,Long,byte[],int,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeInternal(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.generateUserDelegationSharedAccessSignature(com.microsoft.azure.storage.UserDelegationKey,com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,com.microsoft.azure.storage.IPRange,com.microsoft.azure.storage.SharedAccessProtocols)"
  name: "CloudBlob.generateUserDelegationSharedAccessSignature(UserDelegationKey,SharedAccessBlobPolicy,SharedAccessBlobHeaders,IPRange,SharedAccessProtocols)"
  nameWithType: "CloudBlob.generateUserDelegationSharedAccessSignature(UserDelegationKey,SharedAccessBlobPolicy,SharedAccessBlobHeaders,IPRange,SharedAccessProtocols)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.generateUserDelegationSharedAccessSignature(com.microsoft.azure.storage.UserDelegationKey,com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,com.microsoft.azure.storage.IPRange,com.microsoft.azure.storage.SharedAccessProtocols)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getStorageUri()"
  name: "CloudBlob.getStorageUri()"
  nameWithType: "CloudBlob.getStorageUri()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getStorageUri()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getStreamWriteSizeInBytes()"
  name: "CloudBlob.getStreamWriteSizeInBytes()"
  nameWithType: "CloudBlob.getStreamWriteSizeInBytes()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getStreamWriteSizeInBytes()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.download(java.io.OutputStream)"
  name: "CloudBlob.download(OutputStream)"
  nameWithType: "CloudBlob.download(OutputStream)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.download(java.io.OutputStream)"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.renewLease(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.renewLease(AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.renewLease(AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.renewLease(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadToFile(java.lang.String)"
  name: "CloudBlob.downloadToFile(String)"
  nameWithType: "CloudBlob.downloadToFile(String)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadToFile(java.lang.String)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadMetadata(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.uploadMetadata(AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.uploadMetadata(AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadMetadata(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.breakLease(java.lang.Integer,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.breakLease(Integer,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.breakLease(Integer,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.breakLease(java.lang.Integer,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadFromFile(java.lang.String)"
  name: "CloudBlob.uploadFromFile(String)"
  nameWithType: "CloudBlob.uploadFromFile(String)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadFromFile(java.lang.String)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadProperties(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.uploadProperties(AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.uploadProperties(AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadProperties(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.upload(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.upload(InputStream,long,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.upload(InputStream,long,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.upload(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.breakLease(java.lang.Integer)"
  name: "CloudBlob.breakLease(Integer)"
  nameWithType: "CloudBlob.breakLease(Integer)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.breakLease(java.lang.Integer)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getParentNameFromURI(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.blob.CloudBlobContainer)"
  name: "CloudBlob.getParentNameFromURI(StorageUri,String,CloudBlobContainer)"
  nameWithType: "CloudBlob.getParentNameFromURI(StorageUri,String,CloudBlobContainer)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getParentNameFromURI(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.blob.CloudBlobContainer)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getCopyState()"
  name: "CloudBlob.getCopyState()"
  nameWithType: "CloudBlob.getCopyState()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getCopyState()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getStreamMinimumReadSizeInBytes()"
  name: "CloudBlob.getStreamMinimumReadSizeInBytes()"
  nameWithType: "CloudBlob.getStreamMinimumReadSizeInBytes()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getStreamMinimumReadSizeInBytes()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.abortCopy(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.abortCopy(String,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.abortCopy(String,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.abortCopy(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.deleteIfExists(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.deleteIfExists(DeleteSnapshotsOption,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.deleteIfExists(DeleteSnapshotsOption,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.deleteIfExists(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.setStreamMinimumReadSizeInBytes(int)"
  name: "CloudBlob.setStreamMinimumReadSizeInBytes(int)"
  nameWithType: "CloudBlob.setStreamMinimumReadSizeInBytes(int)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.setStreamMinimumReadSizeInBytes(int)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.openInputStream(long,java.lang.Long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.openInputStream(long,Long,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.openInputStream(long,Long,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.openInputStream(long,java.lang.Long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.assertCorrectBlobType()"
  name: "CloudBlob.assertCorrectBlobType()"
  nameWithType: "CloudBlob.assertCorrectBlobType()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.assertCorrectBlobType()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.createSnapshot(AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.createSnapshot(AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.acquireLease(java.lang.Integer,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.acquireLease(Integer,String,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.acquireLease(Integer,String,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.acquireLease(java.lang.Integer,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadAttributes(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.downloadAttributes(AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.downloadAttributes(AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadAttributes(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInfo(com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.downloadAccountInfo(BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.downloadAccountInfo(BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInfo(com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getProperties()"
  name: "CloudBlob.getProperties()"
  nameWithType: "CloudBlob.getProperties()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getProperties()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadMetadata()"
  name: "CloudBlob.uploadMetadata()"
  nameWithType: "CloudBlob.uploadMetadata()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadMetadata()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(java.util.HashMap<java.lang.String,java.lang.String>,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.createSnapshot(HashMap<String,String>,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.createSnapshot(HashMap<String,String>,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(java.util.HashMap<java.lang.String,java.lang.String>,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeToByteArray(long,java.lang.Long,byte[],int)"
  name: "CloudBlob.downloadRangeToByteArray(long,Long,byte[],int)"
  nameWithType: "CloudBlob.downloadRangeToByteArray(long,Long,byte[],int)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeToByteArray(long,java.lang.Long,byte[],int)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.deleteIfExists()"
  name: "CloudBlob.deleteIfExists()"
  nameWithType: "CloudBlob.deleteIfExists()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.deleteIfExists()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.undelete()"
  name: "CloudBlob.undelete()"
  nameWithType: "CloudBlob.undelete()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.undelete()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getMetadata()"
  name: "CloudBlob.getMetadata()"
  nameWithType: "CloudBlob.getMetadata()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getMetadata()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.<T,R>validateCPKHeaders(com.microsoft.azure.storage.core.StorageRequest<com.microsoft.azure.storage.blob.CloudBlobClient,T,R>,com.microsoft.azure.storage.blob.BlobRequestOptions,boolean)"
  name: "CloudBlob.<T,R>validateCPKHeaders(StorageRequest<CloudBlobClient,T,R>,BlobRequestOptions,boolean)"
  nameWithType: "CloudBlob.<T,R>validateCPKHeaders(StorageRequest<CloudBlobClient,T,R>,BlobRequestOptions,boolean)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.<T,R>validateCPKHeaders(com.microsoft.azure.storage.core.StorageRequest<com.microsoft.azure.storage.blob.CloudBlobClient,T,R>,com.microsoft.azure.storage.blob.BlobRequestOptions,boolean)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInformationImpl(com.microsoft.azure.storage.RequestOptions)"
  name: "CloudBlob.downloadAccountInformationImpl(RequestOptions)"
  nameWithType: "CloudBlob.downloadAccountInformationImpl(RequestOptions)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInformationImpl(com.microsoft.azure.storage.RequestOptions)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInfo()"
  name: "CloudBlob.downloadAccountInfo()"
  nameWithType: "CloudBlob.downloadAccountInfo()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInfo()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,java.lang.String)"
  name: "CloudBlob.generateSharedAccessSignature(SharedAccessBlobPolicy,SharedAccessBlobHeaders,String)"
  nameWithType: "CloudBlob.generateSharedAccessSignature(SharedAccessBlobPolicy,SharedAccessBlobHeaders,String)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,java.lang.String)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.download(java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.download(OutputStream,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.download(OutputStream,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.download(java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,java.lang.String,com.microsoft.azure.storage.IPRange,com.microsoft.azure.storage.SharedAccessProtocols)"
  name: "CloudBlob.generateSharedAccessSignature(SharedAccessBlobPolicy,SharedAccessBlobHeaders,String,IPRange,SharedAccessProtocols)"
  nameWithType: "CloudBlob.generateSharedAccessSignature(SharedAccessBlobPolicy,SharedAccessBlobHeaders,String,IPRange,SharedAccessProtocols)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,java.lang.String,com.microsoft.azure.storage.IPRange,com.microsoft.azure.storage.SharedAccessProtocols)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.setStreamWriteSizeInBytes(int)"
  name: "CloudBlob.setStreamWriteSizeInBytes(int)"
  nameWithType: "CloudBlob.setStreamWriteSizeInBytes(int)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.setStreamWriteSizeInBytes(int)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getQualifiedStorageUri()"
  name: "CloudBlob.getQualifiedStorageUri()"
  nameWithType: "CloudBlob.getQualifiedStorageUri()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getQualifiedStorageUri()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.releaseLease(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.releaseLease(AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.releaseLease(AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.releaseLease(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getName()"
  name: "CloudBlob.getName()"
  nameWithType: "CloudBlob.getName()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getName()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadRange(long,java.lang.Long,java.io.OutputStream)"
  name: "CloudBlob.downloadRange(long,Long,OutputStream)"
  nameWithType: "CloudBlob.downloadRange(long,Long,OutputStream)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadRange(long,java.lang.Long,java.io.OutputStream)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getTransformedAddress(com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.getTransformedAddress(OperationContext)"
  nameWithType: "CloudBlob.getTransformedAddress(OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getTransformedAddress(com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.renewLease(com.microsoft.azure.storage.AccessCondition)"
  name: "CloudBlob.renewLease(AccessCondition)"
  nameWithType: "CloudBlob.renewLease(AccessCondition)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.renewLease(com.microsoft.azure.storage.AccessCondition)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadFromByteArray(byte[],int,int)"
  name: "CloudBlob.uploadFromByteArray(byte[],int,int)"
  nameWithType: "CloudBlob.uploadFromByteArray(byte[],int,int)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadFromByteArray(byte[],int,int)"
- uid: "com.microsoft.azure.storage.blob.PageRange"
  name: "PageRange"
  nameWithType: "PageRange"
  fullName: "com.microsoft.azure.storage.blob.PageRange"
- uid: "java.util.ArrayList"
  name: "ArrayList"
  nameWithType: "ArrayList"
  fullName: "java.util.ArrayList"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.microsoft.azure.storage.blob.PageRangeDiff"
  name: "PageRangeDiff"
  nameWithType: "PageRangeDiff"
  fullName: "com.microsoft.azure.storage.blob.PageRangeDiff"
- uid: "java.lang.String,java.lang.String>)"
  name: "String,String>)"
  nameWithType: "String,String>)"
  fullName: "java.lang.String,java.lang.String>)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.setMetadata(java.util.HashMap"
  name: "CloudBlob.setMetadata(HashMap"
  nameWithType: "CloudBlob.setMetadata(HashMap"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.setMetadata(java.util.HashMap"
- uid: "java.lang.String,java.lang.String>,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "String,String>,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "String,String>,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "java.lang.String,java.lang.String>,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(java.util.HashMap"
  name: "CloudBlob.createSnapshot(HashMap"
  nameWithType: "CloudBlob.createSnapshot(HashMap"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(java.util.HashMap"
- uid: "T,R>validateCPKHeaders(com.microsoft.azure.storage.core.StorageRequest"
  name: "T,R>validateCPKHeaders(StorageRequest"
  nameWithType: "T,R>validateCPKHeaders(StorageRequest"
  fullName: "T,R>validateCPKHeaders(com.microsoft.azure.storage.core.StorageRequest"
- uid: "com.microsoft.azure.storage.blob.CloudBlobClient,T,R>,com.microsoft.azure.storage.blob.BlobRequestOptions,boolean)"
  name: "CloudBlobClient,T,R>,BlobRequestOptions,boolean)"
  nameWithType: "CloudBlobClient,T,R>,BlobRequestOptions,boolean)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlobClient,T,R>,com.microsoft.azure.storage.blob.BlobRequestOptions,boolean)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob."
  name: "CloudBlob."
  nameWithType: "CloudBlob."
  fullName: "com.microsoft.azure.storage.blob.CloudBlob."
