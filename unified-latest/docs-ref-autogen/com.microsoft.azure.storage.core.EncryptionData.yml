### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.core.EncryptionData"
  id: "EncryptionData"
  parent: "com.microsoft.azure.storage.core"
  children:
  - "com.microsoft.azure.storage.core.EncryptionData.EncryptionData()"
  - "com.microsoft.azure.storage.core.EncryptionData.consumeJsonObject(com.fasterxml.jackson.core.JsonParser)"
  - "com.microsoft.azure.storage.core.EncryptionData.copyValues(com.microsoft.azure.storage.core.EncryptionData)"
  - "com.microsoft.azure.storage.core.EncryptionData.deserialize(com.fasterxml.jackson.core.JsonParser)"
  - "com.microsoft.azure.storage.core.EncryptionData.deserialize(java.lang.String)"
  - "com.microsoft.azure.storage.core.EncryptionData.deserializeKeyWrappingMetadata(com.fasterxml.jackson.core.JsonParser)"
  - "com.microsoft.azure.storage.core.EncryptionData.getContentEncryptionIV()"
  - "com.microsoft.azure.storage.core.EncryptionData.getEncryptionAgent()"
  - "com.microsoft.azure.storage.core.EncryptionData.getKeyWrappingMetadata()"
  - "com.microsoft.azure.storage.core.EncryptionData.getWrappedContentKey()"
  - "com.microsoft.azure.storage.core.EncryptionData.serialize()"
  - "com.microsoft.azure.storage.core.EncryptionData.serialize(com.fasterxml.jackson.core.JsonGenerator)"
  - "com.microsoft.azure.storage.core.EncryptionData.setContentEncryptionIV(byte[])"
  - "com.microsoft.azure.storage.core.EncryptionData.setEncryptionAgent(com.microsoft.azure.storage.core.EncryptionAgent)"
  - "com.microsoft.azure.storage.core.EncryptionData.setKeyWrappingMetadata(java.util.HashMap<java.lang.String,java.lang.String>)"
  - "com.microsoft.azure.storage.core.EncryptionData.setWrappedContentKey(com.microsoft.azure.storage.core.WrappedContentKey)"
  langs:
  - "java"
  name: "EncryptionData"
  nameWithType: "EncryptionData"
  fullName: "com.microsoft.azure.storage.core.EncryptionData"
  type: "Class"
  package: "com.microsoft.azure.storage.core"
  summary: "RESERVED FOR INTERNAL USE. Represents the encryption data that is stored on the service."
  syntax:
    content: "public class EncryptionData"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.core.EncryptionData.EncryptionData()"
  id: "EncryptionData()"
  parent: "com.microsoft.azure.storage.core.EncryptionData"
  langs:
  - "java"
  name: "EncryptionData()"
  nameWithType: "EncryptionData.EncryptionData()"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.EncryptionData()"
  overload: "com.microsoft.azure.storage.core.EncryptionData.EncryptionData*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.core"
  syntax:
    content: "public EncryptionData()"
- uid: "com.microsoft.azure.storage.core.EncryptionData.consumeJsonObject(com.fasterxml.jackson.core.JsonParser)"
  id: "consumeJsonObject(com.fasterxml.jackson.core.JsonParser)"
  parent: "com.microsoft.azure.storage.core.EncryptionData"
  langs:
  - "java"
  name: "consumeJsonObject(JsonParser parser)"
  nameWithType: "EncryptionData.consumeJsonObject(JsonParser parser)"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.consumeJsonObject(JsonParser parser)"
  overload: "com.microsoft.azure.storage.core.EncryptionData.consumeJsonObject*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  syntax:
    content: "public static void consumeJsonObject(JsonParser parser)"
    parameters:
    - id: "parser"
      type: "com.fasterxml.jackson.core.JsonParser"
  exceptions:
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.core.EncryptionData.copyValues(com.microsoft.azure.storage.core.EncryptionData)"
  id: "copyValues(com.microsoft.azure.storage.core.EncryptionData)"
  parent: "com.microsoft.azure.storage.core.EncryptionData"
  langs:
  - "java"
  name: "copyValues(EncryptionData data)"
  nameWithType: "EncryptionData.copyValues(EncryptionData data)"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.copyValues(EncryptionData data)"
  overload: "com.microsoft.azure.storage.core.EncryptionData.copyValues*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  syntax:
    content: "public void copyValues(EncryptionData data)"
    parameters:
    - id: "data"
      type: "com.microsoft.azure.storage.core.EncryptionData"
  exceptions:
  - type: "com.fasterxml.jackson.core.JsonProcessingException"
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.core.EncryptionData.deserialize(com.fasterxml.jackson.core.JsonParser)"
  id: "deserialize(com.fasterxml.jackson.core.JsonParser)"
  parent: "com.microsoft.azure.storage.core.EncryptionData"
  langs:
  - "java"
  name: "deserialize(JsonParser parser)"
  nameWithType: "EncryptionData.deserialize(JsonParser parser)"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.deserialize(JsonParser parser)"
  overload: "com.microsoft.azure.storage.core.EncryptionData.deserialize*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  syntax:
    content: "public static EncryptionData deserialize(JsonParser parser)"
    parameters:
    - id: "parser"
      type: "com.fasterxml.jackson.core.JsonParser"
    return:
      type: "com.microsoft.azure.storage.core.EncryptionData"
  exceptions:
  - type: "com.fasterxml.jackson.core.JsonParseException"
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.core.EncryptionData.deserialize(java.lang.String)"
  id: "deserialize(java.lang.String)"
  parent: "com.microsoft.azure.storage.core.EncryptionData"
  langs:
  - "java"
  name: "deserialize(String inputData)"
  nameWithType: "EncryptionData.deserialize(String inputData)"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.deserialize(String inputData)"
  overload: "com.microsoft.azure.storage.core.EncryptionData.deserialize*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  syntax:
    content: "public static EncryptionData deserialize(String inputData)"
    parameters:
    - id: "inputData"
      type: "java.lang.String"
    return:
      type: "com.microsoft.azure.storage.core.EncryptionData"
  exceptions:
  - type: "com.fasterxml.jackson.core.JsonProcessingException"
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.core.EncryptionData.deserializeKeyWrappingMetadata(com.fasterxml.jackson.core.JsonParser)"
  id: "deserializeKeyWrappingMetadata(com.fasterxml.jackson.core.JsonParser)"
  parent: "com.microsoft.azure.storage.core.EncryptionData"
  langs:
  - "java"
  name: "deserializeKeyWrappingMetadata(JsonParser parser)"
  nameWithType: "EncryptionData.deserializeKeyWrappingMetadata(JsonParser parser)"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.deserializeKeyWrappingMetadata(JsonParser parser)"
  overload: "com.microsoft.azure.storage.core.EncryptionData.deserializeKeyWrappingMetadata*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  syntax:
    content: "public static HashMap<String,String> deserializeKeyWrappingMetadata(JsonParser parser)"
    parameters:
    - id: "parser"
      type: "com.fasterxml.jackson.core.JsonParser"
    return:
      type: "java.util.HashMap<java.lang.String,java.lang.String>"
  exceptions:
  - type: "com.fasterxml.jackson.core.JsonParseException"
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.core.EncryptionData.getContentEncryptionIV()"
  id: "getContentEncryptionIV()"
  parent: "com.microsoft.azure.storage.core.EncryptionData"
  langs:
  - "java"
  name: "getContentEncryptionIV()"
  nameWithType: "EncryptionData.getContentEncryptionIV()"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.getContentEncryptionIV()"
  overload: "com.microsoft.azure.storage.core.EncryptionData.getContentEncryptionIV*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  summary: "Gets the content encryption IV."
  syntax:
    content: "public byte[] getContentEncryptionIV()"
    return:
      type: "byte[]"
      description: "The content encryption IV."
- uid: "com.microsoft.azure.storage.core.EncryptionData.getEncryptionAgent()"
  id: "getEncryptionAgent()"
  parent: "com.microsoft.azure.storage.core.EncryptionData"
  langs:
  - "java"
  name: "getEncryptionAgent()"
  nameWithType: "EncryptionData.getEncryptionAgent()"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.getEncryptionAgent()"
  overload: "com.microsoft.azure.storage.core.EncryptionData.getEncryptionAgent*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  summary: "Gets the encryption agent that is used to identify the encryption protocol version and encryption algorithm."
  syntax:
    content: "public EncryptionAgent getEncryptionAgent()"
    return:
      type: "com.microsoft.azure.storage.core.EncryptionAgent"
      description: "The encryption agent."
- uid: "com.microsoft.azure.storage.core.EncryptionData.getKeyWrappingMetadata()"
  id: "getKeyWrappingMetadata()"
  parent: "com.microsoft.azure.storage.core.EncryptionData"
  langs:
  - "java"
  name: "getKeyWrappingMetadata()"
  nameWithType: "EncryptionData.getKeyWrappingMetadata()"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.getKeyWrappingMetadata()"
  overload: "com.microsoft.azure.storage.core.EncryptionData.getKeyWrappingMetadata*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  summary: "Gets the metadata for encryption."
  syntax:
    content: "public HashMap<String,String> getKeyWrappingMetadata()"
    return:
      type: "java.util.HashMap<java.lang.String,java.lang.String>"
      description: "A HashMap containing the encryption metadata in a key-value format."
- uid: "com.microsoft.azure.storage.core.EncryptionData.getWrappedContentKey()"
  id: "getWrappedContentKey()"
  parent: "com.microsoft.azure.storage.core.EncryptionData"
  langs:
  - "java"
  name: "getWrappedContentKey()"
  nameWithType: "EncryptionData.getWrappedContentKey()"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.getWrappedContentKey()"
  overload: "com.microsoft.azure.storage.core.EncryptionData.getWrappedContentKey*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  summary: "Gets the wrapped key that is used to store the wrapping algorithm, key identifier and the encrypted key bytes."
  syntax:
    content: "public WrappedContentKey getWrappedContentKey()"
    return:
      type: "com.microsoft.azure.storage.core.WrappedContentKey"
      description: "A <xref uid=\"com.microsoft.azure.storage.core.WrappedContentKey\" data-throw-if-not-resolved=\"false\">WrappedContentKey</xref> object that stores the wrapping algorithm, key identifier and the encrypted\n         key bytes."
- uid: "com.microsoft.azure.storage.core.EncryptionData.serialize()"
  id: "serialize()"
  parent: "com.microsoft.azure.storage.core.EncryptionData"
  langs:
  - "java"
  name: "serialize()"
  nameWithType: "EncryptionData.serialize()"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.serialize()"
  overload: "com.microsoft.azure.storage.core.EncryptionData.serialize*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  syntax:
    content: "public String serialize()"
    return:
      type: "java.lang.String"
  exceptions:
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.core.EncryptionData.serialize(com.fasterxml.jackson.core.JsonGenerator)"
  id: "serialize(com.fasterxml.jackson.core.JsonGenerator)"
  parent: "com.microsoft.azure.storage.core.EncryptionData"
  langs:
  - "java"
  name: "serialize(JsonGenerator generator)"
  nameWithType: "EncryptionData.serialize(JsonGenerator generator)"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.serialize(JsonGenerator generator)"
  overload: "com.microsoft.azure.storage.core.EncryptionData.serialize*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  syntax:
    content: "public void serialize(JsonGenerator generator)"
    parameters:
    - id: "generator"
      type: "com.fasterxml.jackson.core.JsonGenerator"
  exceptions:
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.core.EncryptionData.setContentEncryptionIV(byte[])"
  id: "setContentEncryptionIV(byte[])"
  parent: "com.microsoft.azure.storage.core.EncryptionData"
  langs:
  - "java"
  name: "setContentEncryptionIV(byte[] contentEncryptionIV)"
  nameWithType: "EncryptionData.setContentEncryptionIV(byte[] contentEncryptionIV)"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.setContentEncryptionIV(byte[] contentEncryptionIV)"
  overload: "com.microsoft.azure.storage.core.EncryptionData.setContentEncryptionIV*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  summary: "Sets the content encryption IV."
  syntax:
    content: "public void setContentEncryptionIV(byte[] contentEncryptionIV)"
    parameters:
    - id: "contentEncryptionIV"
      type: "byte[]"
      description: "The content encryption IV."
- uid: "com.microsoft.azure.storage.core.EncryptionData.setEncryptionAgent(com.microsoft.azure.storage.core.EncryptionAgent)"
  id: "setEncryptionAgent(com.microsoft.azure.storage.core.EncryptionAgent)"
  parent: "com.microsoft.azure.storage.core.EncryptionData"
  langs:
  - "java"
  name: "setEncryptionAgent(EncryptionAgent encryptionAgent)"
  nameWithType: "EncryptionData.setEncryptionAgent(EncryptionAgent encryptionAgent)"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.setEncryptionAgent(EncryptionAgent encryptionAgent)"
  overload: "com.microsoft.azure.storage.core.EncryptionData.setEncryptionAgent*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  summary: "Sets the encryption agent that is used to identify the encryption protocol version and encryption algorithm."
  syntax:
    content: "public void setEncryptionAgent(EncryptionAgent encryptionAgent)"
    parameters:
    - id: "encryptionAgent"
      type: "com.microsoft.azure.storage.core.EncryptionAgent"
      description: "The encryption agent."
- uid: "com.microsoft.azure.storage.core.EncryptionData.setKeyWrappingMetadata(java.util.HashMap<java.lang.String,java.lang.String>)"
  id: "setKeyWrappingMetadata(java.util.HashMap<java.lang.String,java.lang.String>)"
  parent: "com.microsoft.azure.storage.core.EncryptionData"
  langs:
  - "java"
  name: "setKeyWrappingMetadata(HashMap<String,String> keyWrappingMetadata)"
  nameWithType: "EncryptionData.setKeyWrappingMetadata(HashMap<String,String> keyWrappingMetadata)"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.setKeyWrappingMetadata(HashMap<String,String> keyWrappingMetadata)"
  overload: "com.microsoft.azure.storage.core.EncryptionData.setKeyWrappingMetadata*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  summary: "Sets the metadata for encryption."
  syntax:
    content: "public void setKeyWrappingMetadata(HashMap<String,String> keyWrappingMetadata)"
    parameters:
    - id: "keyWrappingMetadata"
      type: "java.util.HashMap<java.lang.String,java.lang.String>"
      description: "A HashMap containing the encryption metadata in a key-value format."
- uid: "com.microsoft.azure.storage.core.EncryptionData.setWrappedContentKey(com.microsoft.azure.storage.core.WrappedContentKey)"
  id: "setWrappedContentKey(com.microsoft.azure.storage.core.WrappedContentKey)"
  parent: "com.microsoft.azure.storage.core.EncryptionData"
  langs:
  - "java"
  name: "setWrappedContentKey(WrappedContentKey wrappedContentKey)"
  nameWithType: "EncryptionData.setWrappedContentKey(WrappedContentKey wrappedContentKey)"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.setWrappedContentKey(WrappedContentKey wrappedContentKey)"
  overload: "com.microsoft.azure.storage.core.EncryptionData.setWrappedContentKey*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  summary: "Sets the wrapped key that is used to store the wrapping algorithm, key identifier and the encrypted key bytes."
  syntax:
    content: "public void setWrappedContentKey(WrappedContentKey wrappedContentKey)"
    parameters:
    - id: "wrappedContentKey"
      type: "com.microsoft.azure.storage.core.WrappedContentKey"
      description: "A <xref uid=\"com.microsoft.azure.storage.core.WrappedContentKey\" data-throw-if-not-resolved=\"false\">WrappedContentKey</xref> object that stores the wrapping algorithm, key identifier and the\n            encrypted key bytes."
references:
- uid: "com.microsoft.azure.storage.core.EncryptionData.EncryptionData*"
  name: "EncryptionData"
  nameWithType: "EncryptionData.EncryptionData"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.EncryptionData"
  package: "com.microsoft.azure.storage.core"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "com.microsoft.azure.storage.core.EncryptionData.getContentEncryptionIV*"
  name: "getContentEncryptionIV"
  nameWithType: "EncryptionData.getContentEncryptionIV"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.getContentEncryptionIV"
  package: "com.microsoft.azure.storage.core"
- uid: "com.microsoft.azure.storage.core.EncryptionAgent"
  name: "EncryptionAgent"
  nameWithType: "EncryptionAgent"
  fullName: "com.microsoft.azure.storage.core.EncryptionAgent"
- uid: "com.microsoft.azure.storage.core.EncryptionData.getEncryptionAgent*"
  name: "getEncryptionAgent"
  nameWithType: "EncryptionData.getEncryptionAgent"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.getEncryptionAgent"
  package: "com.microsoft.azure.storage.core"
- uid: "com.microsoft.azure.storage.core.WrappedContentKey"
  name: "WrappedContentKey"
  nameWithType: "WrappedContentKey"
  fullName: "com.microsoft.azure.storage.core.WrappedContentKey"
- uid: "com.microsoft.azure.storage.core.EncryptionData.getWrappedContentKey*"
  name: "getWrappedContentKey"
  nameWithType: "EncryptionData.getWrappedContentKey"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.getWrappedContentKey"
  package: "com.microsoft.azure.storage.core"
- uid: "java.util.HashMap<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.HashMap"
    name: "HashMap"
    fullName: "java.util.HashMap"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.core.EncryptionData.getKeyWrappingMetadata*"
  name: "getKeyWrappingMetadata"
  nameWithType: "EncryptionData.getKeyWrappingMetadata"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.getKeyWrappingMetadata"
  package: "com.microsoft.azure.storage.core"
- uid: "com.microsoft.azure.storage.core.EncryptionData.setContentEncryptionIV*"
  name: "setContentEncryptionIV"
  nameWithType: "EncryptionData.setContentEncryptionIV"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.setContentEncryptionIV"
  package: "com.microsoft.azure.storage.core"
- uid: "com.microsoft.azure.storage.core.EncryptionData.setEncryptionAgent*"
  name: "setEncryptionAgent"
  nameWithType: "EncryptionData.setEncryptionAgent"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.setEncryptionAgent"
  package: "com.microsoft.azure.storage.core"
- uid: "com.microsoft.azure.storage.core.EncryptionData.setWrappedContentKey*"
  name: "setWrappedContentKey"
  nameWithType: "EncryptionData.setWrappedContentKey"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.setWrappedContentKey"
  package: "com.microsoft.azure.storage.core"
- uid: "com.microsoft.azure.storage.core.EncryptionData.setKeyWrappingMetadata*"
  name: "setKeyWrappingMetadata"
  nameWithType: "EncryptionData.setKeyWrappingMetadata"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.setKeyWrappingMetadata"
  package: "com.microsoft.azure.storage.core"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.microsoft.azure.storage.core.EncryptionData.serialize*"
  name: "serialize"
  nameWithType: "EncryptionData.serialize"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.serialize"
  package: "com.microsoft.azure.storage.core"
- uid: "com.fasterxml.jackson.core.JsonGenerator"
  spec.java:
  - uid: "com.fasterxml.jackson.core.JsonGenerator"
    name: "JsonGenerator"
    fullName: "com.fasterxml.jackson.core.JsonGenerator"
- uid: "com.fasterxml.jackson.core.JsonProcessingException"
  spec.java:
  - uid: "com.fasterxml.jackson.core.JsonProcessingException"
    name: "JsonProcessingException"
    fullName: "com.fasterxml.jackson.core.JsonProcessingException"
- uid: "com.microsoft.azure.storage.core.EncryptionData.copyValues*"
  name: "copyValues"
  nameWithType: "EncryptionData.copyValues"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.copyValues"
  package: "com.microsoft.azure.storage.core"
- uid: "com.microsoft.azure.storage.core.EncryptionData.deserialize*"
  name: "deserialize"
  nameWithType: "EncryptionData.deserialize"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.deserialize"
  package: "com.microsoft.azure.storage.core"
- uid: "com.fasterxml.jackson.core.JsonParseException"
  spec.java:
  - uid: "com.fasterxml.jackson.core.JsonParseException"
    name: "JsonParseException"
    fullName: "com.fasterxml.jackson.core.JsonParseException"
- uid: "com.fasterxml.jackson.core.JsonParser"
  spec.java:
  - uid: "com.fasterxml.jackson.core.JsonParser"
    name: "JsonParser"
    fullName: "com.fasterxml.jackson.core.JsonParser"
- uid: "com.microsoft.azure.storage.core.EncryptionData.deserializeKeyWrappingMetadata*"
  name: "deserializeKeyWrappingMetadata"
  nameWithType: "EncryptionData.deserializeKeyWrappingMetadata"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.deserializeKeyWrappingMetadata"
  package: "com.microsoft.azure.storage.core"
- uid: "com.microsoft.azure.storage.core.EncryptionData.consumeJsonObject*"
  name: "consumeJsonObject"
  nameWithType: "EncryptionData.consumeJsonObject"
  fullName: "com.microsoft.azure.storage.core.EncryptionData.consumeJsonObject"
  package: "com.microsoft.azure.storage.core"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.HashMap"
  name: "HashMap"
  nameWithType: "HashMap"
  fullName: "java.util.HashMap"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
