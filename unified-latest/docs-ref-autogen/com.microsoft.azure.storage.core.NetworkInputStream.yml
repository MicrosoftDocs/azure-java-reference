### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.core.NetworkInputStream"
  id: "NetworkInputStream"
  parent: "com.microsoft.azure.storage.core"
  children:
  - "com.microsoft.azure.storage.core.NetworkInputStream.NetworkInputStream(java.io.InputStream,long)"
  - "com.microsoft.azure.storage.core.NetworkInputStream.close()"
  - "com.microsoft.azure.storage.core.NetworkInputStream.read()"
  - "com.microsoft.azure.storage.core.NetworkInputStream.read(byte[],int,int)"
  langs:
  - "java"
  name: "NetworkInputStream"
  nameWithType: "NetworkInputStream"
  fullName: "com.microsoft.azure.storage.core.NetworkInputStream"
  type: "Class"
  package: "com.microsoft.azure.storage.core"
  summary: "RESERVED FOR INTERNAL USE."
  syntax:
    content: "public class NetworkInputStream extends InputStream"
  inheritance:
  - "java.lang.Object"
  - "java.io.InputStream"
  inheritedMembers:
  - "java.io.InputStream.available()"
  - "java.io.InputStream.close()"
  - "java.io.InputStream.mark(int)"
  - "java.io.InputStream.markSupported()"
  - "java.io.InputStream.nullInputStream()"
  - "java.io.InputStream.read()"
  - "java.io.InputStream.read(byte[])"
  - "java.io.InputStream.read(byte[],int,int)"
  - "java.io.InputStream.readAllBytes()"
  - "java.io.InputStream.readNBytes(byte[],int,int)"
  - "java.io.InputStream.readNBytes(int)"
  - "java.io.InputStream.reset()"
  - "java.io.InputStream.skip(long)"
  - "java.io.InputStream.transferTo(java.io.OutputStream)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.core.NetworkInputStream.NetworkInputStream(java.io.InputStream,long)"
  id: "NetworkInputStream(java.io.InputStream,long)"
  parent: "com.microsoft.azure.storage.core.NetworkInputStream"
  langs:
  - "java"
  name: "NetworkInputStream(InputStream stream, long expectedLength)"
  nameWithType: "NetworkInputStream.NetworkInputStream(InputStream stream, long expectedLength)"
  fullName: "com.microsoft.azure.storage.core.NetworkInputStream.NetworkInputStream(InputStream stream, long expectedLength)"
  overload: "com.microsoft.azure.storage.core.NetworkInputStream.NetworkInputStream*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.core"
  summary: "Creates a NetworkInputStream and saves its arguments, the input stream and expected length, for later use."
  syntax:
    content: "public NetworkInputStream(InputStream stream, long expectedLength)"
    parameters:
    - id: "stream"
      type: "java.io.InputStream"
    - id: "expectedLength"
      type: "long"
- uid: "com.microsoft.azure.storage.core.NetworkInputStream.close()"
  id: "close()"
  parent: "com.microsoft.azure.storage.core.NetworkInputStream"
  langs:
  - "java"
  name: "close()"
  nameWithType: "NetworkInputStream.close()"
  fullName: "com.microsoft.azure.storage.core.NetworkInputStream.close()"
  overload: "com.microsoft.azure.storage.core.NetworkInputStream.close*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  syntax:
    content: "public void close()"
  exceptions:
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.core.NetworkInputStream.read()"
  id: "read()"
  parent: "com.microsoft.azure.storage.core.NetworkInputStream"
  langs:
  - "java"
  name: "read()"
  nameWithType: "NetworkInputStream.read()"
  fullName: "com.microsoft.azure.storage.core.NetworkInputStream.read()"
  overload: "com.microsoft.azure.storage.core.NetworkInputStream.read*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  syntax:
    content: "public int read()"
    return:
      type: "int"
  exceptions:
  - type: "java.io.IOException"
- uid: "com.microsoft.azure.storage.core.NetworkInputStream.read(byte[],int,int)"
  id: "read(byte[],int,int)"
  parent: "com.microsoft.azure.storage.core.NetworkInputStream"
  langs:
  - "java"
  name: "read(byte[] b, int off, int len)"
  nameWithType: "NetworkInputStream.read(byte[] b, int off, int len)"
  fullName: "com.microsoft.azure.storage.core.NetworkInputStream.read(byte[] b, int off, int len)"
  overload: "com.microsoft.azure.storage.core.NetworkInputStream.read*"
  type: "Method"
  package: "com.microsoft.azure.storage.core"
  syntax:
    content: "public int read(byte[] b, int off, int len)"
    parameters:
    - id: "b"
      type: "byte[]"
    - id: "off"
      type: "int"
    - id: "len"
      type: "int"
    return:
      type: "int"
  exceptions:
  - type: "java.io.IOException"
references:
- uid: "java.io.InputStream"
  spec.java:
  - uid: "java.io.InputStream"
    name: "InputStream"
    fullName: "java.io.InputStream"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.microsoft.azure.storage.core.NetworkInputStream.NetworkInputStream*"
  name: "NetworkInputStream"
  nameWithType: "NetworkInputStream.NetworkInputStream"
  fullName: "com.microsoft.azure.storage.core.NetworkInputStream.NetworkInputStream"
  package: "com.microsoft.azure.storage.core"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.microsoft.azure.storage.core.NetworkInputStream.read*"
  name: "read"
  nameWithType: "NetworkInputStream.read"
  fullName: "com.microsoft.azure.storage.core.NetworkInputStream.read"
  package: "com.microsoft.azure.storage.core"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "com.microsoft.azure.storage.core.NetworkInputStream.close*"
  name: "close"
  nameWithType: "NetworkInputStream.close"
  fullName: "com.microsoft.azure.storage.core.NetworkInputStream.close"
  package: "com.microsoft.azure.storage.core"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.io.InputStream.mark(int)"
  name: "InputStream.mark(int)"
  nameWithType: "InputStream.mark(int)"
  fullName: "java.io.InputStream.mark(int)"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.io.InputStream.readNBytes(int)"
  name: "InputStream.readNBytes(int)"
  nameWithType: "InputStream.readNBytes(int)"
  fullName: "java.io.InputStream.readNBytes(int)"
- uid: "java.io.InputStream.close()"
  name: "InputStream.close()"
  nameWithType: "InputStream.close()"
  fullName: "java.io.InputStream.close()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.io.InputStream.markSupported()"
  name: "InputStream.markSupported()"
  nameWithType: "InputStream.markSupported()"
  fullName: "java.io.InputStream.markSupported()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.io.InputStream.nullInputStream()"
  name: "InputStream.nullInputStream()"
  nameWithType: "InputStream.nullInputStream()"
  fullName: "java.io.InputStream.nullInputStream()"
- uid: "java.io.InputStream.transferTo(java.io.OutputStream)"
  name: "InputStream.transferTo(OutputStream)"
  nameWithType: "InputStream.transferTo(OutputStream)"
  fullName: "java.io.InputStream.transferTo(java.io.OutputStream)"
- uid: "java.io.InputStream.read(byte[])"
  name: "InputStream.read(byte[])"
  nameWithType: "InputStream.read(byte[])"
  fullName: "java.io.InputStream.read(byte[])"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.io.InputStream.available()"
  name: "InputStream.available()"
  nameWithType: "InputStream.available()"
  fullName: "java.io.InputStream.available()"
- uid: "java.io.InputStream.readNBytes(byte[],int,int)"
  name: "InputStream.readNBytes(byte[],int,int)"
  nameWithType: "InputStream.readNBytes(byte[],int,int)"
  fullName: "java.io.InputStream.readNBytes(byte[],int,int)"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.io.InputStream.readAllBytes()"
  name: "InputStream.readAllBytes()"
  nameWithType: "InputStream.readAllBytes()"
  fullName: "java.io.InputStream.readAllBytes()"
- uid: "java.io.InputStream.skip(long)"
  name: "InputStream.skip(long)"
  nameWithType: "InputStream.skip(long)"
  fullName: "java.io.InputStream.skip(long)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.io.InputStream.read()"
  name: "InputStream.read()"
  nameWithType: "InputStream.read()"
  fullName: "java.io.InputStream.read()"
- uid: "java.io.InputStream.read(byte[],int,int)"
  name: "InputStream.read(byte[],int,int)"
  nameWithType: "InputStream.read(byte[],int,int)"
  fullName: "java.io.InputStream.read(byte[],int,int)"
- uid: "java.io.InputStream.reset()"
  name: "InputStream.reset()"
  nameWithType: "InputStream.reset()"
  fullName: "java.io.InputStream.reset()"
