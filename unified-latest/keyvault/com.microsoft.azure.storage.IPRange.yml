### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.IPRange"
  id: "IPRange"
  parent: "com.microsoft.azure.storage"
  children:
  - "com.microsoft.azure.storage.IPRange.IPRange(java.lang.String)"
  - "com.microsoft.azure.storage.IPRange.IPRange(java.lang.String,java.lang.String)"
  - "com.microsoft.azure.storage.IPRange.getIpMax()"
  - "com.microsoft.azure.storage.IPRange.getIpMin()"
  - "com.microsoft.azure.storage.IPRange.toString()"
  langs:
  - "java"
  name: "IPRange"
  nameWithType: "IPRange"
  fullName: "com.microsoft.azure.storage.IPRange"
  type: "Class"
  package: "com.microsoft.azure.storage"
  summary: "A continuous range of IP addresses."
  syntax:
    content: "public final class IPRange"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.IPRange.IPRange(java.lang.String)"
  id: "IPRange(java.lang.String)"
  parent: "com.microsoft.azure.storage.IPRange"
  langs:
  - "java"
  name: "IPRange(String ip)"
  nameWithType: "IPRange.IPRange(String ip)"
  fullName: "com.microsoft.azure.storage.IPRange.IPRange(String ip)"
  overload: "com.microsoft.azure.storage.IPRange.IPRange*"
  type: "Constructor"
  package: "com.microsoft.azure.storage"
  summary: "Creates an IP Range using the specified single IP address. The IP address must be IPv4."
  syntax:
    content: "public IPRange(String ip)"
    parameters:
    - id: "ip"
      type: "java.lang.String"
      description: "the single IP address"
- uid: "com.microsoft.azure.storage.IPRange.IPRange(java.lang.String,java.lang.String)"
  id: "IPRange(java.lang.String,java.lang.String)"
  parent: "com.microsoft.azure.storage.IPRange"
  langs:
  - "java"
  name: "IPRange(String mininimumIP, String maximumIP)"
  nameWithType: "IPRange.IPRange(String mininimumIP, String maximumIP)"
  fullName: "com.microsoft.azure.storage.IPRange.IPRange(String mininimumIP, String maximumIP)"
  overload: "com.microsoft.azure.storage.IPRange.IPRange*"
  type: "Constructor"
  package: "com.microsoft.azure.storage"
  summary: "Creates an IP Range using the specified minimum and maximum IP addresses. The IP addresses must be IPv4."
  syntax:
    content: "public IPRange(String mininimumIP, String maximumIP)"
    parameters:
    - id: "mininimumIP"
      type: "java.lang.String"
      description: "the minimum IP address of the range"
    - id: "maximumIP"
      type: "java.lang.String"
      description: "the maximum IP address of the range"
- uid: "com.microsoft.azure.storage.IPRange.getIpMax()"
  id: "getIpMax()"
  parent: "com.microsoft.azure.storage.IPRange"
  langs:
  - "java"
  name: "getIpMax()"
  nameWithType: "IPRange.getIpMax()"
  fullName: "com.microsoft.azure.storage.IPRange.getIpMax()"
  overload: "com.microsoft.azure.storage.IPRange.getIpMax*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "The maximum IP address for the range, inclusive. Will match <xref uid=\"com.microsoft.azure.storage.IPRange.getIpMin()\" data-throw-if-not-resolved=\"false\">#getIpMin()</xref> if this `IPRange` represents a single IP address."
  syntax:
    content: "public String getIpMax()"
    return:
      type: "java.lang.String"
      description: "The maximum IP address"
- uid: "com.microsoft.azure.storage.IPRange.getIpMin()"
  id: "getIpMin()"
  parent: "com.microsoft.azure.storage.IPRange"
  langs:
  - "java"
  name: "getIpMin()"
  nameWithType: "IPRange.getIpMin()"
  fullName: "com.microsoft.azure.storage.IPRange.getIpMin()"
  overload: "com.microsoft.azure.storage.IPRange.getIpMin*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "The minimum IP address for the range, inclusive. Will match <xref uid=\"com.microsoft.azure.storage.IPRange.getIpMax()\" data-throw-if-not-resolved=\"false\">#getIpMax()</xref> if this `IPRange` represents a single IP address."
  syntax:
    content: "public String getIpMin()"
    return:
      type: "java.lang.String"
      description: "The minimum IP address"
- uid: "com.microsoft.azure.storage.IPRange.toString()"
  id: "toString()"
  parent: "com.microsoft.azure.storage.IPRange"
  langs:
  - "java"
  name: "toString()"
  nameWithType: "IPRange.toString()"
  fullName: "com.microsoft.azure.storage.IPRange.toString()"
  overload: "com.microsoft.azure.storage.IPRange.toString*"
  type: "Method"
  package: "com.microsoft.azure.storage"
  summary: "Output the single IP address or range of IP addresses."
  syntax:
    content: "public String toString()"
    return:
      type: "java.lang.String"
      description: "the single IP address or range of IP addresses formated as a <code>String</code>"
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.microsoft.azure.storage.IPRange.IPRange*"
  name: "IPRange"
  nameWithType: "IPRange.IPRange"
  fullName: "com.microsoft.azure.storage.IPRange.IPRange"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.IPRange.getIpMin*"
  name: "getIpMin"
  nameWithType: "IPRange.getIpMin"
  fullName: "com.microsoft.azure.storage.IPRange.getIpMin"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.IPRange.getIpMax*"
  name: "getIpMax"
  nameWithType: "IPRange.getIpMax"
  fullName: "com.microsoft.azure.storage.IPRange.getIpMax"
  package: "com.microsoft.azure.storage"
- uid: "com.microsoft.azure.storage.IPRange.toString*"
  name: "toString"
  nameWithType: "IPRange.toString"
  fullName: "com.microsoft.azure.storage.IPRange.toString"
  package: "com.microsoft.azure.storage"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
