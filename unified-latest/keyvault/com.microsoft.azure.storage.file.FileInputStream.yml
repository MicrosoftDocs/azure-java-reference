### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.file.FileInputStream"
  id: "FileInputStream"
  parent: "com.microsoft.azure.storage.file"
  children:
  - "com.microsoft.azure.storage.file.FileInputStream.FileInputStream(com.microsoft.azure.storage.file.CloudFile,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.FileInputStream.available()"
  - "com.microsoft.azure.storage.file.FileInputStream.close()"
  - "com.microsoft.azure.storage.file.FileInputStream.mark(int)"
  - "com.microsoft.azure.storage.file.FileInputStream.markSupported()"
  - "com.microsoft.azure.storage.file.FileInputStream.read()"
  - "com.microsoft.azure.storage.file.FileInputStream.read(byte[])"
  - "com.microsoft.azure.storage.file.FileInputStream.read(byte[],int,int)"
  - "com.microsoft.azure.storage.file.FileInputStream.reset()"
  - "com.microsoft.azure.storage.file.FileInputStream.skip(long)"
  langs:
  - "java"
  name: "FileInputStream"
  nameWithType: "FileInputStream"
  fullName: "com.microsoft.azure.storage.file.FileInputStream"
  type: "Class"
  package: "com.microsoft.azure.storage.file"
  summary: "Provides an input stream to read a given file resource."
  syntax:
    content: "public class FileInputStream extends InputStream"
  inheritance:
  - "java.lang.Object"
  - "java.io.InputStream"
  inheritedMembers:
  - "java.io.InputStream.available()"
  - "java.io.InputStream.close()"
  - "java.io.InputStream.mark(int)"
  - "java.io.InputStream.markSupported()"
  - "java.io.InputStream.nullInputStream()"
  - "java.io.InputStream.read()"
  - "java.io.InputStream.read(byte[])"
  - "java.io.InputStream.read(byte[],int,int)"
  - "java.io.InputStream.readAllBytes()"
  - "java.io.InputStream.readNBytes(byte[],int,int)"
  - "java.io.InputStream.readNBytes(int)"
  - "java.io.InputStream.reset()"
  - "java.io.InputStream.skip(long)"
  - "java.io.InputStream.transferTo(java.io.OutputStream)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.file.FileInputStream.FileInputStream(com.microsoft.azure.storage.file.CloudFile,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "FileInputStream(com.microsoft.azure.storage.file.CloudFile,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.FileInputStream"
  langs:
  - "java"
  name: "FileInputStream(CloudFile parentFile, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "FileInputStream.FileInputStream(CloudFile parentFile, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.FileInputStream(CloudFile parentFile, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.FileInputStream.FileInputStream*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.file"
  summary: "Initializes a new instance of the FileInputStream class."
  syntax:
    content: "protected FileInputStream(CloudFile parentFile, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "parentFile"
      type: "com.microsoft.azure.storage.file.CloudFile"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.CloudFile\" data-throw-if-not-resolved=\"false\">CloudFile</xref> object which represents the file that this stream is associated with."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object which represents that specifies any additional options for the\n            request."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which is used to track the execution of the operation."
- uid: "com.microsoft.azure.storage.file.FileInputStream.available()"
  id: "available()"
  parent: "com.microsoft.azure.storage.file.FileInputStream"
  langs:
  - "java"
  name: "available()"
  nameWithType: "FileInputStream.available()"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.available()"
  overload: "com.microsoft.azure.storage.file.FileInputStream.available*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes."
  syntax:
    content: "public synchronized int available()"
    return:
      type: "int"
      description: "An <code>int</code> which represents an estimate of the number of bytes that can be read (or skipped\n         over)\n         from this input stream without blocking, or 0 when it reaches the end of the input stream."
  exceptions:
  - type: "java.io.IOException"
    description: "If an I/O error occurs."
- uid: "com.microsoft.azure.storage.file.FileInputStream.close()"
  id: "close()"
  parent: "com.microsoft.azure.storage.file.FileInputStream"
  langs:
  - "java"
  name: "close()"
  nameWithType: "FileInputStream.close()"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.close()"
  overload: "com.microsoft.azure.storage.file.FileInputStream.close*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Closes this input stream and releases any system resources associated with the stream."
  syntax:
    content: "public synchronized void close()"
  exceptions:
  - type: "java.io.IOException"
    description: "If an I/O error occurs."
- uid: "com.microsoft.azure.storage.file.FileInputStream.mark(int)"
  id: "mark(int)"
  parent: "com.microsoft.azure.storage.file.FileInputStream"
  langs:
  - "java"
  name: "mark(int readlimit)"
  nameWithType: "FileInputStream.mark(int readlimit)"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.mark(int readlimit)"
  overload: "com.microsoft.azure.storage.file.FileInputStream.mark*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Marks the current position in this input stream. A subsequent call to the reset method repositions this stream at the last marked position so that subsequent reads re-read the same bytes."
  syntax:
    content: "public synchronized void mark(int readlimit)"
    parameters:
    - id: "readlimit"
      type: "int"
      description: "An <code>int</code> which represents the maximum limit of bytes that can be read before the mark\n            position becomes invalid."
- uid: "com.microsoft.azure.storage.file.FileInputStream.markSupported()"
  id: "markSupported()"
  parent: "com.microsoft.azure.storage.file.FileInputStream"
  langs:
  - "java"
  name: "markSupported()"
  nameWithType: "FileInputStream.markSupported()"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.markSupported()"
  overload: "com.microsoft.azure.storage.file.FileInputStream.markSupported*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Tests if this input stream supports the mark and reset methods. Whether or not mark and reset are supported is an invariant property of a particular input stream instance. The markSupported method of <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> returns false."
  syntax:
    content: "public boolean markSupported()"
    return:
      type: "boolean"
      description: "<Code>True</Code> if this stream instance supports the mark and reset methods; <Code>False</Code>\n         otherwise."
- uid: "com.microsoft.azure.storage.file.FileInputStream.read()"
  id: "read()"
  parent: "com.microsoft.azure.storage.file.FileInputStream"
  langs:
  - "java"
  name: "read()"
  nameWithType: "FileInputStream.read()"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.read()"
  overload: "com.microsoft.azure.storage.file.FileInputStream.read*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Reads the next byte of data from the input stream. The value byte is returned as an int in the range 0 to 255. If no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown."
  syntax:
    content: "public int read()"
    return:
      type: "int"
      description: "An <code>int</code> which represents the total number of bytes read into the buffer, or -1 if\n         there is no more data because the end of the stream has been reached."
  exceptions:
  - type: "java.io.IOException"
    description: "If an I/O error occurs."
- uid: "com.microsoft.azure.storage.file.FileInputStream.read(byte[])"
  id: "read(byte[])"
  parent: "com.microsoft.azure.storage.file.FileInputStream"
  langs:
  - "java"
  name: "read(byte[] b)"
  nameWithType: "FileInputStream.read(byte[] b)"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.read(byte[] b)"
  overload: "com.microsoft.azure.storage.file.FileInputStream.read*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Reads some number of bytes from the input stream and stores them into the buffer array `b`. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. If the length of `b` is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at the end of the file, the value -1 is returned; otherwise, at least one byte is read and stored into `b`. The first byte read is stored into element `b[0]`, the next one into `b[1]`, and so on. The number of bytes read is, at most, equal to the length of `b`. Let `k` be the number of bytes actually read; these bytes will be stored in elements `b[0]` through `b[k-1]`, leaving elements `b[k]` through `b[b.length-1]` unaffected. The `read(b)` method for class <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> has the same effect as: `read(b, 0, b.length)`"
  syntax:
    content: "public int read(byte[] b)"
    parameters:
    - id: "b"
      type: "byte[]"
      description: "A <code>byte</code> array which represents the buffer into which the data is read."
    return:
      type: "int"
  exceptions:
  - type: "java.io.IOException"
    description: "If the first byte cannot be read for any reason other than the end of the file, if the input stream\n             has been closed, or if some other I/O error occurs."
- uid: "com.microsoft.azure.storage.file.FileInputStream.read(byte[],int,int)"
  id: "read(byte[],int,int)"
  parent: "com.microsoft.azure.storage.file.FileInputStream"
  langs:
  - "java"
  name: "read(byte[] b, int off, int len)"
  nameWithType: "FileInputStream.read(byte[] b, int off, int len)"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.read(byte[] b, int off, int len)"
  overload: "com.microsoft.azure.storage.file.FileInputStream.read*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Reads up to `len` bytes of data from the input stream into an array of bytes. An attempt is made to read as many as `len` bytes, but a smaller number may be read. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. If `len` is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value -1 is returned; otherwise, at least one byte is read and stored into `b`. The first byte read is stored into element `b[off]`, the next one into `b[off+1]`, and so on. The number of bytes read is, at most, equal to `len`. Let `k` be the number of bytes actually read; these bytes will be stored in elements `b[off]` through `b[off+k-1]`, leaving elements `b[off+k]` through `b[off+len-1]` unaffected. In every case, elements `b[0]` through `b[off]` and elements `b[off+len]` through `b[b.length-1]` are unaffected. The `read(b, off, len)` method for class <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> simply calls the method `read()` repeatedly. If the first such call results in an `IOException`, that exception is returned from the call to the `read(b, off, len)` method. If any subsequent call to `read()` results in a `IOException`, the exception is caught and treated as if it were end of file; the bytes read up to that point are stored into `b` and the number of bytes read before the exception occurred is returned. The default implementation of this method blocks until the requested amount of input data `len` has been read, end of file is detected, or an exception is thrown. Subclasses are encouraged to provide a more efficient implementation of this method."
  syntax:
    content: "public int read(byte[] b, int off, int len)"
    parameters:
    - id: "b"
      type: "byte[]"
      description: "A <code>byte</code> array which represents the buffer into which the data is read."
    - id: "off"
      type: "int"
      description: "An <code>int</code> which represents the start offset in the <code>byte</code> array at which the data\n            is written."
    - id: "len"
      type: "int"
      description: "An <code>int</code> which represents the maximum number of bytes to read."
    return:
      type: "int"
      description: "An <code>int</code> which represents the total number of bytes read into the buffer, or -1 if\n         there is no more data because the end of the stream has been reached."
  exceptions:
  - type: "java.io.IOException"
    description: "If the first byte cannot be read for any reason other than end of file, or if the input stream has\n             been closed, or if some other I/O error occurs."
- uid: "com.microsoft.azure.storage.file.FileInputStream.reset()"
  id: "reset()"
  parent: "com.microsoft.azure.storage.file.FileInputStream"
  langs:
  - "java"
  name: "reset()"
  nameWithType: "FileInputStream.reset()"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.reset()"
  overload: "com.microsoft.azure.storage.file.FileInputStream.reset*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Repositions this stream to the position at the time the mark method was last called on this input stream. Note repositioning the file read stream will disable file MD5 checking."
  syntax:
    content: "public synchronized void reset()"
  exceptions:
  - type: "java.io.IOException"
    description: "If this stream has not been marked or if the mark has been invalidated."
- uid: "com.microsoft.azure.storage.file.FileInputStream.skip(long)"
  id: "skip(long)"
  parent: "com.microsoft.azure.storage.file.FileInputStream"
  langs:
  - "java"
  name: "skip(long n)"
  nameWithType: "FileInputStream.skip(long n)"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.skip(long n)"
  overload: "com.microsoft.azure.storage.file.FileInputStream.skip*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Skips over and discards n bytes of data from this input stream. The skip method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly 0. This may result from any of a number of conditions; reaching end of file before n bytes have been skipped is only one possibility. The actual number of bytes skipped is returned. If n is negative, no bytes are skipped. Note repositioning the file read stream will disable file MD5 checking."
  syntax:
    content: "public synchronized long skip(long n)"
    parameters:
    - id: "n"
      type: "long"
      description: "A <code>long</code> which represents the number of bytes to skip."
    return:
      type: "long"
  exceptions:
  - type: "java.io.IOException"
references:
- uid: "com.microsoft.azure.storage.file.CloudFile"
  name: "CloudFile"
  nameWithType: "CloudFile"
  fullName: "com.microsoft.azure.storage.file.CloudFile"
- uid: "com.microsoft.azure.storage.AccessCondition"
  name: "AccessCondition"
  nameWithType: "AccessCondition"
  fullName: "com.microsoft.azure.storage.AccessCondition"
- uid: "com.microsoft.azure.storage.file.FileRequestOptions"
  name: "FileRequestOptions"
  nameWithType: "FileRequestOptions"
  fullName: "com.microsoft.azure.storage.file.FileRequestOptions"
- uid: "com.microsoft.azure.storage.OperationContext"
  name: "OperationContext"
  nameWithType: "OperationContext"
  fullName: "com.microsoft.azure.storage.OperationContext"
- uid: "com.microsoft.azure.storage.file.FileInputStream.FileInputStream*"
  name: "FileInputStream"
  nameWithType: "FileInputStream.FileInputStream"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.FileInputStream"
  package: "com.microsoft.azure.storage.file"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.microsoft.azure.storage.file.FileInputStream.available*"
  name: "available"
  nameWithType: "FileInputStream.available"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.available"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.FileInputStream.close*"
  name: "close"
  nameWithType: "FileInputStream.close"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.close"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.FileInputStream.mark*"
  name: "mark"
  nameWithType: "FileInputStream.mark"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.mark"
  package: "com.microsoft.azure.storage.file"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.microsoft.azure.storage.file.FileInputStream.markSupported*"
  name: "markSupported"
  nameWithType: "FileInputStream.markSupported"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.markSupported"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.FileInputStream.read*"
  name: "read"
  nameWithType: "FileInputStream.read"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.read"
  package: "com.microsoft.azure.storage.file"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "com.microsoft.azure.storage.file.FileInputStream.reset*"
  name: "reset"
  nameWithType: "FileInputStream.reset"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.reset"
  package: "com.microsoft.azure.storage.file"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.microsoft.azure.storage.file.FileInputStream.skip*"
  name: "skip"
  nameWithType: "FileInputStream.skip"
  fullName: "com.microsoft.azure.storage.file.FileInputStream.skip"
  package: "com.microsoft.azure.storage.file"
- uid: "java.io.InputStream"
  name: "InputStream"
  nameWithType: "InputStream"
  fullName: "java.io.InputStream"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.io.InputStream.mark(int)"
  name: "InputStream.mark(int)"
  nameWithType: "InputStream.mark(int)"
  fullName: "java.io.InputStream.mark(int)"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.io.InputStream.readNBytes(int)"
  name: "InputStream.readNBytes(int)"
  nameWithType: "InputStream.readNBytes(int)"
  fullName: "java.io.InputStream.readNBytes(int)"
- uid: "java.io.InputStream.close()"
  name: "InputStream.close()"
  nameWithType: "InputStream.close()"
  fullName: "java.io.InputStream.close()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.io.InputStream.markSupported()"
  name: "InputStream.markSupported()"
  nameWithType: "InputStream.markSupported()"
  fullName: "java.io.InputStream.markSupported()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.io.InputStream.nullInputStream()"
  name: "InputStream.nullInputStream()"
  nameWithType: "InputStream.nullInputStream()"
  fullName: "java.io.InputStream.nullInputStream()"
- uid: "java.io.InputStream.transferTo(java.io.OutputStream)"
  name: "InputStream.transferTo(OutputStream)"
  nameWithType: "InputStream.transferTo(OutputStream)"
  fullName: "java.io.InputStream.transferTo(java.io.OutputStream)"
- uid: "java.io.InputStream.read(byte[])"
  name: "InputStream.read(byte[])"
  nameWithType: "InputStream.read(byte[])"
  fullName: "java.io.InputStream.read(byte[])"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.io.InputStream.available()"
  name: "InputStream.available()"
  nameWithType: "InputStream.available()"
  fullName: "java.io.InputStream.available()"
- uid: "java.io.InputStream.readNBytes(byte[],int,int)"
  name: "InputStream.readNBytes(byte[],int,int)"
  nameWithType: "InputStream.readNBytes(byte[],int,int)"
  fullName: "java.io.InputStream.readNBytes(byte[],int,int)"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.io.InputStream.readAllBytes()"
  name: "InputStream.readAllBytes()"
  nameWithType: "InputStream.readAllBytes()"
  fullName: "java.io.InputStream.readAllBytes()"
- uid: "java.io.InputStream.skip(long)"
  name: "InputStream.skip(long)"
  nameWithType: "InputStream.skip(long)"
  fullName: "java.io.InputStream.skip(long)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.io.InputStream.read()"
  name: "InputStream.read()"
  nameWithType: "InputStream.read()"
  fullName: "java.io.InputStream.read()"
- uid: "java.io.InputStream.read(byte[],int,int)"
  name: "InputStream.read(byte[],int,int)"
  nameWithType: "InputStream.read(byte[],int,int)"
  fullName: "java.io.InputStream.read(byte[],int,int)"
- uid: "java.io.InputStream.reset()"
  name: "InputStream.reset()"
  nameWithType: "InputStream.reset()"
  fullName: "java.io.InputStream.reset()"
