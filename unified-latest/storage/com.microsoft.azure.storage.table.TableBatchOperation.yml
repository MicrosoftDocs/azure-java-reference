### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.table.TableBatchOperation"
  id: "TableBatchOperation"
  parent: "com.microsoft.azure.storage.table"
  children:
  - "com.microsoft.azure.storage.table.TableBatchOperation.TableBatchOperation()"
  - "com.microsoft.azure.storage.table.TableBatchOperation.add(com.microsoft.azure.storage.table.TableOperation)"
  - "com.microsoft.azure.storage.table.TableBatchOperation.add(int,com.microsoft.azure.storage.table.TableOperation)"
  - "com.microsoft.azure.storage.table.TableBatchOperation.addAll(int,java.util.Collection<? extends com.microsoft.azure.storage.table.TableOperation>)"
  - "com.microsoft.azure.storage.table.TableBatchOperation.addAll(java.util.Collection<? extends com.microsoft.azure.storage.table.TableOperation>)"
  - "com.microsoft.azure.storage.table.TableBatchOperation.clear()"
  - "com.microsoft.azure.storage.table.TableBatchOperation.delete(com.microsoft.azure.storage.table.TableEntity)"
  - "com.microsoft.azure.storage.table.TableBatchOperation.execute(com.microsoft.azure.storage.table.CloudTableClient,java.lang.String,com.microsoft.azure.storage.table.TableRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.table.TableBatchOperation.insert(com.microsoft.azure.storage.table.TableEntity)"
  - "com.microsoft.azure.storage.table.TableBatchOperation.insert(com.microsoft.azure.storage.table.TableEntity,boolean)"
  - "com.microsoft.azure.storage.table.TableBatchOperation.insertOrMerge(com.microsoft.azure.storage.table.TableEntity)"
  - "com.microsoft.azure.storage.table.TableBatchOperation.insertOrReplace(com.microsoft.azure.storage.table.TableEntity)"
  - "com.microsoft.azure.storage.table.TableBatchOperation.merge(com.microsoft.azure.storage.table.TableEntity)"
  - "com.microsoft.azure.storage.table.TableBatchOperation.remove(int)"
  - "com.microsoft.azure.storage.table.TableBatchOperation.remove(java.lang.Object)"
  - "com.microsoft.azure.storage.table.TableBatchOperation.removeAll(java.util.Collection<?>)"
  - "com.microsoft.azure.storage.table.TableBatchOperation.removeRange(int,int)"
  - "com.microsoft.azure.storage.table.TableBatchOperation.replace(com.microsoft.azure.storage.table.TableEntity)"
  - "com.microsoft.azure.storage.table.TableBatchOperation.retrieve(java.lang.String,java.lang.String,com.microsoft.azure.storage.table.EntityResolver<?>)"
  - "com.microsoft.azure.storage.table.TableBatchOperation.retrieve(java.lang.String,java.lang.String,java.lang.Class<? extends com.microsoft.azure.storage.table.TableEntity>)"
  langs:
  - "java"
  name: "TableBatchOperation"
  nameWithType: "TableBatchOperation"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation"
  type: "Class"
  package: "com.microsoft.azure.storage.table"
  summary: "A class which represents a batch operation. A batch operation is a collection of table operations which are executed by the Storage Service REST API as a single atomic operation, by invoking an [Entity Group Transaction][].\n\nA batch operation may contain up to 100 individual table operations, with the requirement that each operation entity must have same partition key. A batch with a retrieve operation cannot contain any other operations. Note that the total payload of a batch operation is limited to 4MB.\n\n\n[Entity Group Transaction]: http://msdn.microsoft.com/en-us/library/azure/dd894038.aspx"
  syntax:
    content: "public class TableBatchOperation extends ArrayList<TableOperation>"
  inheritance:
  - "java.lang.Object"
  - "java.util.AbstractCollection"
  - "java.util.AbstractList"
  - "java.util.ArrayList"
  inheritedMembers:
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "java.util.AbstractCollection.containsAll(java.util.Collection<?>)"
  - "java.util.AbstractCollection.toString()"
  - "java.util.AbstractList.subListRangeCheck(int,int,int)"
  - "java.util.ArrayList.<E>elementAt(java.lang.Object[],int)"
  - "java.util.ArrayList.<T>toArray(T[])"
  - "java.util.ArrayList.add(E)"
  - "java.util.ArrayList.add(int,E)"
  - "java.util.ArrayList.addAll(int,java.util.Collection<? extends E>)"
  - "java.util.ArrayList.addAll(java.util.Collection<? extends E>)"
  - "java.util.ArrayList.batchRemove(java.util.Collection<?>,boolean,int,int)"
  - "java.util.ArrayList.checkInvariants()"
  - "java.util.ArrayList.clear()"
  - "java.util.ArrayList.clone()"
  - "java.util.ArrayList.contains(java.lang.Object)"
  - "java.util.ArrayList.elementData(int)"
  - "java.util.ArrayList.ensureCapacity(int)"
  - "java.util.ArrayList.equals(java.lang.Object)"
  - "java.util.ArrayList.equalsRange(java.util.List<?>,int,int)"
  - "java.util.ArrayList.forEach(java.util.function.Consumer<? super E>)"
  - "java.util.ArrayList.get(int)"
  - "java.util.ArrayList.hashCode()"
  - "java.util.ArrayList.hashCodeRange(int,int)"
  - "java.util.ArrayList.indexOf(java.lang.Object)"
  - "java.util.ArrayList.indexOfRange(java.lang.Object,int,int)"
  - "java.util.ArrayList.isEmpty()"
  - "java.util.ArrayList.iterator()"
  - "java.util.ArrayList.lastIndexOf(java.lang.Object)"
  - "java.util.ArrayList.lastIndexOfRange(java.lang.Object,int,int)"
  - "java.util.ArrayList.listIterator()"
  - "java.util.ArrayList.listIterator(int)"
  - "java.util.ArrayList.remove(int)"
  - "java.util.ArrayList.remove(java.lang.Object)"
  - "java.util.ArrayList.removeAll(java.util.Collection<?>)"
  - "java.util.ArrayList.removeIf(java.util.function.Predicate<? super E>)"
  - "java.util.ArrayList.removeIf(java.util.function.Predicate<? super E>,int,int)"
  - "java.util.ArrayList.removeRange(int,int)"
  - "java.util.ArrayList.replaceAll(java.util.function.UnaryOperator<E>)"
  - "java.util.ArrayList.retainAll(java.util.Collection<?>)"
  - "java.util.ArrayList.set(int,E)"
  - "java.util.ArrayList.size()"
  - "java.util.ArrayList.sort(java.util.Comparator<? super E>)"
  - "java.util.ArrayList.spliterator()"
  - "java.util.ArrayList.subList(int,int)"
  - "java.util.ArrayList.toArray()"
  - "java.util.ArrayList.trimToSize()"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.TableBatchOperation()"
  id: "TableBatchOperation()"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "TableBatchOperation()"
  nameWithType: "TableBatchOperation.TableBatchOperation()"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.TableBatchOperation()"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.TableBatchOperation*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.table"
  syntax:
    content: "public TableBatchOperation()"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.add(com.microsoft.azure.storage.table.TableOperation)"
  id: "add(com.microsoft.azure.storage.table.TableOperation)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "add(TableOperation element)"
  nameWithType: "TableBatchOperation.add(TableOperation element)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.add(TableOperation element)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.add*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Adds the table operation to the batch operation `ArrayList`."
  syntax:
    content: "public boolean add(TableOperation element)"
    parameters:
    - id: "element"
      type: "com.microsoft.azure.storage.table.TableOperation"
      description: "The <xref uid=\"com.microsoft.azure.storage.table.TableOperation\" data-throw-if-not-resolved=\"false\">TableOperation</xref> to add to the batch operation."
    return:
      type: "boolean"
      description: "<code>true</code> if the operation was added successfully."
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.add(int,com.microsoft.azure.storage.table.TableOperation)"
  id: "add(int,com.microsoft.azure.storage.table.TableOperation)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "add(int index, TableOperation element)"
  nameWithType: "TableBatchOperation.add(int index, TableOperation element)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.add(int index, TableOperation element)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.add*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Adds the table operation at the specified index in the batch operation `ArrayList`."
  syntax:
    content: "public void add(int index, TableOperation element)"
    parameters:
    - id: "index"
      type: "int"
      description: "An <code>int</code> which represents the index in the batch operation <code>ArrayList</code> to add\n            the table operation at."
    - id: "element"
      type: "com.microsoft.azure.storage.table.TableOperation"
      description: "The <xref uid=\"com.microsoft.azure.storage.table.TableOperation\" data-throw-if-not-resolved=\"false\">TableOperation</xref> to add to the batch operation."
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.addAll(int,java.util.Collection<? extends com.microsoft.azure.storage.table.TableOperation>)"
  id: "addAll(int,java.util.Collection<? extends com.microsoft.azure.storage.table.TableOperation>)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "addAll(int index, Collection<? extends TableOperation> c)"
  nameWithType: "TableBatchOperation.addAll(int index, Collection<? extends TableOperation> c)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.addAll(int index, Collection<? extends TableOperation> c)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.addAll*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Adds the collection of table operations to the batch operation `ArrayList` starting at the specified index."
  syntax:
    content: "public boolean addAll(int index, Collection<? extends TableOperation> c)"
    parameters:
    - id: "index"
      type: "int"
      description: "An <code>int</code> which represents the index in the batch operation <code>ArrayList</code> to add\n            the table operation at."
    - id: "c"
      type: "java.util.Collection<? extends com.microsoft.azure.storage.table.TableOperation>"
      description: "A <code>java.util.Collection</code> of <xref uid=\"com.microsoft.azure.storage.table.TableOperation\" data-throw-if-not-resolved=\"false\">TableOperation</xref> objects to add to the batch operation."
    return:
      type: "boolean"
      description: "<code>true</code> if the operations were added successfully."
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.addAll(java.util.Collection<? extends com.microsoft.azure.storage.table.TableOperation>)"
  id: "addAll(java.util.Collection<? extends com.microsoft.azure.storage.table.TableOperation>)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "addAll(Collection<? extends TableOperation> c)"
  nameWithType: "TableBatchOperation.addAll(Collection<? extends TableOperation> c)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.addAll(Collection<? extends TableOperation> c)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.addAll*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Adds the collection of table operations to the batch operation `ArrayList`."
  syntax:
    content: "public boolean addAll(Collection<? extends TableOperation> c)"
    parameters:
    - id: "c"
      type: "java.util.Collection<? extends com.microsoft.azure.storage.table.TableOperation>"
      description: "A <code>java.util.Collection</code> of <xref uid=\"com.microsoft.azure.storage.table.TableOperation\" data-throw-if-not-resolved=\"false\">TableOperation</xref> objects to add to the batch operation."
    return:
      type: "boolean"
      description: "<code>true</code> if the operations were added successfully."
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.clear()"
  id: "clear()"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "clear()"
  nameWithType: "TableBatchOperation.clear()"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.clear()"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.clear*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Clears all table operations from the batch operation."
  syntax:
    content: "public void clear()"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.delete(com.microsoft.azure.storage.table.TableEntity)"
  id: "delete(com.microsoft.azure.storage.table.TableEntity)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "delete(TableEntity entity)"
  nameWithType: "TableBatchOperation.delete(TableEntity entity)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.delete(TableEntity entity)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.delete*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Adds a table operation to delete the specified entity to the batch operation."
  syntax:
    content: "public void delete(TableEntity entity)"
    parameters:
    - id: "entity"
      type: "com.microsoft.azure.storage.table.TableEntity"
      description: "The <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref> to delete."
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.execute(com.microsoft.azure.storage.table.CloudTableClient,java.lang.String,com.microsoft.azure.storage.table.TableRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "execute(com.microsoft.azure.storage.table.CloudTableClient,java.lang.String,com.microsoft.azure.storage.table.TableRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "execute(CloudTableClient client, String tableName, TableRequestOptions options, OperationContext opContext)"
  nameWithType: "TableBatchOperation.execute(CloudTableClient client, String tableName, TableRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.execute(CloudTableClient client, String tableName, TableRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.execute*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Reserved for internal use. Executes this batch operation on the specified table, using the specified <xref uid=\"com.microsoft.azure.storage.table.TableRequestOptions\" data-throw-if-not-resolved=\"false\">TableRequestOptions</xref> and <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref>.\n\nThis method will invoke the Storage Service REST API to execute this batch operation, using the Table service endpoint and storage account credentials in the <xref uid=\"com.microsoft.azure.storage.table.CloudTableClient\" data-throw-if-not-resolved=\"false\">CloudTableClient</xref> object."
  syntax:
    content: "protected ArrayList<TableResult> execute(CloudTableClient client, String tableName, TableRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "client"
      type: "com.microsoft.azure.storage.table.CloudTableClient"
      description: "A <xref uid=\"com.microsoft.azure.storage.table.CloudTableClient\" data-throw-if-not-resolved=\"false\">CloudTableClient</xref> instance specifying the Table service endpoint and storage account\n            credentials to use."
    - id: "tableName"
      type: "java.lang.String"
      description: "A <code>String</code> containing the name of the table."
    - id: "options"
      type: "com.microsoft.azure.storage.table.TableRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.table.TableRequestOptions\" data-throw-if-not-resolved=\"false\">TableRequestOptions</xref> object that specifies execution options such as retry policy and timeout\n            settings for the operation."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object for tracking the current operation."
    return:
      type: "java.util.ArrayList<com.microsoft.azure.storage.table.TableResult>"
      description: "An <code>ArrayList</code> of <xref uid=\"com.microsoft.azure.storage.table.TableResult\" data-throw-if-not-resolved=\"false\">TableResult</xref> containing the results of executing the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "if an error occurs in the storage operation."
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.insert(com.microsoft.azure.storage.table.TableEntity)"
  id: "insert(com.microsoft.azure.storage.table.TableEntity)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "insert(TableEntity entity)"
  nameWithType: "TableBatchOperation.insert(TableEntity entity)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.insert(TableEntity entity)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.insert*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Adds a table operation to insert the specified entity to the batch operation."
  syntax:
    content: "public void insert(TableEntity entity)"
    parameters:
    - id: "entity"
      type: "com.microsoft.azure.storage.table.TableEntity"
      description: "The <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref> to insert."
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.insert(com.microsoft.azure.storage.table.TableEntity,boolean)"
  id: "insert(com.microsoft.azure.storage.table.TableEntity,boolean)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "insert(TableEntity entity, boolean echoContent)"
  nameWithType: "TableBatchOperation.insert(TableEntity entity, boolean echoContent)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.insert(TableEntity entity, boolean echoContent)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.insert*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Adds a table operation to insert the specified entity to the batch operation."
  syntax:
    content: "public void insert(TableEntity entity, boolean echoContent)"
    parameters:
    - id: "entity"
      type: "com.microsoft.azure.storage.table.TableEntity"
      description: "The <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref> to insert."
    - id: "echoContent"
      type: "boolean"
      description: "The boolean representing whether the message payload should be returned in the response."
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.insertOrMerge(com.microsoft.azure.storage.table.TableEntity)"
  id: "insertOrMerge(com.microsoft.azure.storage.table.TableEntity)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "insertOrMerge(TableEntity entity)"
  nameWithType: "TableBatchOperation.insertOrMerge(TableEntity entity)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.insertOrMerge(TableEntity entity)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.insertOrMerge*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Adds a table operation to insert or merge the specified entity to the batch operation."
  syntax:
    content: "public void insertOrMerge(TableEntity entity)"
    parameters:
    - id: "entity"
      type: "com.microsoft.azure.storage.table.TableEntity"
      description: "The <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref> to insert if not found or to merge if it exists."
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.insertOrReplace(com.microsoft.azure.storage.table.TableEntity)"
  id: "insertOrReplace(com.microsoft.azure.storage.table.TableEntity)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "insertOrReplace(TableEntity entity)"
  nameWithType: "TableBatchOperation.insertOrReplace(TableEntity entity)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.insertOrReplace(TableEntity entity)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.insertOrReplace*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Adds a table operation to insert or replace the specified entity to the batch operation."
  syntax:
    content: "public void insertOrReplace(TableEntity entity)"
    parameters:
    - id: "entity"
      type: "com.microsoft.azure.storage.table.TableEntity"
      description: "The <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref> to insert if not found or to replace if it exists."
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.merge(com.microsoft.azure.storage.table.TableEntity)"
  id: "merge(com.microsoft.azure.storage.table.TableEntity)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "merge(TableEntity entity)"
  nameWithType: "TableBatchOperation.merge(TableEntity entity)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.merge(TableEntity entity)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.merge*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Adds a table operation to merge the specified entity to the batch operation."
  syntax:
    content: "public void merge(TableEntity entity)"
    parameters:
    - id: "entity"
      type: "com.microsoft.azure.storage.table.TableEntity"
      description: "The <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref> to merge."
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.remove(int)"
  id: "remove(int)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "remove(int index)"
  nameWithType: "TableBatchOperation.remove(int index)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.remove(int index)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.remove*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Removes the table operation at the specified index from the batch operation."
  syntax:
    content: "public TableOperation remove(int index)"
    parameters:
    - id: "index"
      type: "int"
      description: "An <code>int</code> which represents the index in the <code>ArrayList</code> of the table operation to\n            remove from the batch operation."
    return:
      type: "com.microsoft.azure.storage.table.TableOperation"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.remove(java.lang.Object)"
  id: "remove(java.lang.Object)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "remove(Object o)"
  nameWithType: "TableBatchOperation.remove(Object o)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.remove(Object o)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.remove*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Removes the specified `Object` from the batch operation."
  syntax:
    content: "public boolean remove(Object o)"
    parameters:
    - id: "o"
      type: "java.lang.Object"
      description: "The <code>Object</code> to remove from the batch operation."
    return:
      type: "boolean"
      description: "<code>true</code> if the object was removed successfully."
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.removeAll(java.util.Collection<?>)"
  id: "removeAll(java.util.Collection<?>)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "removeAll(Collection<?> c)"
  nameWithType: "TableBatchOperation.removeAll(Collection<?> c)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.removeAll(Collection<?> c)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.removeAll*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Removes all elements of the specified collection from the batch operation."
  syntax:
    content: "public boolean removeAll(Collection<?> c)"
    parameters:
    - id: "c"
      type: "java.util.Collection<?>"
      description: "The collection of elements to remove from the batch operation."
    return:
      type: "boolean"
      description: "<code>true</code> if the objects in the collection were removed successfully."
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.removeRange(int,int)"
  id: "removeRange(int,int)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "removeRange(int fromIndex, int toIndex)"
  nameWithType: "TableBatchOperation.removeRange(int fromIndex, int toIndex)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.removeRange(int fromIndex, int toIndex)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.removeRange*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Reserved for internal use. Removes all the table operations at indexes in the specified range from the batch operation `ArrayList`."
  syntax:
    content: "protected void removeRange(int fromIndex, int toIndex)"
    parameters:
    - id: "fromIndex"
      type: "int"
      description: "An <code>int</code> which represents the inclusive lower bound of the range of <xref uid=\"com.microsoft.azure.storage.table.TableOperation\" data-throw-if-not-resolved=\"false\">TableOperation</xref>\n            objects to remove from the batch operation <code>ArrayList</code>."
    - id: "toIndex"
      type: "int"
      description: "An <code>int</code> which represents the exclusive upper bound of the range of <xref uid=\"com.microsoft.azure.storage.table.TableOperation\" data-throw-if-not-resolved=\"false\">TableOperation</xref>\n            objects to remove from the batch operation <code>ArrayList</code>."
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.replace(com.microsoft.azure.storage.table.TableEntity)"
  id: "replace(com.microsoft.azure.storage.table.TableEntity)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "replace(TableEntity entity)"
  nameWithType: "TableBatchOperation.replace(TableEntity entity)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.replace(TableEntity entity)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.replace*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Adds a table operation to replace the specified entity to the batch operation."
  syntax:
    content: "public void replace(TableEntity entity)"
    parameters:
    - id: "entity"
      type: "com.microsoft.azure.storage.table.TableEntity"
      description: "The <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref> to replace."
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.retrieve(java.lang.String,java.lang.String,com.microsoft.azure.storage.table.EntityResolver<?>)"
  id: "retrieve(java.lang.String,java.lang.String,com.microsoft.azure.storage.table.EntityResolver<?>)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "retrieve(String partitionKey, String rowKey, EntityResolver<?> resolver)"
  nameWithType: "TableBatchOperation.retrieve(String partitionKey, String rowKey, EntityResolver<?> resolver)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.retrieve(String partitionKey, String rowKey, EntityResolver<?> resolver)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.retrieve*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Adds a table operation to retrieve an entity of the specified class type with the specified PartitionKey and RowKey to the batch operation."
  syntax:
    content: "public void retrieve(String partitionKey, String rowKey, EntityResolver<?> resolver)"
    parameters:
    - id: "partitionKey"
      type: "java.lang.String"
      description: "A <code>String</code> containing the PartitionKey of the entity to retrieve."
    - id: "rowKey"
      type: "java.lang.String"
      description: "A <code>String</code> containing the RowKey of the entity to retrieve."
    - id: "resolver"
      type: "com.microsoft.azure.storage.table.EntityResolver<?>"
      description: "The <xref uid=\"com.microsoft.azure.storage.table.EntityResolver\" data-throw-if-not-resolved=\"false\">EntityResolver</xref> implementation to project the entity to retrieve as a particular type in\n            the result."
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.retrieve(java.lang.String,java.lang.String,java.lang.Class<? extends com.microsoft.azure.storage.table.TableEntity>)"
  id: "retrieve(java.lang.String,java.lang.String,java.lang.Class<? extends com.microsoft.azure.storage.table.TableEntity>)"
  parent: "com.microsoft.azure.storage.table.TableBatchOperation"
  langs:
  - "java"
  name: "retrieve(String partitionKey, String rowKey, Class<? extends TableEntity> clazzType)"
  nameWithType: "TableBatchOperation.retrieve(String partitionKey, String rowKey, Class<? extends TableEntity> clazzType)"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.retrieve(String partitionKey, String rowKey, Class<? extends TableEntity> clazzType)"
  overload: "com.microsoft.azure.storage.table.TableBatchOperation.retrieve*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Adds a table operation to retrieve an entity of the specified class type with the specified PartitionKey and RowKey to the batch operation."
  syntax:
    content: "public void retrieve(String partitionKey, String rowKey, Class<? extends TableEntity> clazzType)"
    parameters:
    - id: "partitionKey"
      type: "java.lang.String"
      description: "A <code>String</code> containing the PartitionKey of the entity to retrieve."
    - id: "rowKey"
      type: "java.lang.String"
      description: "A <code>String</code> containing the RowKey of the entity to retrieve."
    - id: "clazzType"
      type: "java.lang.Class<? extends com.microsoft.azure.storage.table.TableEntity>"
      description: "The class of the <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref> type for the entity to retrieve."
references:
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.TableBatchOperation*"
  name: "TableBatchOperation"
  nameWithType: "TableBatchOperation.TableBatchOperation"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.TableBatchOperation"
  package: "com.microsoft.azure.storage.table"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.microsoft.azure.storage.table.TableOperation"
  name: "TableOperation"
  nameWithType: "TableOperation"
  fullName: "com.microsoft.azure.storage.table.TableOperation"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.add*"
  name: "add"
  nameWithType: "TableBatchOperation.add"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.add"
  package: "com.microsoft.azure.storage.table"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "java.util.Collection<? extends com.microsoft.azure.storage.table.TableOperation>"
  spec.java:
  - uid: "java.util.Collection"
    name: "Collection"
    fullName: "java.util.Collection"
  - name: "<"
    fullName: "<"
  - uid: "? extends com.microsoft.azure.storage.table.TableOperation"
    name: "TableOperation"
    fullName: "? extends com.microsoft.azure.storage.table.TableOperation"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.addAll*"
  name: "addAll"
  nameWithType: "TableBatchOperation.addAll"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.addAll"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.clear*"
  name: "clear"
  nameWithType: "TableBatchOperation.clear"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.clear"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableEntity"
  name: "TableEntity"
  nameWithType: "TableEntity"
  fullName: "com.microsoft.azure.storage.table.TableEntity"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.delete*"
  name: "delete"
  nameWithType: "TableBatchOperation.delete"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.delete"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.insert*"
  name: "insert"
  nameWithType: "TableBatchOperation.insert"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.insert"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.insertOrMerge*"
  name: "insertOrMerge"
  nameWithType: "TableBatchOperation.insertOrMerge"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.insertOrMerge"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.insertOrReplace*"
  name: "insertOrReplace"
  nameWithType: "TableBatchOperation.insertOrReplace"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.insertOrReplace"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.merge*"
  name: "merge"
  nameWithType: "TableBatchOperation.merge"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.merge"
  package: "com.microsoft.azure.storage.table"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "java.lang.Class<? extends com.microsoft.azure.storage.table.TableEntity>"
  spec.java:
  - uid: "java.lang.Class"
    name: "Class"
    fullName: "java.lang.Class"
  - name: "<"
    fullName: "<"
  - uid: "? extends com.microsoft.azure.storage.table.TableEntity"
    name: "TableEntity"
    fullName: "? extends com.microsoft.azure.storage.table.TableEntity"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.retrieve*"
  name: "retrieve"
  nameWithType: "TableBatchOperation.retrieve"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.retrieve"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.EntityResolver<?>"
  spec.java:
  - uid: "com.microsoft.azure.storage.table.EntityResolver"
    name: "EntityResolver"
    fullName: "com.microsoft.azure.storage.table.EntityResolver"
  - name: "<"
    fullName: "<"
  - uid: "?"
    name: "?"
    fullName: "?"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.remove*"
  name: "remove"
  nameWithType: "TableBatchOperation.remove"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.remove"
  package: "com.microsoft.azure.storage.table"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "java.util.Collection<?>"
  spec.java:
  - uid: "java.util.Collection"
    name: "Collection"
    fullName: "java.util.Collection"
  - name: "<"
    fullName: "<"
  - uid: "?"
    name: "?"
    fullName: "?"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.removeAll*"
  name: "removeAll"
  nameWithType: "TableBatchOperation.removeAll"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.removeAll"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.replace*"
  name: "replace"
  nameWithType: "TableBatchOperation.replace"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.replace"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.StorageException"
  name: "StorageException"
  nameWithType: "StorageException"
  fullName: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.table.CloudTableClient"
  name: "CloudTableClient"
  nameWithType: "CloudTableClient"
  fullName: "com.microsoft.azure.storage.table.CloudTableClient"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions"
  name: "TableRequestOptions"
  nameWithType: "TableRequestOptions"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions"
- uid: "com.microsoft.azure.storage.OperationContext"
  name: "OperationContext"
  nameWithType: "OperationContext"
  fullName: "com.microsoft.azure.storage.OperationContext"
- uid: "java.util.ArrayList<com.microsoft.azure.storage.table.TableResult>"
  spec.java:
  - uid: "java.util.ArrayList"
    name: "ArrayList"
    fullName: "java.util.ArrayList"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.table.TableResult"
    name: "TableResult"
    fullName: "com.microsoft.azure.storage.table.TableResult"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.execute*"
  name: "execute"
  nameWithType: "TableBatchOperation.execute"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.execute"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableBatchOperation.removeRange*"
  name: "removeRange"
  nameWithType: "TableBatchOperation.removeRange"
  fullName: "com.microsoft.azure.storage.table.TableBatchOperation.removeRange"
  package: "com.microsoft.azure.storage.table"
- uid: "java.util.ArrayList<com.microsoft.azure.storage.table.TableOperation>"
  name: "ArrayList<TableOperation>"
  nameWithType: "ArrayList<TableOperation>"
  fullName: "java.util.ArrayList<com.microsoft.azure.storage.table.TableOperation>"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.util.ArrayList.removeRange(int,int)"
  name: "ArrayList.removeRange(int,int)"
  nameWithType: "ArrayList.removeRange(int,int)"
  fullName: "java.util.ArrayList.removeRange(int,int)"
- uid: "java.util.ArrayList.subList(int,int)"
  name: "ArrayList.subList(int,int)"
  nameWithType: "ArrayList.subList(int,int)"
  fullName: "java.util.ArrayList.subList(int,int)"
- uid: "java.util.ArrayList.lastIndexOfRange(java.lang.Object,int,int)"
  name: "ArrayList.lastIndexOfRange(Object,int,int)"
  nameWithType: "ArrayList.lastIndexOfRange(Object,int,int)"
  fullName: "java.util.ArrayList.lastIndexOfRange(java.lang.Object,int,int)"
- uid: "java.util.ArrayList.equalsRange(java.util.List<?>,int,int)"
  name: "ArrayList.equalsRange(List<?>,int,int)"
  nameWithType: "ArrayList.equalsRange(List<?>,int,int)"
  fullName: "java.util.ArrayList.equalsRange(java.util.List<?>,int,int)"
- uid: "java.util.ArrayList.remove(java.lang.Object)"
  name: "ArrayList.remove(Object)"
  nameWithType: "ArrayList.remove(Object)"
  fullName: "java.util.ArrayList.remove(java.lang.Object)"
- uid: "java.util.ArrayList.indexOf(java.lang.Object)"
  name: "ArrayList.indexOf(Object)"
  nameWithType: "ArrayList.indexOf(Object)"
  fullName: "java.util.ArrayList.indexOf(java.lang.Object)"
- uid: "java.util.ArrayList.hashCode()"
  name: "ArrayList.hashCode()"
  nameWithType: "ArrayList.hashCode()"
  fullName: "java.util.ArrayList.hashCode()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.util.ArrayList.forEach(java.util.function.Consumer<? super E>)"
  name: "ArrayList.forEach(Consumer<? super E>)"
  nameWithType: "ArrayList.forEach(Consumer<? super E>)"
  fullName: "java.util.ArrayList.forEach(java.util.function.Consumer<? super E>)"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.util.ArrayList.remove(int)"
  name: "ArrayList.remove(int)"
  nameWithType: "ArrayList.remove(int)"
  fullName: "java.util.ArrayList.remove(int)"
- uid: "java.util.ArrayList.add(int,E)"
  name: "ArrayList.add(int,E)"
  nameWithType: "ArrayList.add(int,E)"
  fullName: "java.util.ArrayList.add(int,E)"
- uid: "java.util.ArrayList.clear()"
  name: "ArrayList.clear()"
  nameWithType: "ArrayList.clear()"
  fullName: "java.util.ArrayList.clear()"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.util.ArrayList.equals(java.lang.Object)"
  name: "ArrayList.equals(Object)"
  nameWithType: "ArrayList.equals(Object)"
  fullName: "java.util.ArrayList.equals(java.lang.Object)"
- uid: "java.util.ArrayList.isEmpty()"
  name: "ArrayList.isEmpty()"
  nameWithType: "ArrayList.isEmpty()"
  fullName: "java.util.ArrayList.isEmpty()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.util.ArrayList.lastIndexOf(java.lang.Object)"
  name: "ArrayList.lastIndexOf(Object)"
  nameWithType: "ArrayList.lastIndexOf(Object)"
  fullName: "java.util.ArrayList.lastIndexOf(java.lang.Object)"
- uid: "java.util.ArrayList.<T>toArray(T[])"
  name: "ArrayList.<T>toArray(T[])"
  nameWithType: "ArrayList.<T>toArray(T[])"
  fullName: "java.util.ArrayList.<T>toArray(T[])"
- uid: "java.util.ArrayList.iterator()"
  name: "ArrayList.iterator()"
  nameWithType: "ArrayList.iterator()"
  fullName: "java.util.ArrayList.iterator()"
- uid: "java.util.ArrayList.sort(java.util.Comparator<? super E>)"
  name: "ArrayList.sort(Comparator<? super E>)"
  nameWithType: "ArrayList.sort(Comparator<? super E>)"
  fullName: "java.util.ArrayList.sort(java.util.Comparator<? super E>)"
- uid: "java.util.ArrayList.contains(java.lang.Object)"
  name: "ArrayList.contains(Object)"
  nameWithType: "ArrayList.contains(Object)"
  fullName: "java.util.ArrayList.contains(java.lang.Object)"
- uid: "java.util.ArrayList.size()"
  name: "ArrayList.size()"
  nameWithType: "ArrayList.size()"
  fullName: "java.util.ArrayList.size()"
- uid: "java.util.AbstractCollection.toString()"
  name: "AbstractCollection.toString()"
  nameWithType: "AbstractCollection.toString()"
  fullName: "java.util.AbstractCollection.toString()"
- uid: "java.util.ArrayList.removeIf(java.util.function.Predicate<? super E>)"
  name: "ArrayList.removeIf(Predicate<? super E>)"
  nameWithType: "ArrayList.removeIf(Predicate<? super E>)"
  fullName: "java.util.ArrayList.removeIf(java.util.function.Predicate<? super E>)"
- uid: "java.util.ArrayList.listIterator()"
  name: "ArrayList.listIterator()"
  nameWithType: "ArrayList.listIterator()"
  fullName: "java.util.ArrayList.listIterator()"
- uid: "java.util.ArrayList.checkInvariants()"
  name: "ArrayList.checkInvariants()"
  nameWithType: "ArrayList.checkInvariants()"
  fullName: "java.util.ArrayList.checkInvariants()"
- uid: "java.util.ArrayList.get(int)"
  name: "ArrayList.get(int)"
  nameWithType: "ArrayList.get(int)"
  fullName: "java.util.ArrayList.get(int)"
- uid: "java.util.ArrayList.toArray()"
  name: "ArrayList.toArray()"
  nameWithType: "ArrayList.toArray()"
  fullName: "java.util.ArrayList.toArray()"
- uid: "java.util.ArrayList.hashCodeRange(int,int)"
  name: "ArrayList.hashCodeRange(int,int)"
  nameWithType: "ArrayList.hashCodeRange(int,int)"
  fullName: "java.util.ArrayList.hashCodeRange(int,int)"
- uid: "java.util.ArrayList.addAll(int,java.util.Collection<? extends E>)"
  name: "ArrayList.addAll(int,Collection<? extends E>)"
  nameWithType: "ArrayList.addAll(int,Collection<? extends E>)"
  fullName: "java.util.ArrayList.addAll(int,java.util.Collection<? extends E>)"
- uid: "java.util.AbstractList.subListRangeCheck(int,int,int)"
  name: "AbstractList.subListRangeCheck(int,int,int)"
  nameWithType: "AbstractList.subListRangeCheck(int,int,int)"
  fullName: "java.util.AbstractList.subListRangeCheck(int,int,int)"
- uid: "java.util.ArrayList.<E>elementAt(java.lang.Object[],int)"
  name: "ArrayList.<E>elementAt(Object[],int)"
  nameWithType: "ArrayList.<E>elementAt(Object[],int)"
  fullName: "java.util.ArrayList.<E>elementAt(java.lang.Object[],int)"
- uid: "java.util.ArrayList.ensureCapacity(int)"
  name: "ArrayList.ensureCapacity(int)"
  nameWithType: "ArrayList.ensureCapacity(int)"
  fullName: "java.util.ArrayList.ensureCapacity(int)"
- uid: "java.util.ArrayList.removeAll(java.util.Collection<?>)"
  name: "ArrayList.removeAll(Collection<?>)"
  nameWithType: "ArrayList.removeAll(Collection<?>)"
  fullName: "java.util.ArrayList.removeAll(java.util.Collection<?>)"
- uid: "java.util.ArrayList.elementData(int)"
  name: "ArrayList.elementData(int)"
  nameWithType: "ArrayList.elementData(int)"
  fullName: "java.util.ArrayList.elementData(int)"
- uid: "java.util.ArrayList.spliterator()"
  name: "ArrayList.spliterator()"
  nameWithType: "ArrayList.spliterator()"
  fullName: "java.util.ArrayList.spliterator()"
- uid: "java.util.ArrayList.replaceAll(java.util.function.UnaryOperator<E>)"
  name: "ArrayList.replaceAll(UnaryOperator<E>)"
  nameWithType: "ArrayList.replaceAll(UnaryOperator<E>)"
  fullName: "java.util.ArrayList.replaceAll(java.util.function.UnaryOperator<E>)"
- uid: "java.util.ArrayList.add(E)"
  name: "ArrayList.add(E)"
  nameWithType: "ArrayList.add(E)"
  fullName: "java.util.ArrayList.add(E)"
- uid: "java.util.ArrayList.trimToSize()"
  name: "ArrayList.trimToSize()"
  nameWithType: "ArrayList.trimToSize()"
  fullName: "java.util.ArrayList.trimToSize()"
- uid: "java.util.ArrayList.removeIf(java.util.function.Predicate<? super E>,int,int)"
  name: "ArrayList.removeIf(Predicate<? super E>,int,int)"
  nameWithType: "ArrayList.removeIf(Predicate<? super E>,int,int)"
  fullName: "java.util.ArrayList.removeIf(java.util.function.Predicate<? super E>,int,int)"
- uid: "java.util.ArrayList.indexOfRange(java.lang.Object,int,int)"
  name: "ArrayList.indexOfRange(Object,int,int)"
  nameWithType: "ArrayList.indexOfRange(Object,int,int)"
  fullName: "java.util.ArrayList.indexOfRange(java.lang.Object,int,int)"
- uid: "java.util.ArrayList.addAll(java.util.Collection<? extends E>)"
  name: "ArrayList.addAll(Collection<? extends E>)"
  nameWithType: "ArrayList.addAll(Collection<? extends E>)"
  fullName: "java.util.ArrayList.addAll(java.util.Collection<? extends E>)"
- uid: "java.util.AbstractCollection.containsAll(java.util.Collection<?>)"
  name: "AbstractCollection.containsAll(Collection<?>)"
  nameWithType: "AbstractCollection.containsAll(Collection<?>)"
  fullName: "java.util.AbstractCollection.containsAll(java.util.Collection<?>)"
- uid: "java.util.ArrayList.retainAll(java.util.Collection<?>)"
  name: "ArrayList.retainAll(Collection<?>)"
  nameWithType: "ArrayList.retainAll(Collection<?>)"
  fullName: "java.util.ArrayList.retainAll(java.util.Collection<?>)"
- uid: "java.util.ArrayList.listIterator(int)"
  name: "ArrayList.listIterator(int)"
  nameWithType: "ArrayList.listIterator(int)"
  fullName: "java.util.ArrayList.listIterator(int)"
- uid: "java.util.ArrayList.clone()"
  name: "ArrayList.clone()"
  nameWithType: "ArrayList.clone()"
  fullName: "java.util.ArrayList.clone()"
- uid: "java.util.ArrayList.set(int,E)"
  name: "ArrayList.set(int,E)"
  nameWithType: "ArrayList.set(int,E)"
  fullName: "java.util.ArrayList.set(int,E)"
- uid: "java.util.ArrayList.batchRemove(java.util.Collection<?>,boolean,int,int)"
  name: "ArrayList.batchRemove(Collection<?>,boolean,int,int)"
  nameWithType: "ArrayList.batchRemove(Collection<?>,boolean,int,int)"
  fullName: "java.util.ArrayList.batchRemove(java.util.Collection<?>,boolean,int,int)"
- uid: "java.util.Collection"
  name: "Collection"
  nameWithType: "Collection"
  fullName: "java.util.Collection"
- uid: "? extends com.microsoft.azure.storage.table.TableOperation"
  name: "? extends TableOperation"
  nameWithType: "? extends TableOperation"
  fullName: "? extends com.microsoft.azure.storage.table.TableOperation"
- uid: "java.lang.Class"
  name: "Class"
  nameWithType: "Class"
  fullName: "java.lang.Class"
- uid: "? extends com.microsoft.azure.storage.table.TableEntity"
  name: "? extends TableEntity"
  nameWithType: "? extends TableEntity"
  fullName: "? extends com.microsoft.azure.storage.table.TableEntity"
- uid: "com.microsoft.azure.storage.table.EntityResolver"
  name: "EntityResolver"
  nameWithType: "EntityResolver"
  fullName: "com.microsoft.azure.storage.table.EntityResolver"
- uid: "?"
  name: "?"
  nameWithType: "?"
  fullName: "?"
- uid: "com.microsoft.azure.storage.table.TableResult"
  name: "TableResult"
  nameWithType: "TableResult"
  fullName: "com.microsoft.azure.storage.table.TableResult"
- uid: "java.util.ArrayList"
  name: "ArrayList"
  nameWithType: "ArrayList"
  fullName: "java.util.ArrayList"
- uid: "java.util.ArrayList.equalsRange(java.util.List"
  name: "ArrayList.equalsRange(List"
  nameWithType: "ArrayList.equalsRange(List"
  fullName: "java.util.ArrayList.equalsRange(java.util.List"
- uid: "?>,int,int)"
  name: "?>,int,int)"
  nameWithType: "?>,int,int)"
  fullName: "?>,int,int)"
- uid: "? super E>)"
  name: "? super E>)"
  nameWithType: "? super E>)"
  fullName: "? super E>)"
- uid: "java.util.ArrayList.forEach(java.util.function.Consumer"
  name: "ArrayList.forEach(Consumer"
  nameWithType: "ArrayList.forEach(Consumer"
  fullName: "java.util.ArrayList.forEach(java.util.function.Consumer"
- uid: "T>toArray(T[])"
  name: "T>toArray(T[])"
  nameWithType: "T>toArray(T[])"
  fullName: "T>toArray(T[])"
- uid: "java.util.ArrayList."
  name: "ArrayList."
  nameWithType: "ArrayList."
  fullName: "java.util.ArrayList."
- uid: "java.util.ArrayList.sort(java.util.Comparator"
  name: "ArrayList.sort(Comparator"
  nameWithType: "ArrayList.sort(Comparator"
  fullName: "java.util.ArrayList.sort(java.util.Comparator"
- uid: "java.util.ArrayList.removeIf(java.util.function.Predicate"
  name: "ArrayList.removeIf(Predicate"
  nameWithType: "ArrayList.removeIf(Predicate"
  fullName: "java.util.ArrayList.removeIf(java.util.function.Predicate"
- uid: "? extends E>)"
  name: "? extends E>)"
  nameWithType: "? extends E>)"
  fullName: "? extends E>)"
- uid: "java.util.ArrayList.addAll(int,java.util.Collection"
  name: "ArrayList.addAll(int,Collection"
  nameWithType: "ArrayList.addAll(int,Collection"
  fullName: "java.util.ArrayList.addAll(int,java.util.Collection"
- uid: "E>elementAt(java.lang.Object[],int)"
  name: "E>elementAt(Object[],int)"
  nameWithType: "E>elementAt(Object[],int)"
  fullName: "E>elementAt(java.lang.Object[],int)"
- uid: "java.util.ArrayList.removeAll(java.util.Collection"
  name: "ArrayList.removeAll(Collection"
  nameWithType: "ArrayList.removeAll(Collection"
  fullName: "java.util.ArrayList.removeAll(java.util.Collection"
- uid: "?>)"
  name: "?>)"
  nameWithType: "?>)"
  fullName: "?>)"
- uid: "E>)"
  name: "E>)"
  nameWithType: "E>)"
  fullName: "E>)"
- uid: "java.util.ArrayList.replaceAll(java.util.function.UnaryOperator"
  name: "ArrayList.replaceAll(UnaryOperator"
  nameWithType: "ArrayList.replaceAll(UnaryOperator"
  fullName: "java.util.ArrayList.replaceAll(java.util.function.UnaryOperator"
- uid: "? super E>,int,int)"
  name: "? super E>,int,int)"
  nameWithType: "? super E>,int,int)"
  fullName: "? super E>,int,int)"
- uid: "java.util.ArrayList.addAll(java.util.Collection"
  name: "ArrayList.addAll(Collection"
  nameWithType: "ArrayList.addAll(Collection"
  fullName: "java.util.ArrayList.addAll(java.util.Collection"
- uid: "java.util.AbstractCollection.containsAll(java.util.Collection"
  name: "AbstractCollection.containsAll(Collection"
  nameWithType: "AbstractCollection.containsAll(Collection"
  fullName: "java.util.AbstractCollection.containsAll(java.util.Collection"
- uid: "java.util.ArrayList.retainAll(java.util.Collection"
  name: "ArrayList.retainAll(Collection"
  nameWithType: "ArrayList.retainAll(Collection"
  fullName: "java.util.ArrayList.retainAll(java.util.Collection"
- uid: "?>,boolean,int,int)"
  name: "?>,boolean,int,int)"
  nameWithType: "?>,boolean,int,int)"
  fullName: "?>,boolean,int,int)"
- uid: "java.util.ArrayList.batchRemove(java.util.Collection"
  name: "ArrayList.batchRemove(Collection"
  nameWithType: "ArrayList.batchRemove(Collection"
  fullName: "java.util.ArrayList.batchRemove(java.util.Collection"
