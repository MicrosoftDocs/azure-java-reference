### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy"
  id: "TableEncryptionPolicy"
  parent: "com.microsoft.azure.storage.table"
  children:
  - "com.microsoft.azure.storage.table.TableEncryptionPolicy.TableEncryptionPolicy(com.microsoft.azure.keyvault.core.IKey,com.microsoft.azure.keyvault.core.IKeyResolver)"
  - "com.microsoft.azure.storage.table.TableEncryptionPolicy.decryptEntity(java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>,java.util.HashSet<java.lang.String>,java.lang.String,java.lang.String,java.security.Key,com.microsoft.azure.storage.core.EncryptionData,java.lang.Boolean)"
  - "com.microsoft.azure.storage.table.TableEncryptionPolicy.decryptMetadataAndReturnCEK(java.lang.String,java.lang.String,com.microsoft.azure.storage.table.EntityProperty,com.microsoft.azure.storage.table.EntityProperty,com.microsoft.azure.storage.core.EncryptionData)"
  - "com.microsoft.azure.storage.table.TableEncryptionPolicy.encryptEntity(java.util.Map<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>,java.lang.String,java.lang.String,com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver)"
  - "com.microsoft.azure.storage.table.TableEncryptionPolicy.getKey()"
  - "com.microsoft.azure.storage.table.TableEncryptionPolicy.getKeyResolver()"
  - "com.microsoft.azure.storage.table.TableEncryptionPolicy.keyResolver"
  - "com.microsoft.azure.storage.table.TableEncryptionPolicy.keyWrapper"
  - "com.microsoft.azure.storage.table.TableEncryptionPolicy.setKey(com.microsoft.azure.keyvault.core.IKey)"
  - "com.microsoft.azure.storage.table.TableEncryptionPolicy.setKeyResolver(com.microsoft.azure.keyvault.core.IKeyResolver)"
  langs:
  - "java"
  name: "TableEncryptionPolicy"
  nameWithType: "TableEncryptionPolicy"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy"
  type: "Class"
  package: "com.microsoft.azure.storage.table"
  summary: "Represents a table encryption policy that is used to perform envelope encryption/decryption of Azure table entities."
  syntax:
    content: "public class TableEncryptionPolicy"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.TableEncryptionPolicy(com.microsoft.azure.keyvault.core.IKey,com.microsoft.azure.keyvault.core.IKeyResolver)"
  id: "TableEncryptionPolicy(com.microsoft.azure.keyvault.core.IKey,com.microsoft.azure.keyvault.core.IKeyResolver)"
  parent: "com.microsoft.azure.storage.table.TableEncryptionPolicy"
  langs:
  - "java"
  name: "TableEncryptionPolicy(IKey key, IKeyResolver keyResolver)"
  nameWithType: "TableEncryptionPolicy.TableEncryptionPolicy(IKey key, IKeyResolver keyResolver)"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.TableEncryptionPolicy(IKey key, IKeyResolver keyResolver)"
  overload: "com.microsoft.azure.storage.table.TableEncryptionPolicy.TableEncryptionPolicy*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.table"
  summary: "Initializes a new instance of the <xref uid=\"com.microsoft.azure.storage.table.TableEncryptionPolicy\" data-throw-if-not-resolved=\"false\">TableEncryptionPolicy</xref> class with the specified key and resolver.\n\nIf the generated policy is intended to be used for encryption, users are expected to provide a key at the minimum. The absence of key will cause an exception to be thrown during encryption. If the generated policy is intended to be used for decryption, users can provide a keyResolver. The client library will - 1. Invoke the key resolver if specified to get the key. 2. If resolver is not specified but a key is specified, match the key id on the key and use it."
  syntax:
    content: "public TableEncryptionPolicy(IKey key, IKeyResolver keyResolver)"
    parameters:
    - id: "key"
      type: "com.microsoft.azure.keyvault.core.IKey"
      description: "An object of type <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> that is used to wrap/unwrap the content encryption key."
    - id: "keyResolver"
      type: "com.microsoft.azure.keyvault.core.IKeyResolver"
      description: "The key resolver used to select the correct key for decrypting existing table entities."
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.decryptEntity(java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>,java.util.HashSet<java.lang.String>,java.lang.String,java.lang.String,java.security.Key,com.microsoft.azure.storage.core.EncryptionData,java.lang.Boolean)"
  id: "decryptEntity(java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>,java.util.HashSet<java.lang.String>,java.lang.String,java.lang.String,java.security.Key,com.microsoft.azure.storage.core.EncryptionData,java.lang.Boolean)"
  parent: "com.microsoft.azure.storage.table.TableEncryptionPolicy"
  langs:
  - "java"
  name: "decryptEntity(HashMap<String,EntityProperty> properties, HashSet<String> encryptedPropertyDetailsSet, String partitionKey, String rowKey, Key contentEncryptionKey, EncryptionData encryptionData, Boolean isJavaV1)"
  nameWithType: "TableEncryptionPolicy.decryptEntity(HashMap<String,EntityProperty> properties, HashSet<String> encryptedPropertyDetailsSet, String partitionKey, String rowKey, Key contentEncryptionKey, EncryptionData encryptionData, Boolean isJavaV1)"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.decryptEntity(HashMap<String,EntityProperty> properties, HashSet<String> encryptedPropertyDetailsSet, String partitionKey, String rowKey, Key contentEncryptionKey, EncryptionData encryptionData, Boolean isJavaV1)"
  overload: "com.microsoft.azure.storage.table.TableEncryptionPolicy.decryptEntity*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Return a decrypted entity. This method is used for decrypting entity properties."
  syntax:
    content: " HashMap<String,EntityProperty> decryptEntity(HashMap<String,EntityProperty> properties, HashSet<String> encryptedPropertyDetailsSet, String partitionKey, String rowKey, Key contentEncryptionKey, EncryptionData encryptionData, Boolean isJavaV1)"
    parameters:
    - id: "properties"
      type: "java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>"
    - id: "encryptedPropertyDetailsSet"
      type: "java.util.HashSet<java.lang.String>"
    - id: "partitionKey"
      type: "java.lang.String"
    - id: "rowKey"
      type: "java.lang.String"
    - id: "contentEncryptionKey"
      type: "java.security.Key"
    - id: "encryptionData"
      type: "com.microsoft.azure.storage.core.EncryptionData"
    - id: "isJavaV1"
      type: "java.lang.Boolean"
    return:
      type: "java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.decryptMetadataAndReturnCEK(java.lang.String,java.lang.String,com.microsoft.azure.storage.table.EntityProperty,com.microsoft.azure.storage.table.EntityProperty,com.microsoft.azure.storage.core.EncryptionData)"
  id: "decryptMetadataAndReturnCEK(java.lang.String,java.lang.String,com.microsoft.azure.storage.table.EntityProperty,com.microsoft.azure.storage.table.EntityProperty,com.microsoft.azure.storage.core.EncryptionData)"
  parent: "com.microsoft.azure.storage.table.TableEncryptionPolicy"
  langs:
  - "java"
  name: "decryptMetadataAndReturnCEK(String partitionKey, String rowKey, EntityProperty encryptionKeyProperty, EntityProperty propertyDetailsProperty, EncryptionData encryptionData)"
  nameWithType: "TableEncryptionPolicy.decryptMetadataAndReturnCEK(String partitionKey, String rowKey, EntityProperty encryptionKeyProperty, EntityProperty propertyDetailsProperty, EncryptionData encryptionData)"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.decryptMetadataAndReturnCEK(String partitionKey, String rowKey, EntityProperty encryptionKeyProperty, EntityProperty propertyDetailsProperty, EncryptionData encryptionData)"
  overload: "com.microsoft.azure.storage.table.TableEncryptionPolicy.decryptMetadataAndReturnCEK*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  syntax:
    content: " CEKReturn decryptMetadataAndReturnCEK(String partitionKey, String rowKey, EntityProperty encryptionKeyProperty, EntityProperty propertyDetailsProperty, EncryptionData encryptionData)"
    parameters:
    - id: "partitionKey"
      type: "java.lang.String"
    - id: "rowKey"
      type: "java.lang.String"
    - id: "encryptionKeyProperty"
      type: "com.microsoft.azure.storage.table.EntityProperty"
    - id: "propertyDetailsProperty"
      type: "com.microsoft.azure.storage.table.EntityProperty"
    - id: "encryptionData"
      type: "com.microsoft.azure.storage.core.EncryptionData"
    return:
      type: "com.microsoft.azure.storage.table.CEKReturn"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.encryptEntity(java.util.Map<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>,java.lang.String,java.lang.String,com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver)"
  id: "encryptEntity(java.util.Map<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>,java.lang.String,java.lang.String,com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver)"
  parent: "com.microsoft.azure.storage.table.TableEncryptionPolicy"
  langs:
  - "java"
  name: "encryptEntity(Map<String,EntityProperty> properties, String partitionKey, String rowKey, TableRequestOptions.EncryptionResolver encryptionResolver)"
  nameWithType: "TableEncryptionPolicy.encryptEntity(Map<String,EntityProperty> properties, String partitionKey, String rowKey, TableRequestOptions.EncryptionResolver encryptionResolver)"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.encryptEntity(Map<String,EntityProperty> properties, String partitionKey, String rowKey, TableRequestOptions.EncryptionResolver encryptionResolver)"
  overload: "com.microsoft.azure.storage.table.TableEncryptionPolicy.encryptEntity*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Return an encrypted entity. This method is used for encrypting entity properties."
  syntax:
    content: " Map<String,EntityProperty> encryptEntity(Map<String,EntityProperty> properties, String partitionKey, String rowKey, TableRequestOptions.EncryptionResolver encryptionResolver)"
    parameters:
    - id: "properties"
      type: "java.util.Map<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>"
    - id: "partitionKey"
      type: "java.lang.String"
    - id: "rowKey"
      type: "java.lang.String"
    - id: "encryptionResolver"
      type: "com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver"
    return:
      type: "java.util.Map<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.getKey()"
  id: "getKey()"
  parent: "com.microsoft.azure.storage.table.TableEncryptionPolicy"
  langs:
  - "java"
  name: "getKey()"
  nameWithType: "TableEncryptionPolicy.getKey()"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.getKey()"
  overload: "com.microsoft.azure.storage.table.TableEncryptionPolicy.getKey*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Gets the <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> that is used to wrap/unwrap the content key during encryption."
  syntax:
    content: "public IKey getKey()"
    return:
      type: "com.microsoft.azure.keyvault.core.IKey"
      description: "An <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> object."
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.getKeyResolver()"
  id: "getKeyResolver()"
  parent: "com.microsoft.azure.storage.table.TableEncryptionPolicy"
  langs:
  - "java"
  name: "getKeyResolver()"
  nameWithType: "TableEncryptionPolicy.getKeyResolver()"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.getKeyResolver()"
  overload: "com.microsoft.azure.storage.table.TableEncryptionPolicy.getKeyResolver*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Gets the key resolver used to select the correct key for decrypting existing table entities."
  syntax:
    content: "public IKeyResolver getKeyResolver()"
    return:
      type: "com.microsoft.azure.keyvault.core.IKeyResolver"
      description: "A resolver that returns an <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> given a keyId."
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.keyResolver"
  id: "keyResolver"
  parent: "com.microsoft.azure.storage.table.TableEncryptionPolicy"
  langs:
  - "java"
  name: "keyResolver"
  nameWithType: "TableEncryptionPolicy.keyResolver"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.keyResolver"
  type: "Field"
  package: "com.microsoft.azure.storage.table"
  summary: "The <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKeyResolver</xref> used to select the correct key for decrypting existing table entities."
  syntax:
    content: "public IKeyResolver keyResolver"
    return:
      type: "com.microsoft.azure.keyvault.core.IKeyResolver"
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.keyWrapper"
  id: "keyWrapper"
  parent: "com.microsoft.azure.storage.table.TableEncryptionPolicy"
  langs:
  - "java"
  name: "keyWrapper"
  nameWithType: "TableEncryptionPolicy.keyWrapper"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.keyWrapper"
  type: "Field"
  package: "com.microsoft.azure.storage.table"
  summary: "An object of type <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> that is used to wrap/unwrap the content key during encryption."
  syntax:
    content: "public IKey keyWrapper"
    return:
      type: "com.microsoft.azure.keyvault.core.IKey"
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.setKey(com.microsoft.azure.keyvault.core.IKey)"
  id: "setKey(com.microsoft.azure.keyvault.core.IKey)"
  parent: "com.microsoft.azure.storage.table.TableEncryptionPolicy"
  langs:
  - "java"
  name: "setKey(IKey key)"
  nameWithType: "TableEncryptionPolicy.setKey(IKey key)"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.setKey(IKey key)"
  overload: "com.microsoft.azure.storage.table.TableEncryptionPolicy.setKey*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Sets the <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> that is used to wrap/unwrap the content key during encryption."
  syntax:
    content: "public void setKey(IKey key)"
    parameters:
    - id: "key"
      type: "com.microsoft.azure.keyvault.core.IKey"
      description: "An <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> object."
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.setKeyResolver(com.microsoft.azure.keyvault.core.IKeyResolver)"
  id: "setKeyResolver(com.microsoft.azure.keyvault.core.IKeyResolver)"
  parent: "com.microsoft.azure.storage.table.TableEncryptionPolicy"
  langs:
  - "java"
  name: "setKeyResolver(IKeyResolver keyResolver)"
  nameWithType: "TableEncryptionPolicy.setKeyResolver(IKeyResolver keyResolver)"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.setKeyResolver(IKeyResolver keyResolver)"
  overload: "com.microsoft.azure.storage.table.TableEncryptionPolicy.setKeyResolver*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Sets the key resolver used to select the correct key for decrypting existing table entities."
  syntax:
    content: "public void setKeyResolver(IKeyResolver keyResolver)"
    parameters:
    - id: "keyResolver"
      type: "com.microsoft.azure.keyvault.core.IKeyResolver"
      description: "A resolver that returns an <xref uid=\"\" data-throw-if-not-resolved=\"false\">IKey</xref> given a keyId."
references:
- uid: "com.microsoft.azure.keyvault.core.IKey"
  spec.java:
  - uid: "com.microsoft.azure.keyvault.core.IKey"
    name: "IKey"
    fullName: "com.microsoft.azure.keyvault.core.IKey"
- uid: "com.microsoft.azure.keyvault.core.IKeyResolver"
  spec.java:
  - uid: "com.microsoft.azure.keyvault.core.IKeyResolver"
    name: "IKeyResolver"
    fullName: "com.microsoft.azure.keyvault.core.IKeyResolver"
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.TableEncryptionPolicy*"
  name: "TableEncryptionPolicy"
  nameWithType: "TableEncryptionPolicy.TableEncryptionPolicy"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.TableEncryptionPolicy"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.getKey*"
  name: "getKey"
  nameWithType: "TableEncryptionPolicy.getKey"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.getKey"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.getKeyResolver*"
  name: "getKeyResolver"
  nameWithType: "TableEncryptionPolicy.getKeyResolver"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.getKeyResolver"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.setKey*"
  name: "setKey"
  nameWithType: "TableEncryptionPolicy.setKey"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.setKey"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.setKeyResolver*"
  name: "setKeyResolver"
  nameWithType: "TableEncryptionPolicy.setKeyResolver"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.setKeyResolver"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.StorageException"
  name: "StorageException"
  nameWithType: "StorageException"
  fullName: "com.microsoft.azure.storage.StorageException"
- uid: "java.util.Map<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "com.microsoft.azure.storage.table.EntityProperty"
    name: "EntityProperty"
    fullName: "com.microsoft.azure.storage.table.EntityProperty"
  - name: ">"
    fullName: ">"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver"
  name: "TableRequestOptions.EncryptionResolver"
  nameWithType: "TableRequestOptions.EncryptionResolver"
  fullName: "com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver"
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.encryptEntity*"
  name: "encryptEntity"
  nameWithType: "TableEncryptionPolicy.encryptEntity"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.encryptEntity"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.EntityProperty"
  name: "EntityProperty"
  nameWithType: "EntityProperty"
  fullName: "com.microsoft.azure.storage.table.EntityProperty"
- uid: "com.microsoft.azure.storage.core.EncryptionData"
  name: "EncryptionData"
  nameWithType: "EncryptionData"
  fullName: "com.microsoft.azure.storage.core.EncryptionData"
- uid: "com.microsoft.azure.storage.table.CEKReturn"
  name: "CEKReturn"
  nameWithType: "CEKReturn"
  fullName: "com.microsoft.azure.storage.table.CEKReturn"
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.decryptMetadataAndReturnCEK*"
  name: "decryptMetadataAndReturnCEK"
  nameWithType: "TableEncryptionPolicy.decryptMetadataAndReturnCEK"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.decryptMetadataAndReturnCEK"
  package: "com.microsoft.azure.storage.table"
- uid: "java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>"
  spec.java:
  - uid: "java.util.HashMap"
    name: "HashMap"
    fullName: "java.util.HashMap"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "com.microsoft.azure.storage.table.EntityProperty"
    name: "EntityProperty"
    fullName: "com.microsoft.azure.storage.table.EntityProperty"
  - name: ">"
    fullName: ">"
- uid: "java.util.HashSet<java.lang.String>"
  spec.java:
  - uid: "java.util.HashSet"
    name: "HashSet"
    fullName: "java.util.HashSet"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "java.security.Key"
  spec.java:
  - uid: "java.security.Key"
    name: "Key"
    fullName: "java.security.Key"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.microsoft.azure.storage.table.TableEncryptionPolicy.decryptEntity*"
  name: "decryptEntity"
  nameWithType: "TableEncryptionPolicy.decryptEntity"
  fullName: "com.microsoft.azure.storage.table.TableEncryptionPolicy.decryptEntity"
  package: "com.microsoft.azure.storage.table"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,com.microsoft.azure.storage.table.EntityProperty"
  name: "String,EntityProperty"
  nameWithType: "String,EntityProperty"
  fullName: "java.lang.String,com.microsoft.azure.storage.table.EntityProperty"
- uid: "java.util.HashMap"
  name: "HashMap"
  nameWithType: "HashMap"
  fullName: "java.util.HashMap"
- uid: "java.util.HashSet"
  name: "HashSet"
  nameWithType: "HashSet"
  fullName: "java.util.HashSet"
