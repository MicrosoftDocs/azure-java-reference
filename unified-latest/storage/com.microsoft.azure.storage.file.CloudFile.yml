### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.file.CloudFile"
  id: "CloudFile"
  parent: "com.microsoft.azure.storage.file"
  children:
  - "com.microsoft.azure.storage.file.CloudFile.CloudFile(com.microsoft.azure.storage.StorageUri)"
  - "com.microsoft.azure.storage.file.CloudFile.CloudFile(com.microsoft.azure.storage.StorageUri,com.microsoft.azure.storage.StorageCredentials)"
  - "com.microsoft.azure.storage.file.CloudFile.CloudFile(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.file.CloudFileShare)"
  - "com.microsoft.azure.storage.file.CloudFile.CloudFile(com.microsoft.azure.storage.file.CloudFile)"
  - "com.microsoft.azure.storage.file.CloudFile.CloudFile(java.net.URI)"
  - "com.microsoft.azure.storage.file.CloudFile.CloudFile(java.net.URI,com.microsoft.azure.storage.StorageCredentials)"
  - "com.microsoft.azure.storage.file.CloudFile.abortCopy(java.lang.String)"
  - "com.microsoft.azure.storage.file.CloudFile.abortCopy(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.assertValidFilePermissionOrKey()"
  - "com.microsoft.azure.storage.file.CloudFile.clearRange(long,long)"
  - "com.microsoft.azure.storage.file.CloudFile.clearRange(long,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.closeAllHandlesSegmented()"
  - "com.microsoft.azure.storage.file.CloudFile.closeAllHandlesSegmented(com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.closeHandleSegmented(java.lang.String)"
  - "com.microsoft.azure.storage.file.CloudFile.closeHandleSegmented(java.lang.String,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.create(long)"
  - "com.microsoft.azure.storage.file.CloudFile.create(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.delete()"
  - "com.microsoft.azure.storage.file.CloudFile.delete(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.deleteIfExists()"
  - "com.microsoft.azure.storage.file.CloudFile.deleteIfExists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.download(java.io.OutputStream)"
  - "com.microsoft.azure.storage.file.CloudFile.download(java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.downloadAttributes()"
  - "com.microsoft.azure.storage.file.CloudFile.downloadAttributes(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.downloadFileRanges()"
  - "com.microsoft.azure.storage.file.CloudFile.downloadFileRanges(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.downloadRange(long,java.lang.Long,java.io.OutputStream)"
  - "com.microsoft.azure.storage.file.CloudFile.downloadRange(long,java.lang.Long,java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.downloadRangeInternal(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.downloadRangeToByteArray(long,java.lang.Long,byte[],int)"
  - "com.microsoft.azure.storage.file.CloudFile.downloadRangeToByteArray(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.downloadText()"
  - "com.microsoft.azure.storage.file.CloudFile.downloadText(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.downloadToByteArray(byte[],int)"
  - "com.microsoft.azure.storage.file.CloudFile.downloadToByteArray(byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.downloadToFile(java.lang.String)"
  - "com.microsoft.azure.storage.file.CloudFile.downloadToFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.exists()"
  - "com.microsoft.azure.storage.file.CloudFile.exists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.fileServiceClient"
  - "com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature(com.microsoft.azure.storage.file.SharedAccessFilePolicy,com.microsoft.azure.storage.file.SharedAccessFileHeaders,java.lang.String)"
  - "com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature(com.microsoft.azure.storage.file.SharedAccessFilePolicy,com.microsoft.azure.storage.file.SharedAccessFileHeaders,java.lang.String,com.microsoft.azure.storage.IPRange,com.microsoft.azure.storage.SharedAccessProtocols)"
  - "com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature(com.microsoft.azure.storage.file.SharedAccessFilePolicy,java.lang.String)"
  - "com.microsoft.azure.storage.file.CloudFile.getCanonicalName()"
  - "com.microsoft.azure.storage.file.CloudFile.getCopyState()"
  - "com.microsoft.azure.storage.file.CloudFile.getMetadata()"
  - "com.microsoft.azure.storage.file.CloudFile.getName()"
  - "com.microsoft.azure.storage.file.CloudFile.getParent()"
  - "com.microsoft.azure.storage.file.CloudFile.getParentNameFromURI(com.microsoft.azure.storage.StorageUri,com.microsoft.azure.storage.file.CloudFileShare)"
  - "com.microsoft.azure.storage.file.CloudFile.getProperties()"
  - "com.microsoft.azure.storage.file.CloudFile.getServiceClient()"
  - "com.microsoft.azure.storage.file.CloudFile.getShare()"
  - "com.microsoft.azure.storage.file.CloudFile.getStorageUri()"
  - "com.microsoft.azure.storage.file.CloudFile.getStreamMinimumReadSizeInBytes()"
  - "com.microsoft.azure.storage.file.CloudFile.getStreamWriteSizeInBytes()"
  - "com.microsoft.azure.storage.file.CloudFile.getTransformedAddress(com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.getUri()"
  - "com.microsoft.azure.storage.file.CloudFile.listHandles()"
  - "com.microsoft.azure.storage.file.CloudFile.listHandles(com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.listHandlesSegmented()"
  - "com.microsoft.azure.storage.file.CloudFile.listHandlesSegmented(java.lang.Integer,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.openRead()"
  - "com.microsoft.azure.storage.file.CloudFile.openRead(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.openWriteExisting()"
  - "com.microsoft.azure.storage.file.CloudFile.openWriteExisting(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.openWriteNew(long)"
  - "com.microsoft.azure.storage.file.CloudFile.openWriteNew(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.parent"
  - "com.microsoft.azure.storage.file.CloudFile.putRangeFromURL(long,long,java.net.URI,long)"
  - "com.microsoft.azure.storage.file.CloudFile.putRangeFromURL(long,long,java.net.URI,long,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.resize(long)"
  - "com.microsoft.azure.storage.file.CloudFile.resize(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.setFilePermission(java.lang.String)"
  - "com.microsoft.azure.storage.file.CloudFile.setMetadata(java.util.HashMap<java.lang.String,java.lang.String>)"
  - "com.microsoft.azure.storage.file.CloudFile.setProperties(com.microsoft.azure.storage.file.FileProperties)"
  - "com.microsoft.azure.storage.file.CloudFile.setShare(com.microsoft.azure.storage.file.CloudFileShare)"
  - "com.microsoft.azure.storage.file.CloudFile.setStorageUri(com.microsoft.azure.storage.StorageUri)"
  - "com.microsoft.azure.storage.file.CloudFile.setStreamMinimumReadSizeInBytes(int)"
  - "com.microsoft.azure.storage.file.CloudFile.setStreamWriteSizeInBytes(int)"
  - "com.microsoft.azure.storage.file.CloudFile.startCopy(com.microsoft.azure.storage.blob.CloudBlob)"
  - "com.microsoft.azure.storage.file.CloudFile.startCopy(com.microsoft.azure.storage.blob.CloudBlob,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.startCopy(com.microsoft.azure.storage.file.CloudFile)"
  - "com.microsoft.azure.storage.file.CloudFile.startCopy(com.microsoft.azure.storage.file.CloudFile,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.startCopy(java.net.URI)"
  - "com.microsoft.azure.storage.file.CloudFile.startCopy(java.net.URI,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.streamMinimumReadSizeInBytes"
  - "com.microsoft.azure.storage.file.CloudFile.streamWriteSizeInBytes"
  - "com.microsoft.azure.storage.file.CloudFile.updateEtagAndLastModifiedFromResponse(java.net.HttpURLConnection)"
  - "com.microsoft.azure.storage.file.CloudFile.updateLengthFromResponse(java.net.HttpURLConnection)"
  - "com.microsoft.azure.storage.file.CloudFile.upload(java.io.InputStream,long)"
  - "com.microsoft.azure.storage.file.CloudFile.upload(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.uploadFromByteArray(byte[],int,int)"
  - "com.microsoft.azure.storage.file.CloudFile.uploadFromByteArray(byte[],int,int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.uploadFromFile(java.lang.String)"
  - "com.microsoft.azure.storage.file.CloudFile.uploadFromFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.uploadMetadata()"
  - "com.microsoft.azure.storage.file.CloudFile.uploadMetadata(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.uploadProperties()"
  - "com.microsoft.azure.storage.file.CloudFile.uploadProperties(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.uploadRange(java.io.InputStream,long,long)"
  - "com.microsoft.azure.storage.file.CloudFile.uploadRange(java.io.InputStream,long,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFile.uploadText(java.lang.String)"
  - "com.microsoft.azure.storage.file.CloudFile.uploadText(java.lang.String,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  langs:
  - "java"
  name: "CloudFile"
  nameWithType: "CloudFile"
  fullName: "com.microsoft.azure.storage.file.CloudFile"
  type: "Class"
  package: "com.microsoft.azure.storage.file"
  summary: "Represents a Microsoft Azure File."
  syntax:
    content: "public final class CloudFile implements ListFileItem"
  inheritance:
  - "java.lang.Object"
  implements:
  - "com.microsoft.azure.storage.file.ListFileItem"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.file.CloudFile.CloudFile(com.microsoft.azure.storage.StorageUri)"
  id: "CloudFile(com.microsoft.azure.storage.StorageUri)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "CloudFile(StorageUri fileAbsoluteUri)"
  nameWithType: "CloudFile.CloudFile(StorageUri fileAbsoluteUri)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.CloudFile(StorageUri fileAbsoluteUri)"
  overload: "com.microsoft.azure.storage.file.CloudFile.CloudFile*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates an instance of the `CloudFile` class using the specified absolute StorageUri."
  syntax:
    content: "public CloudFile(StorageUri fileAbsoluteUri)"
    parameters:
    - id: "fileAbsoluteUri"
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> object that represents the absolute URI to the file."
- uid: "com.microsoft.azure.storage.file.CloudFile.CloudFile(com.microsoft.azure.storage.StorageUri,com.microsoft.azure.storage.StorageCredentials)"
  id: "CloudFile(com.microsoft.azure.storage.StorageUri,com.microsoft.azure.storage.StorageCredentials)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "CloudFile(StorageUri fileAbsoluteUri, StorageCredentials credentials)"
  nameWithType: "CloudFile.CloudFile(StorageUri fileAbsoluteUri, StorageCredentials credentials)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.CloudFile(StorageUri fileAbsoluteUri, StorageCredentials credentials)"
  overload: "com.microsoft.azure.storage.file.CloudFile.CloudFile*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates an instance of the `CloudFile` class using the specified absolute StorageUri and credentials."
  syntax:
    content: "public CloudFile(StorageUri fileAbsoluteUri, StorageCredentials credentials)"
    parameters:
    - id: "fileAbsoluteUri"
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> object that represents the absolute URI to the file."
    - id: "credentials"
      type: "com.microsoft.azure.storage.StorageCredentials"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageCredentials\" data-throw-if-not-resolved=\"false\">StorageCredentials</xref> object used to authenticate access."
- uid: "com.microsoft.azure.storage.file.CloudFile.CloudFile(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.file.CloudFileShare)"
  id: "CloudFile(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.file.CloudFileShare)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "CloudFile(StorageUri uri, String fileName, CloudFileShare share)"
  nameWithType: "CloudFile.CloudFile(StorageUri uri, String fileName, CloudFileShare share)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.CloudFile(StorageUri uri, String fileName, CloudFileShare share)"
  overload: "com.microsoft.azure.storage.file.CloudFile.CloudFile*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates an instance of the `CloudFile` class using the specified address, share, and client."
  syntax:
    content: "protected CloudFile(StorageUri uri, String fileName, CloudFileShare share)"
    parameters:
    - id: "uri"
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> that represents the file directory's address."
    - id: "fileName"
      type: "java.lang.String"
      description: "A <code>String</code> that represents the name of the file."
    - id: "share"
      type: "com.microsoft.azure.storage.file.CloudFileShare"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.CloudFileShare\" data-throw-if-not-resolved=\"false\">CloudFileShare</xref> object that represents the associated file share."
- uid: "com.microsoft.azure.storage.file.CloudFile.CloudFile(com.microsoft.azure.storage.file.CloudFile)"
  id: "CloudFile(com.microsoft.azure.storage.file.CloudFile)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "CloudFile(CloudFile otherFile)"
  nameWithType: "CloudFile.CloudFile(CloudFile otherFile)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.CloudFile(CloudFile otherFile)"
  overload: "com.microsoft.azure.storage.file.CloudFile.CloudFile*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates an instance of the `CloudFile` class by copying values from another cloud file."
  syntax:
    content: "public CloudFile(CloudFile otherFile)"
    parameters:
    - id: "otherFile"
      type: "com.microsoft.azure.storage.file.CloudFile"
      description: "A <code>CloudFile</code> object that represents the file to copy."
- uid: "com.microsoft.azure.storage.file.CloudFile.CloudFile(java.net.URI)"
  id: "CloudFile(java.net.URI)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "CloudFile(URI fileAbsoluteUri)"
  nameWithType: "CloudFile.CloudFile(URI fileAbsoluteUri)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.CloudFile(URI fileAbsoluteUri)"
  overload: "com.microsoft.azure.storage.file.CloudFile.CloudFile*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates an instance of the `CloudFile` class using the specified absolute URI."
  syntax:
    content: "public CloudFile(URI fileAbsoluteUri)"
    parameters:
    - id: "fileAbsoluteUri"
      type: "java.net.URI"
      description: "A <code>java.net.URI</code> object that represents the absolute URI to the file."
- uid: "com.microsoft.azure.storage.file.CloudFile.CloudFile(java.net.URI,com.microsoft.azure.storage.StorageCredentials)"
  id: "CloudFile(java.net.URI,com.microsoft.azure.storage.StorageCredentials)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "CloudFile(URI fileAbsoluteUri, StorageCredentials credentials)"
  nameWithType: "CloudFile.CloudFile(URI fileAbsoluteUri, StorageCredentials credentials)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.CloudFile(URI fileAbsoluteUri, StorageCredentials credentials)"
  overload: "com.microsoft.azure.storage.file.CloudFile.CloudFile*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates an instance of the `CloudFile` class using the specified absolute URI and credentials."
  syntax:
    content: "public CloudFile(URI fileAbsoluteUri, StorageCredentials credentials)"
    parameters:
    - id: "fileAbsoluteUri"
      type: "java.net.URI"
      description: "A <code>java.net.URI</code> object that represents the absolute URI to the file."
    - id: "credentials"
      type: "com.microsoft.azure.storage.StorageCredentials"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageCredentials\" data-throw-if-not-resolved=\"false\">StorageCredentials</xref> object used to authenticate access."
- uid: "com.microsoft.azure.storage.file.CloudFile.abortCopy(java.lang.String)"
  id: "abortCopy(java.lang.String)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "abortCopy(String copyId)"
  nameWithType: "CloudFile.abortCopy(String copyId)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.abortCopy(String copyId)"
  overload: "com.microsoft.azure.storage.file.CloudFile.abortCopy*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Aborts an ongoing Azure File copy operation."
  syntax:
    content: "public final void abortCopy(String copyId)"
    parameters:
    - id: "copyId"
      type: "java.lang.String"
      description: "A <code>String</code> object that identifies the copy operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.abortCopy(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "abortCopy(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "abortCopy(String copyId, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.abortCopy(String copyId, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.abortCopy(String copyId, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.abortCopy*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Aborts an ongoing Azure File copy operation."
  syntax:
    content: "public final void abortCopy(String copyId, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "copyId"
      type: "java.lang.String"
      description: "A <code>String</code> object that identifies the copy operation."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the Azure File."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.assertValidFilePermissionOrKey()"
  id: "assertValidFilePermissionOrKey()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "assertValidFilePermissionOrKey()"
  nameWithType: "CloudFile.assertValidFilePermissionOrKey()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.assertValidFilePermissionOrKey()"
  overload: "com.microsoft.azure.storage.file.CloudFile.assertValidFilePermissionOrKey*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Verifies that the directory's filePermission and properties.filePermissionKey are both not set."
  syntax:
    content: "protected void assertValidFilePermissionOrKey()"
- uid: "com.microsoft.azure.storage.file.CloudFile.clearRange(long,long)"
  id: "clearRange(long,long)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "clearRange(long offset, long length)"
  nameWithType: "CloudFile.clearRange(long offset, long length)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.clearRange(long offset, long length)"
  overload: "com.microsoft.azure.storage.file.CloudFile.clearRange*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Clears a range from a file.\n\nCalling `clearRange` releases the storage space used by the specified range. Ranges that have been cleared are no longer tracked as part of the file."
  syntax:
    content: "public void clearRange(long offset, long length)"
    parameters:
    - id: "offset"
      type: "long"
      description: "The offset, in bytes, at which to begin clearing."
    - id: "length"
      type: "long"
      description: "The length, in bytes, of the data range to be cleared."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.clearRange(long,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "clearRange(long,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "clearRange(long offset, long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.clearRange(long offset, long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.clearRange(long offset, long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.clearRange*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Clears a range from a file using the specified lease ID, request options, and operation context.\n\nCalling `clearRange` releases the storage space used by the specified range. Ranges that have been cleared are no longer tracked as part of the file."
  syntax:
    content: "public void clearRange(long offset, long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "offset"
      type: "long"
      description: "A <code>long</code> which represents the offset, in bytes, at which to begin clearing."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the data range to be cleared."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.closeAllHandlesSegmented()"
  id: "closeAllHandlesSegmented()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "closeAllHandlesSegmented()"
  nameWithType: "CloudFile.closeAllHandlesSegmented()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.closeAllHandlesSegmented()"
  overload: "com.microsoft.azure.storage.file.CloudFile.closeAllHandlesSegmented*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Close all SMB handles on this file."
  syntax:
    content: "public ResultSegment<Integer> closeAllHandlesSegmented()"
    return:
      type: "com.microsoft.azure.storage.ResultSegment<java.lang.Integer>"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultSegment\" data-throw-if-not-resolved=\"false\">ResultSegment</xref> which has one element which is the number of handles closed and a\n           continuation to follow in case the operation took too long to be completed atomically."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.file.CloudFile.closeAllHandlesSegmented(com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "closeAllHandlesSegmented(com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "closeAllHandlesSegmented(ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.closeAllHandlesSegmented(ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.closeAllHandlesSegmented(ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.closeAllHandlesSegmented*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Close all SMB handles on this file."
  syntax:
    content: "public ResultSegment<Integer> closeAllHandlesSegmented(ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "continuationToken"
      type: "com.microsoft.azure.storage.ResultContinuation"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultContinuation\" data-throw-if-not-resolved=\"false\">ResultContinuation</xref> object that represents a continuation token\n            returned by a previous listing operation."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "com.microsoft.azure.storage.ResultSegment<java.lang.Integer>"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultSegment\" data-throw-if-not-resolved=\"false\">ResultSegment</xref> which has one element which is the number of handles closed and a\n           continuation to follow in case the operation took too long to be completed atomically."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.file.CloudFile.closeHandleSegmented(java.lang.String)"
  id: "closeHandleSegmented(java.lang.String)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "closeHandleSegmented(String handleID)"
  nameWithType: "CloudFile.closeHandleSegmented(String handleID)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.closeHandleSegmented(String handleID)"
  overload: "com.microsoft.azure.storage.file.CloudFile.closeHandleSegmented*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Close all SMB handles on this file."
  syntax:
    content: "public ResultSegment<Integer> closeHandleSegmented(String handleID)"
    parameters:
    - id: "handleID"
      type: "java.lang.String"
      description: "The handle to close."
    return:
      type: "com.microsoft.azure.storage.ResultSegment<java.lang.Integer>"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultSegment\" data-throw-if-not-resolved=\"false\">ResultSegment</xref> which has one element which is the number of handles closed and a\n           continuation to follow in case the operation took too long to be completed atomically."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.file.CloudFile.closeHandleSegmented(java.lang.String,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "closeHandleSegmented(java.lang.String,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "closeHandleSegmented(String handleID, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.closeHandleSegmented(String handleID, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.closeHandleSegmented(String handleID, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.closeHandleSegmented*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Close all SMB handles on this file."
  syntax:
    content: "public ResultSegment<Integer> closeHandleSegmented(String handleID, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "handleID"
      type: "java.lang.String"
      description: "The handle to close."
    - id: "continuationToken"
      type: "com.microsoft.azure.storage.ResultContinuation"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultContinuation\" data-throw-if-not-resolved=\"false\">ResultContinuation</xref> object that represents a continuation token\n            returned by a previous listing operation."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "com.microsoft.azure.storage.ResultSegment<java.lang.Integer>"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultSegment\" data-throw-if-not-resolved=\"false\">ResultSegment</xref> which has one element which is the number of handles closed and a\n           continuation to follow in case the operation took too long to be completed atomically."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.file.CloudFile.create(long)"
  id: "create(long)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "create(long size)"
  nameWithType: "CloudFile.create(long size)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.create(long size)"
  overload: "com.microsoft.azure.storage.file.CloudFile.create*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates a file. If the file already exists, this will replace it."
  syntax:
    content: "public void create(long size)"
    parameters:
    - id: "size"
      type: "long"
      description: "A <code>long</code> which represents the size, in bytes, of the file."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.create(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "create(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "create(long size, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.create(long size, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.create(long size, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.create*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates a file using the specified access condition, request options and operation context. If the file already exists, this will replace it."
  syntax:
    content: "public void create(long size, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "size"
      type: "long"
      description: "A <code>long</code> which represents the size, in bytes, of the file."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.delete()"
  id: "delete()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "delete()"
  nameWithType: "CloudFile.delete()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.delete()"
  overload: "com.microsoft.azure.storage.file.CloudFile.delete*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Deletes the file."
  syntax:
    content: "public final void delete()"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.delete(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "delete(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "delete(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.delete(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.delete(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.delete*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Deletes the file using the specified access condition, request options, and operation context."
  syntax:
    content: "public final void delete(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.deleteIfExists()"
  id: "deleteIfExists()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "deleteIfExists()"
  nameWithType: "CloudFile.deleteIfExists()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.deleteIfExists()"
  overload: "com.microsoft.azure.storage.file.CloudFile.deleteIfExists*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Deletes the file if it exists."
  syntax:
    content: "public final boolean deleteIfExists()"
    return:
      type: "boolean"
      description: "<code>true</code> if the file was deleted; otherwise, <code>false</code>."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.deleteIfExists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "deleteIfExists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "deleteIfExists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.deleteIfExists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.deleteIfExists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.deleteIfExists*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Deletes the file if it exists, using the specified access condition, request options, and operation context."
  syntax:
    content: "public final boolean deleteIfExists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "boolean"
      description: "<code>true</code> if the file existed and was deleted; otherwise, <code>false</code>"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.download(java.io.OutputStream)"
  id: "download(java.io.OutputStream)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "download(OutputStream outStream)"
  nameWithType: "CloudFile.download(OutputStream outStream)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.download(OutputStream outStream)"
  overload: "com.microsoft.azure.storage.file.CloudFile.download*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Downloads the contents of a file to a stream."
  syntax:
    content: "public final void download(OutputStream outStream)"
    parameters:
    - id: "outStream"
      type: "java.io.OutputStream"
      description: "An <code><xref uid=\"java.io.OutputStream\" data-throw-if-not-resolved=\"false\">OutputStream</xref></code> object that represents the target stream."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.download(java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "download(java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "download(OutputStream outStream, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.download(OutputStream outStream, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.download(OutputStream outStream, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.download*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Downloads the contents of a file to a stream using the specified request options and operation context."
  syntax:
    content: "public final void download(OutputStream outStream, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "outStream"
      type: "java.io.OutputStream"
      description: "An <code>OutputStream</code> object that represents the target stream."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadAttributes()"
  id: "downloadAttributes()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "downloadAttributes()"
  nameWithType: "CloudFile.downloadAttributes()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadAttributes()"
  overload: "com.microsoft.azure.storage.file.CloudFile.downloadAttributes*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Populates a file's properties and metadata.\n\nThis method populates the file's system properties and user-defined metadata. Before reading or modifying a file's properties or metadata, call this method or its overload to retrieve the latest values for the file's properties and metadata from the Microsoft Azure storage service."
  syntax:
    content: "public final void downloadAttributes()"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadAttributes(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "downloadAttributes(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "downloadAttributes(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.downloadAttributes(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadAttributes(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.downloadAttributes*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Populates a file's properties and metadata using the specified request options and operation context.\n\nThis method populates the file's system properties and user-defined metadata. Before reading or modifying a file's properties or metadata, call this method or its overload to retrieve the latest values for the file's properties and metadata from the Microsoft Azure storage service."
  syntax:
    content: "public final void downloadAttributes(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadFileRanges()"
  id: "downloadFileRanges()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "downloadFileRanges()"
  nameWithType: "CloudFile.downloadFileRanges()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadFileRanges()"
  overload: "com.microsoft.azure.storage.file.CloudFile.downloadFileRanges*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns a collection of file ranges and their starting and ending byte offsets.\n\nThe start and end byte offsets for each file range are inclusive."
  syntax:
    content: "public ArrayList<FileRange> downloadFileRanges()"
    return:
      type: "java.util.ArrayList<com.microsoft.azure.storage.file.FileRange>"
      description: "An <code>ArrayList</code> object which represents the set of file ranges and their starting and ending\n         byte offsets."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadFileRanges(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "downloadFileRanges(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "downloadFileRanges(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.downloadFileRanges(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadFileRanges(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.downloadFileRanges*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns a collection of file ranges and their starting and ending byte offsets using the specified request options and operation context."
  syntax:
    content: "public ArrayList<FileRange> downloadFileRanges(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "java.util.ArrayList<com.microsoft.azure.storage.file.FileRange>"
      description: "An <code>ArrayList</code> object which represents the set of file ranges and their starting\n            and ending byte offsets."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadRange(long,java.lang.Long,java.io.OutputStream)"
  id: "downloadRange(long,java.lang.Long,java.io.OutputStream)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "downloadRange(long offset, Long length, OutputStream outStream)"
  nameWithType: "CloudFile.downloadRange(long offset, Long length, OutputStream outStream)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadRange(long offset, Long length, OutputStream outStream)"
  overload: "com.microsoft.azure.storage.file.CloudFile.downloadRange*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Downloads the contents of a file to a stream."
  syntax:
    content: "public final void downloadRange(long offset, Long length, OutputStream outStream)"
    parameters:
    - id: "offset"
      type: "long"
      description: "A <code>long</code> which represents the offset to use as the starting point for the source."
    - id: "length"
      type: "java.lang.Long"
      description: "A <code>Long</code> which represents the number of bytes to read or <code>null</code>."
    - id: "outStream"
      type: "java.io.OutputStream"
      description: "An <code><xref uid=\"java.io.OutputStream\" data-throw-if-not-resolved=\"false\">OutputStream</xref></code> object that represents the target stream."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadRange(long,java.lang.Long,java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "downloadRange(long,java.lang.Long,java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "downloadRange(long offset, Long length, OutputStream outStream, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.downloadRange(long offset, Long length, OutputStream outStream, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadRange(long offset, Long length, OutputStream outStream, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.downloadRange*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Downloads the contents of a file to a stream using the specified request options and operation context."
  syntax:
    content: "public final void downloadRange(long offset, Long length, OutputStream outStream, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "offset"
      type: "long"
      description: "A <code>long</code> which represents the offset to use as the starting point for the source."
    - id: "length"
      type: "java.lang.Long"
      description: "A <code>Long</code> which represents the number of bytes to read or <code>null</code>."
    - id: "outStream"
      type: "java.io.OutputStream"
      description: "An <code><xref uid=\"java.io.OutputStream\" data-throw-if-not-resolved=\"false\">OutputStream</xref></code> object that represents the target stream."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadRangeInternal(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "downloadRangeInternal(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "downloadRangeInternal(long fileOffset, Long length, byte[] buffer, int bufferOffset, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.downloadRangeInternal(long fileOffset, Long length, byte[] buffer, int bufferOffset, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadRangeInternal(long fileOffset, Long length, byte[] buffer, int bufferOffset, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.downloadRangeInternal*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Downloads a range of bytes from the file to the given byte buffer."
  syntax:
    content: "protected final int downloadRangeInternal(long fileOffset, Long length, byte[] buffer, int bufferOffset, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "fileOffset"
      type: "long"
      description: "A <code>long</code> which represents the offset within the file to begin downloading."
    - id: "length"
      type: "java.lang.Long"
      description: "A <code>Long</code> which represents the number of bytes to read."
    - id: "buffer"
      type: "byte[]"
      description: "A <code>byte</code> array which represents the buffer to write to."
    - id: "bufferOffset"
      type: "int"
      description: "An <code>int</code> which represents the offset in the byte buffer to begin writing."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object used to track the execution of the operation."
    return:
      type: "int"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "an exception representing any error which occurred during the operation."
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadRangeToByteArray(long,java.lang.Long,byte[],int)"
  id: "downloadRangeToByteArray(long,java.lang.Long,byte[],int)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "downloadRangeToByteArray(long offset, Long length, byte[] buffer, int bufferOffset)"
  nameWithType: "CloudFile.downloadRangeToByteArray(long offset, Long length, byte[] buffer, int bufferOffset)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadRangeToByteArray(long offset, Long length, byte[] buffer, int bufferOffset)"
  overload: "com.microsoft.azure.storage.file.CloudFile.downloadRangeToByteArray*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Downloads a range of bytes from the file to the given byte buffer."
  syntax:
    content: "public final int downloadRangeToByteArray(long offset, Long length, byte[] buffer, int bufferOffset)"
    parameters:
    - id: "offset"
      type: "long"
      description: "A <code>long</code> which represents the byte offset to use as the starting point for the source."
    - id: "length"
      type: "java.lang.Long"
      description: "A <code>Long</code> which represents the number of bytes to read or null."
    - id: "buffer"
      type: "byte[]"
      description: "A <code>byte</code> array which represents the buffer to which the file bytes are downloaded."
    - id: "bufferOffset"
      type: "int"
      description: "An <code>int</code> which represents the byte offset to use as the starting point for the target."
    return:
      type: "int"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadRangeToByteArray(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "downloadRangeToByteArray(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "downloadRangeToByteArray(long offset, Long length, byte[] buffer, int bufferOffset, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.downloadRangeToByteArray(long offset, Long length, byte[] buffer, int bufferOffset, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadRangeToByteArray(long offset, Long length, byte[] buffer, int bufferOffset, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.downloadRangeToByteArray*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Downloads a range of bytes from the file to the given byte buffer, using the specified request options and operation context."
  syntax:
    content: "public final int downloadRangeToByteArray(long offset, Long length, byte[] buffer, int bufferOffset, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "offset"
      type: "long"
      description: "A <code>long</code> which represents the byte offset to use as the starting point for the source."
    - id: "length"
      type: "java.lang.Long"
      description: "A <code>Long</code> which represents the number of bytes to read or <code>null</code>."
    - id: "buffer"
      type: "byte[]"
      description: "A <code>byte</code> array which represents the buffer to which the file bytes are downloaded."
    - id: "bufferOffset"
      type: "int"
      description: "An <code>int</code> which represents the byte offset to use as the starting point for the target."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "int"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadText()"
  id: "downloadText()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "downloadText()"
  nameWithType: "CloudFile.downloadText()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadText()"
  overload: "com.microsoft.azure.storage.file.CloudFile.downloadText*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Downloads a file to a string using the platform's default encoding."
  syntax:
    content: "public String downloadText()"
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the file's contents."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadText(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "downloadText(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "downloadText(String charsetName, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.downloadText(String charsetName, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadText(String charsetName, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.downloadText*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Downloads a file to a string using the specified encoding."
  syntax:
    content: "public String downloadText(String charsetName, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "charsetName"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the name of the charset to use to encode the content.\n            If null, the platform's default encoding is used."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the file's contents."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadToByteArray(byte[],int)"
  id: "downloadToByteArray(byte[],int)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "downloadToByteArray(byte[] buffer, int bufferOffset)"
  nameWithType: "CloudFile.downloadToByteArray(byte[] buffer, int bufferOffset)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadToByteArray(byte[] buffer, int bufferOffset)"
  overload: "com.microsoft.azure.storage.file.CloudFile.downloadToByteArray*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Downloads a range of bytes from the file to the given byte buffer."
  syntax:
    content: "public final int downloadToByteArray(byte[] buffer, int bufferOffset)"
    parameters:
    - id: "buffer"
      type: "byte[]"
      description: "A <code>byte</code> array which represents the buffer to which the file bytes are downloaded."
    - id: "bufferOffset"
      type: "int"
      description: "An <code>int</code> which represents the byte offset to use as the starting point for the target."
    return:
      type: "int"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadToByteArray(byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "downloadToByteArray(byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "downloadToByteArray(byte[] buffer, int bufferOffset, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.downloadToByteArray(byte[] buffer, int bufferOffset, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadToByteArray(byte[] buffer, int bufferOffset, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.downloadToByteArray*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Downloads a range of bytes from the file to the given byte buffer, using the specified request options and operation context."
  syntax:
    content: "public final int downloadToByteArray(byte[] buffer, int bufferOffset, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "buffer"
      type: "byte[]"
      description: "A <code>byte</code> array which represents the buffer to which the file bytes are downloaded."
    - id: "bufferOffset"
      type: "int"
      description: "A <code>long</code> which represents the byte offset to use as the starting point for the target."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "int"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadToFile(java.lang.String)"
  id: "downloadToFile(java.lang.String)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "downloadToFile(String path)"
  nameWithType: "CloudFile.downloadToFile(String path)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadToFile(String path)"
  overload: "com.microsoft.azure.storage.file.CloudFile.downloadToFile*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Downloads a file."
  syntax:
    content: "public void downloadToFile(String path)"
    parameters:
    - id: "path"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the path to the file that will be created."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadToFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "downloadToFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "downloadToFile(String path, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.downloadToFile(String path, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadToFile(String path, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.downloadToFile*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Downloads a file."
  syntax:
    content: "public void downloadToFile(String path, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "path"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the path to the file that will be created."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.exists()"
  id: "exists()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "exists()"
  nameWithType: "CloudFile.exists()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.exists()"
  overload: "com.microsoft.azure.storage.file.CloudFile.exists*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Checks to see if the file exists."
  syntax:
    content: "public final boolean exists()"
    return:
      type: "boolean"
      description: "<code>true</code> if the file exists, otherwise <code>false</code>."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.exists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "exists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "exists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.exists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.exists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.exists*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Checks to see if the file exists, using the specified access condition, request options and operation context."
  syntax:
    content: "public final boolean exists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "boolean"
      description: "<code>true</code> if the file exists, otherwise <code>false</code>."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.fileServiceClient"
  id: "fileServiceClient"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "fileServiceClient"
  nameWithType: "CloudFile.fileServiceClient"
  fullName: "com.microsoft.azure.storage.file.CloudFile.fileServiceClient"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "Represents the file service client."
  syntax:
    content: "protected CloudFileClient fileServiceClient"
    return:
      type: "com.microsoft.azure.storage.file.CloudFileClient"
- uid: "com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature(com.microsoft.azure.storage.file.SharedAccessFilePolicy,com.microsoft.azure.storage.file.SharedAccessFileHeaders,java.lang.String)"
  id: "generateSharedAccessSignature(com.microsoft.azure.storage.file.SharedAccessFilePolicy,com.microsoft.azure.storage.file.SharedAccessFileHeaders,java.lang.String)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "generateSharedAccessSignature(SharedAccessFilePolicy policy, SharedAccessFileHeaders headers, String groupPolicyIdentifier)"
  nameWithType: "CloudFile.generateSharedAccessSignature(SharedAccessFilePolicy policy, SharedAccessFileHeaders headers, String groupPolicyIdentifier)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature(SharedAccessFilePolicy policy, SharedAccessFileHeaders headers, String groupPolicyIdentifier)"
  overload: "com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns a shared access signature for the file using the specified group policy identifier and shared access file headers. Note this does not contain the leading \"?\"."
  syntax:
    content: "public String generateSharedAccessSignature(SharedAccessFilePolicy policy, SharedAccessFileHeaders headers, String groupPolicyIdentifier)"
    parameters:
    - id: "policy"
      type: "com.microsoft.azure.storage.file.SharedAccessFilePolicy"
      description: "A <code><xref uid=\"com.microsoft.azure.storage.file.SharedAccessFilePolicy\" data-throw-if-not-resolved=\"false\">SharedAccessFilePolicy</xref></code> object that represents the access policy for the shared\n            access signature."
    - id: "headers"
      type: "com.microsoft.azure.storage.file.SharedAccessFileHeaders"
      description: "A <code><xref uid=\"com.microsoft.azure.storage.file.SharedAccessFileHeaders\" data-throw-if-not-resolved=\"false\">SharedAccessFileHeaders</xref></code> object that represents the optional header values to\n            set for a file accessed with this shared access signature."
    - id: "groupPolicyIdentifier"
      type: "java.lang.String"
      description: "A <code>String</code> that represents the share-level access policy."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> that represents the shared access signature."
  exceptions:
  - type: "java.security.InvalidKeyException"
    description: "If the credentials are invalid."
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If the credentials are invalid."
- uid: "com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature(com.microsoft.azure.storage.file.SharedAccessFilePolicy,com.microsoft.azure.storage.file.SharedAccessFileHeaders,java.lang.String,com.microsoft.azure.storage.IPRange,com.microsoft.azure.storage.SharedAccessProtocols)"
  id: "generateSharedAccessSignature(com.microsoft.azure.storage.file.SharedAccessFilePolicy,com.microsoft.azure.storage.file.SharedAccessFileHeaders,java.lang.String,com.microsoft.azure.storage.IPRange,com.microsoft.azure.storage.SharedAccessProtocols)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "generateSharedAccessSignature(SharedAccessFilePolicy policy, SharedAccessFileHeaders headers, String groupPolicyIdentifier, IPRange ipRange, SharedAccessProtocols protocols)"
  nameWithType: "CloudFile.generateSharedAccessSignature(SharedAccessFilePolicy policy, SharedAccessFileHeaders headers, String groupPolicyIdentifier, IPRange ipRange, SharedAccessProtocols protocols)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature(SharedAccessFilePolicy policy, SharedAccessFileHeaders headers, String groupPolicyIdentifier, IPRange ipRange, SharedAccessProtocols protocols)"
  overload: "com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns a shared access signature for the file using the specified group policy identifier and shared access file headers. Note this does not contain the leading \"?\"."
  syntax:
    content: "public String generateSharedAccessSignature(SharedAccessFilePolicy policy, SharedAccessFileHeaders headers, String groupPolicyIdentifier, IPRange ipRange, SharedAccessProtocols protocols)"
    parameters:
    - id: "policy"
      type: "com.microsoft.azure.storage.file.SharedAccessFilePolicy"
      description: "A <code><xref uid=\"com.microsoft.azure.storage.file.SharedAccessFilePolicy\" data-throw-if-not-resolved=\"false\">SharedAccessFilePolicy</xref></code> object that represents the access policy for the shared\n            access signature."
    - id: "headers"
      type: "com.microsoft.azure.storage.file.SharedAccessFileHeaders"
      description: "A <code><xref uid=\"com.microsoft.azure.storage.file.SharedAccessFileHeaders\" data-throw-if-not-resolved=\"false\">SharedAccessFileHeaders</xref></code> object that represents the optional header values to\n            set for a file accessed with this shared access signature."
    - id: "groupPolicyIdentifier"
      type: "java.lang.String"
      description: "A <code>String</code> that represents the share-level access policy."
    - id: "ipRange"
      type: "com.microsoft.azure.storage.IPRange"
      description: "A <xref uid=\"com.microsoft.azure.storage.IPRange\" data-throw-if-not-resolved=\"false\">IPRange</xref> object containing the range of allowed IP addresses."
    - id: "protocols"
      type: "com.microsoft.azure.storage.SharedAccessProtocols"
      description: "A <xref uid=\"com.microsoft.azure.storage.SharedAccessProtocols\" data-throw-if-not-resolved=\"false\">SharedAccessProtocols</xref> representing the allowed Internet protocols."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> that represents the shared access signature."
  exceptions:
  - type: "java.security.InvalidKeyException"
    description: "If the credentials are invalid."
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If the credentials are invalid."
- uid: "com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature(com.microsoft.azure.storage.file.SharedAccessFilePolicy,java.lang.String)"
  id: "generateSharedAccessSignature(com.microsoft.azure.storage.file.SharedAccessFilePolicy,java.lang.String)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "generateSharedAccessSignature(SharedAccessFilePolicy policy, String groupPolicyIdentifier)"
  nameWithType: "CloudFile.generateSharedAccessSignature(SharedAccessFilePolicy policy, String groupPolicyIdentifier)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature(SharedAccessFilePolicy policy, String groupPolicyIdentifier)"
  overload: "com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns a shared access signature for the file using the specified group policy identifier and shared access file headers. Note this does not contain the leading \"?\"."
  syntax:
    content: "public String generateSharedAccessSignature(SharedAccessFilePolicy policy, String groupPolicyIdentifier)"
    parameters:
    - id: "policy"
      type: "com.microsoft.azure.storage.file.SharedAccessFilePolicy"
      description: "A <code><xref uid=\"com.microsoft.azure.storage.file.SharedAccessFilePolicy\" data-throw-if-not-resolved=\"false\">SharedAccessFilePolicy</xref></code> object that represents the access policy for the shared\n            access signature."
    - id: "groupPolicyIdentifier"
      type: "java.lang.String"
      description: "A <code>String</code> that represents the share-level access policy."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> that represents the shared access signature."
  exceptions:
  - type: "java.security.InvalidKeyException"
    description: "If the credentials are invalid."
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If the credentials are invalid."
- uid: "com.microsoft.azure.storage.file.CloudFile.getCanonicalName()"
  id: "getCanonicalName()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "getCanonicalName()"
  nameWithType: "CloudFile.getCanonicalName()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getCanonicalName()"
  overload: "com.microsoft.azure.storage.file.CloudFile.getCanonicalName*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the canonical name of the file in the format of */<service-name>/<account-name>/<share-name>/<file-name>*.\n\nThis format is used for Shared Access operations."
  syntax:
    content: " String getCanonicalName()"
    return:
      type: "java.lang.String"
      description: "The canonical name in the format of <i>/&lt;service-name&gt;/&lt;account-name&gt;\n         /&lt;share-name&gt;/&lt;file-name&gt;</i>."
- uid: "com.microsoft.azure.storage.file.CloudFile.getCopyState()"
  id: "getCopyState()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "getCopyState()"
  nameWithType: "CloudFile.getCopyState()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getCopyState()"
  overload: "com.microsoft.azure.storage.file.CloudFile.getCopyState*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the Azure File's copy state."
  syntax:
    content: "public CopyState getCopyState()"
    return:
      type: "com.microsoft.azure.storage.file.CopyState"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.CopyState\" data-throw-if-not-resolved=\"false\">CopyState</xref> object that represents the copy state of the file."
- uid: "com.microsoft.azure.storage.file.CloudFile.getMetadata()"
  id: "getMetadata()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "getMetadata()"
  nameWithType: "CloudFile.getMetadata()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getMetadata()"
  overload: "com.microsoft.azure.storage.file.CloudFile.getMetadata*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the metadata for the file."
  syntax:
    content: "public final HashMap<String,String> getMetadata()"
    return:
      type: "java.util.HashMap<java.lang.String,java.lang.String>"
      description: "A <code>java.util.HashMap</code> object that represents the metadata for the file."
- uid: "com.microsoft.azure.storage.file.CloudFile.getName()"
  id: "getName()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "getName()"
  nameWithType: "CloudFile.getName()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getName()"
  overload: "com.microsoft.azure.storage.file.CloudFile.getName*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the name of the file."
  syntax:
    content: "public final String getName()"
    return:
      type: "java.lang.String"
      description: "A <code>String</code> that represents the name of the file."
- uid: "com.microsoft.azure.storage.file.CloudFile.getParent()"
  id: "getParent()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "getParent()"
  nameWithType: "CloudFile.getParent()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getParent()"
  overload: "com.microsoft.azure.storage.file.CloudFile.getParent*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the file item's parent."
  syntax:
    content: "public final CloudFileDirectory getParent()"
    return:
      type: "com.microsoft.azure.storage.file.CloudFileDirectory"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.CloudFileDirectory\" data-throw-if-not-resolved=\"false\">CloudFileDirectory</xref> object that represents the parent directory for the file."
  exceptions:
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.getParentNameFromURI(com.microsoft.azure.storage.StorageUri,com.microsoft.azure.storage.file.CloudFileShare)"
  id: "getParentNameFromURI(com.microsoft.azure.storage.StorageUri,com.microsoft.azure.storage.file.CloudFileShare)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "getParentNameFromURI(StorageUri resourceAddress, CloudFileShare share)"
  nameWithType: "CloudFile.getParentNameFromURI(StorageUri resourceAddress, CloudFileShare share)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getParentNameFromURI(StorageUri resourceAddress, CloudFileShare share)"
  overload: "com.microsoft.azure.storage.file.CloudFile.getParentNameFromURI*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Retrieves the parent name for a file URI."
  syntax:
    content: "protected static String getParentNameFromURI(StorageUri resourceAddress, CloudFileShare share)"
    parameters:
    - id: "resourceAddress"
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> object which represents the resource URI."
    - id: "share"
      type: "com.microsoft.azure.storage.file.CloudFileShare"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.CloudFileShare\" data-throw-if-not-resolved=\"false\">CloudFileShare</xref> object which represents the file share."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the parent address for a file URI."
  exceptions:
  - type: "java.net.URISyntaxException"
- uid: "com.microsoft.azure.storage.file.CloudFile.getProperties()"
  id: "getProperties()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "getProperties()"
  nameWithType: "CloudFile.getProperties()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getProperties()"
  overload: "com.microsoft.azure.storage.file.CloudFile.getProperties*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the file's properties."
  syntax:
    content: "public final FileProperties getProperties()"
    return:
      type: "com.microsoft.azure.storage.file.FileProperties"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileProperties\" data-throw-if-not-resolved=\"false\">FileProperties</xref> object that represents the properties of the file."
- uid: "com.microsoft.azure.storage.file.CloudFile.getServiceClient()"
  id: "getServiceClient()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "getServiceClient()"
  nameWithType: "CloudFile.getServiceClient()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getServiceClient()"
  overload: "com.microsoft.azure.storage.file.CloudFile.getServiceClient*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the file service client associated with the file."
  syntax:
    content: "public final CloudFileClient getServiceClient()"
    return:
      type: "com.microsoft.azure.storage.file.CloudFileClient"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref> object that represents the client."
- uid: "com.microsoft.azure.storage.file.CloudFile.getShare()"
  id: "getShare()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "getShare()"
  nameWithType: "CloudFile.getShare()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getShare()"
  overload: "com.microsoft.azure.storage.file.CloudFile.getShare*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the file's share."
  syntax:
    content: "public final CloudFileShare getShare()"
    return:
      type: "com.microsoft.azure.storage.file.CloudFileShare"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.CloudFileShare\" data-throw-if-not-resolved=\"false\">CloudFileShare</xref> object that represents the share of the file."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.getStorageUri()"
  id: "getStorageUri()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "getStorageUri()"
  nameWithType: "CloudFile.getStorageUri()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getStorageUri()"
  overload: "com.microsoft.azure.storage.file.CloudFile.getStorageUri*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the list of URIs for all locations."
  syntax:
    content: "public final StorageUri getStorageUri()"
    return:
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> that represents the list of URIs for all locations."
- uid: "com.microsoft.azure.storage.file.CloudFile.getStreamMinimumReadSizeInBytes()"
  id: "getStreamMinimumReadSizeInBytes()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "getStreamMinimumReadSizeInBytes()"
  nameWithType: "CloudFile.getStreamMinimumReadSizeInBytes()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getStreamMinimumReadSizeInBytes()"
  overload: "com.microsoft.azure.storage.file.CloudFile.getStreamMinimumReadSizeInBytes*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the minimum read size when using a <xref uid=\"com.microsoft.azure.storage.file.FileInputStream\" data-throw-if-not-resolved=\"false\">FileInputStream</xref>."
  syntax:
    content: "public final int getStreamMinimumReadSizeInBytes()"
    return:
      type: "int"
      description: "A <code>int</code> which represents the minimum read size, in bytes, when using a <xref uid=\"com.microsoft.azure.storage.file.FileInputStream\" data-throw-if-not-resolved=\"false\">FileInputStream</xref>\n         object."
- uid: "com.microsoft.azure.storage.file.CloudFile.getStreamWriteSizeInBytes()"
  id: "getStreamWriteSizeInBytes()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "getStreamWriteSizeInBytes()"
  nameWithType: "CloudFile.getStreamWriteSizeInBytes()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getStreamWriteSizeInBytes()"
  overload: "com.microsoft.azure.storage.file.CloudFile.getStreamWriteSizeInBytes*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Gets the number of bytes to buffer when writing to a <xref uid=\"com.microsoft.azure.storage.file.FileOutputStream\" data-throw-if-not-resolved=\"false\">FileOutputStream</xref>."
  syntax:
    content: "public final int getStreamWriteSizeInBytes()"
    return:
      type: "int"
      description: "A <code>int</code> which represents the number of bytes to buffer."
- uid: "com.microsoft.azure.storage.file.CloudFile.getTransformedAddress(com.microsoft.azure.storage.OperationContext)"
  id: "getTransformedAddress(com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "getTransformedAddress(OperationContext opContext)"
  nameWithType: "CloudFile.getTransformedAddress(OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getTransformedAddress(OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.getTransformedAddress*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the transformed URI for the resource if the given credentials require transformation."
  syntax:
    content: "protected final StorageUri getTransformedAddress(OperationContext opContext)"
    parameters:
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> object that represents the transformed URI."
  exceptions:
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.getUri()"
  id: "getUri()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "getUri()"
  nameWithType: "CloudFile.getUri()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getUri()"
  overload: "com.microsoft.azure.storage.file.CloudFile.getUri*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the URI for this file."
  syntax:
    content: "public final URI getUri()"
    return:
      type: "java.net.URI"
      description: "A <code>java.net.URI</code> object that represents the URI for the file."
- uid: "com.microsoft.azure.storage.file.CloudFile.listHandles()"
  id: "listHandles()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "listHandles()"
  nameWithType: "CloudFile.listHandles()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.listHandles()"
  overload: "com.microsoft.azure.storage.file.CloudFile.listHandles*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Gets the SMB handles open on this file."
  syntax:
    content: "public Iterable<FileHandle> listHandles()"
    return:
      type: "java.lang.Iterable<com.microsoft.azure.storage.file.FileHandle>"
      description: "An <code>Iterable</code> of the handles that will lazily request new segments."
- uid: "com.microsoft.azure.storage.file.CloudFile.listHandles(com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "listHandles(com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "listHandles(FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.listHandles(FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.listHandles(FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.listHandles*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Gets the SMB handles open on this file."
  syntax:
    content: "public Iterable<FileHandle> listHandles(FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "java.lang.Iterable<com.microsoft.azure.storage.file.FileHandle>"
      description: "An <code>Iterable</code> of the handles that will lazily request new segments."
- uid: "com.microsoft.azure.storage.file.CloudFile.listHandlesSegmented()"
  id: "listHandlesSegmented()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "listHandlesSegmented()"
  nameWithType: "CloudFile.listHandlesSegmented()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.listHandlesSegmented()"
  overload: "com.microsoft.azure.storage.file.CloudFile.listHandlesSegmented*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Gets the SMB handles open on this file."
  syntax:
    content: "public ResultSegment<FileHandle> listHandlesSegmented()"
    return:
      type: "com.microsoft.azure.storage.ResultSegment<com.microsoft.azure.storage.file.FileHandle>"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultSegment\" data-throw-if-not-resolved=\"false\">ResultSegment</xref> object that contains a segment of the enumerable collection of\n         <xref uid=\"com.microsoft.azure.storage.file.ListFileItem\" data-throw-if-not-resolved=\"false\">ListFileItem</xref> objects that represent the files and directories."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.file.CloudFile.listHandlesSegmented(java.lang.Integer,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "listHandlesSegmented(java.lang.Integer,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "listHandlesSegmented(Integer maxResults, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.listHandlesSegmented(Integer maxResults, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.listHandlesSegmented(Integer maxResults, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.listHandlesSegmented*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Gets the SMB handles open on this file."
  syntax:
    content: "public ResultSegment<FileHandle> listHandlesSegmented(Integer maxResults, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "maxResults"
      type: "java.lang.Integer"
      description: "The maximum number of results to retrieve.  If <code>null</code> or greater\n            than 5000, the server will return up to 5,000 items.  Must be at least 1."
    - id: "continuationToken"
      type: "com.microsoft.azure.storage.ResultContinuation"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultContinuation\" data-throw-if-not-resolved=\"false\">ResultContinuation</xref> object that represents a continuation token\n            returned by a previous listing operation."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "com.microsoft.azure.storage.ResultSegment<com.microsoft.azure.storage.file.FileHandle>"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultSegment\" data-throw-if-not-resolved=\"false\">ResultSegment</xref> object that contains a segment of the enumerable collection of\n         <xref uid=\"com.microsoft.azure.storage.file.ListFileItem\" data-throw-if-not-resolved=\"false\">ListFileItem</xref> objects that represent the files and directories."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.file.CloudFile.openRead()"
  id: "openRead()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "openRead()"
  nameWithType: "CloudFile.openRead()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.openRead()"
  overload: "com.microsoft.azure.storage.file.CloudFile.openRead*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Opens a file input stream to download the file.\n\nUse <xref uid=\"com.microsoft.azure.storage.file.CloudFile.setStreamMinimumReadSizeInBytes(int)\" data-throw-if-not-resolved=\"false\">CloudFile#setStreamMinimumReadSizeInBytes(int)</xref> to configure the read size."
  syntax:
    content: "public final FileInputStream openRead()"
    return:
      type: "com.microsoft.azure.storage.file.FileInputStream"
      description: "An <code>InputStream</code> object that represents the stream to use for reading from the file."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.openRead(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "openRead(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "openRead(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.openRead(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.openRead(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.openRead*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Opens a file input stream to download the file using the specified request options and operation context.\n\nUse <xref uid=\"com.microsoft.azure.storage.file.CloudFile.setStreamMinimumReadSizeInBytes(int)\" data-throw-if-not-resolved=\"false\">#setStreamMinimumReadSizeInBytes(int)</xref> to configure the read size."
  syntax:
    content: "public final FileInputStream openRead(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "com.microsoft.azure.storage.file.FileInputStream"
      description: "An <code>InputStream</code> object that represents the stream to use for reading from the file."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.openWriteExisting()"
  id: "openWriteExisting()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "openWriteExisting()"
  nameWithType: "CloudFile.openWriteExisting()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.openWriteExisting()"
  overload: "com.microsoft.azure.storage.file.CloudFile.openWriteExisting*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Opens an output stream object to write data to the file. The file must already exist and any existing data may be overwritten."
  syntax:
    content: "public FileOutputStream openWriteExisting()"
    return:
      type: "com.microsoft.azure.storage.file.FileOutputStream"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileOutputStream\" data-throw-if-not-resolved=\"false\">FileOutputStream</xref> object used to write data to the file."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.openWriteExisting(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "openWriteExisting(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "openWriteExisting(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.openWriteExisting(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.openWriteExisting(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.openWriteExisting*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Opens an output stream object to write data to the file, using specified request options and operation context. The file must already exist and any existing data may be overwritten."
  syntax:
    content: "public FileOutputStream openWriteExisting(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "com.microsoft.azure.storage.file.FileOutputStream"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileOutputStream\" data-throw-if-not-resolved=\"false\">FileOutputStream</xref> object used to write data to the file."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.openWriteNew(long)"
  id: "openWriteNew(long)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "openWriteNew(long length)"
  nameWithType: "CloudFile.openWriteNew(long length)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.openWriteNew(long length)"
  overload: "com.microsoft.azure.storage.file.CloudFile.openWriteNew*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Opens an output stream object to write data to the file. The file does not yet exist and will be created with the length specified. If the file already exists on the service, it will be overwritten.\n\nTo avoid overwriting and instead throw an error, please use the <xref uid=\"com.microsoft.azure.storage.file.CloudFile.openWriteNew(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)\" data-throw-if-not-resolved=\"false\">#openWriteNew(long, AccessCondition, FileRequestOptions, OperationContext)</xref> overload with the appropriate <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref>."
  syntax:
    content: "public FileOutputStream openWriteNew(long length)"
    parameters:
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the stream to create."
    return:
      type: "com.microsoft.azure.storage.file.FileOutputStream"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileOutputStream\" data-throw-if-not-resolved=\"false\">FileOutputStream</xref> object used to write data to the file."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.openWriteNew(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "openWriteNew(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "openWriteNew(long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.openWriteNew(long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.openWriteNew(long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.openWriteNew*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Opens an output stream object to write data to the file, using the specified lease ID, request options and operation context. The file does not need to yet exist and will be created with the length specified. If the file already exists on the service, it will be overwritten.\n\nTo avoid overwriting and instead throw an error, please pass in an <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> generated using <xref uid=\"com.microsoft.azure.storage.AccessCondition.generateIfNotExistsCondition()\" data-throw-if-not-resolved=\"false\">AccessCondition#generateIfNotExistsCondition()</xref>."
  syntax:
    content: "public FileOutputStream openWriteNew(long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the stream to create."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "com.microsoft.azure.storage.file.FileOutputStream"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileOutputStream\" data-throw-if-not-resolved=\"false\">FileOutputStream</xref> object used to write data to the file."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.parent"
  id: "parent"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "parent"
  nameWithType: "CloudFile.parent"
  fullName: "com.microsoft.azure.storage.file.CloudFile.parent"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "Represents the file's directory reference."
  syntax:
    content: "protected CloudFileDirectory parent"
    return:
      type: "com.microsoft.azure.storage.file.CloudFileDirectory"
- uid: "com.microsoft.azure.storage.file.CloudFile.putRangeFromURL(long,long,java.net.URI,long)"
  id: "putRangeFromURL(long,long,java.net.URI,long)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "putRangeFromURL(long destOffset, long length, URI sourceUri, long sourceOffset)"
  nameWithType: "CloudFile.putRangeFromURL(long destOffset, long length, URI sourceUri, long sourceOffset)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.putRangeFromURL(long destOffset, long length, URI sourceUri, long sourceOffset)"
  overload: "com.microsoft.azure.storage.file.CloudFile.putRangeFromURL*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads a range from one file to another file."
  syntax:
    content: "public void putRangeFromURL(long destOffset, long length, URI sourceUri, long sourceOffset)"
    parameters:
    - id: "destOffset"
      type: "long"
      description: "A <code>long</code> which represents the offset, in number of bytes, at which to begin writing the\n            data."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the data to write and read."
    - id: "sourceUri"
      type: "java.net.URI"
      description: "A <code>java.net.URI</code> object that specifies the source URI."
    - id: "sourceOffset"
      type: "long"
      description: "A <code>long</code> which represents the offset, in number of bytes, at which to begin reading the\n            data."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.putRangeFromURL(long,long,java.net.URI,long,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "putRangeFromURL(long,long,java.net.URI,long,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "putRangeFromURL(long destOffset, long length, URI sourceUri, long sourceOffset, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.putRangeFromURL(long destOffset, long length, URI sourceUri, long sourceOffset, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.putRangeFromURL(long destOffset, long length, URI sourceUri, long sourceOffset, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.putRangeFromURL*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads a range from one file to another file using the specified lease ID, request options, and operation context"
  syntax:
    content: "public void putRangeFromURL(long destOffset, long length, URI sourceUri, long sourceOffset, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "destOffset"
      type: "long"
      description: "A <code>long</code> which represents the offset, in number of bytes, at which to begin writing the\n            data."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the data to write and read."
    - id: "sourceUri"
      type: "java.net.URI"
      description: "A <code>java.net.URI</code> object that specifies the source URI."
    - id: "sourceOffset"
      type: "long"
      description: "A <code>long</code> which represents the offset, in number of bytes, at which to begin reading the\n            data."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.resize(long)"
  id: "resize(long)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "resize(long size)"
  nameWithType: "CloudFile.resize(long size)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.resize(long size)"
  overload: "com.microsoft.azure.storage.file.CloudFile.resize*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Resizes the file to the specified size."
  syntax:
    content: "public void resize(long size)"
    parameters:
    - id: "size"
      type: "long"
      description: "A <code>long</code> which represents the size of the file, in bytes."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.resize(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "resize(long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "resize(long size, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.resize(long size, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.resize(long size, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.resize*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Resizes the file to the specified size."
  syntax:
    content: "public void resize(long size, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "size"
      type: "long"
      description: "A <code>long</code> which represents the size of the file, in bytes."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.setFilePermission(java.lang.String)"
  id: "setFilePermission(java.lang.String)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "setFilePermission(String filePermission)"
  nameWithType: "CloudFile.setFilePermission(String filePermission)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.setFilePermission(String filePermission)"
  overload: "com.microsoft.azure.storage.file.CloudFile.setFilePermission*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Sets the file's file permission to set"
  syntax:
    content: "public void setFilePermission(String filePermission)"
    parameters:
    - id: "filePermission"
      type: "java.lang.String"
      description: "A <code>String</code> that represents the file's file permission to set."
- uid: "com.microsoft.azure.storage.file.CloudFile.setMetadata(java.util.HashMap<java.lang.String,java.lang.String>)"
  id: "setMetadata(java.util.HashMap<java.lang.String,java.lang.String>)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "setMetadata(HashMap<String,String> metadata)"
  nameWithType: "CloudFile.setMetadata(HashMap<String,String> metadata)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.setMetadata(HashMap<String,String> metadata)"
  overload: "com.microsoft.azure.storage.file.CloudFile.setMetadata*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Sets the metadata for the file."
  syntax:
    content: "public final void setMetadata(HashMap<String,String> metadata)"
    parameters:
    - id: "metadata"
      type: "java.util.HashMap<java.lang.String,java.lang.String>"
      description: "A <code>java.util.HashMap</code> object that contains the metadata being assigned to the file."
- uid: "com.microsoft.azure.storage.file.CloudFile.setProperties(com.microsoft.azure.storage.file.FileProperties)"
  id: "setProperties(com.microsoft.azure.storage.file.FileProperties)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "setProperties(FileProperties properties)"
  nameWithType: "CloudFile.setProperties(FileProperties properties)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.setProperties(FileProperties properties)"
  overload: "com.microsoft.azure.storage.file.CloudFile.setProperties*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Sets the properties for the file."
  syntax:
    content: "protected final void setProperties(FileProperties properties)"
    parameters:
    - id: "properties"
      type: "com.microsoft.azure.storage.file.FileProperties"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileProperties\" data-throw-if-not-resolved=\"false\">FileProperties</xref> object that represents the properties being assigned to the file."
- uid: "com.microsoft.azure.storage.file.CloudFile.setShare(com.microsoft.azure.storage.file.CloudFileShare)"
  id: "setShare(com.microsoft.azure.storage.file.CloudFileShare)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "setShare(CloudFileShare share)"
  nameWithType: "CloudFile.setShare(CloudFileShare share)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.setShare(CloudFileShare share)"
  overload: "com.microsoft.azure.storage.file.CloudFile.setShare*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Sets the share for the file."
  syntax:
    content: "protected final void setShare(CloudFileShare share)"
    parameters:
    - id: "share"
      type: "com.microsoft.azure.storage.file.CloudFileShare"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.CloudFileShare\" data-throw-if-not-resolved=\"false\">CloudFileShare</xref> object that represents the share being assigned to the file."
- uid: "com.microsoft.azure.storage.file.CloudFile.setStorageUri(com.microsoft.azure.storage.StorageUri)"
  id: "setStorageUri(com.microsoft.azure.storage.StorageUri)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "setStorageUri(StorageUri storageUri)"
  nameWithType: "CloudFile.setStorageUri(StorageUri storageUri)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.setStorageUri(StorageUri storageUri)"
  overload: "com.microsoft.azure.storage.file.CloudFile.setStorageUri*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Sets the list of URIs for all locations."
  syntax:
    content: "protected void setStorageUri(StorageUri storageUri)"
    parameters:
    - id: "storageUri"
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> that represents the list of URIs for all locations."
- uid: "com.microsoft.azure.storage.file.CloudFile.setStreamMinimumReadSizeInBytes(int)"
  id: "setStreamMinimumReadSizeInBytes(int)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "setStreamMinimumReadSizeInBytes(int minimumReadSize)"
  nameWithType: "CloudFile.setStreamMinimumReadSizeInBytes(int minimumReadSize)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.setStreamMinimumReadSizeInBytes(int minimumReadSize)"
  overload: "com.microsoft.azure.storage.file.CloudFile.setStreamMinimumReadSizeInBytes*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Sets the minimum read size when using a <xref uid=\"com.microsoft.azure.storage.file.FileInputStream\" data-throw-if-not-resolved=\"false\">FileInputStream</xref>."
  syntax:
    content: "public void setStreamMinimumReadSizeInBytes(int minimumReadSize)"
    parameters:
    - id: "minimumReadSize"
      type: "int"
      description: "An <code>int</code> that represents the minimum number of bytes to buffer when reading from\n            a file while using a <xref uid=\"com.microsoft.azure.storage.file.FileInputStream\" data-throw-if-not-resolved=\"false\">FileInputStream</xref> object. Must be greater than or equal to 16 KB."
- uid: "com.microsoft.azure.storage.file.CloudFile.setStreamWriteSizeInBytes(int)"
  id: "setStreamWriteSizeInBytes(int)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "setStreamWriteSizeInBytes(int streamWriteSizeInBytes)"
  nameWithType: "CloudFile.setStreamWriteSizeInBytes(int streamWriteSizeInBytes)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.setStreamWriteSizeInBytes(int streamWriteSizeInBytes)"
  overload: "com.microsoft.azure.storage.file.CloudFile.setStreamWriteSizeInBytes*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Sets the number of bytes to buffer when writing to a <xref uid=\"com.microsoft.azure.storage.file.FileOutputStream\" data-throw-if-not-resolved=\"false\">FileOutputStream</xref>."
  syntax:
    content: "public void setStreamWriteSizeInBytes(int streamWriteSizeInBytes)"
    parameters:
    - id: "streamWriteSizeInBytes"
      type: "int"
      description: "An <code>int</code> which represents the number of bytes to buffer while using a\n            <xref uid=\"com.microsoft.azure.storage.file.FileOutputStream\" data-throw-if-not-resolved=\"false\">FileOutputStream</xref> object, ranging from 512 bytes to 4 MB, inclusive."
- uid: "com.microsoft.azure.storage.file.CloudFile.startCopy(com.microsoft.azure.storage.blob.CloudBlob)"
  id: "startCopy(com.microsoft.azure.storage.blob.CloudBlob)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "startCopy(CloudBlob sourceBlob)"
  nameWithType: "CloudFile.startCopy(CloudBlob sourceBlob)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.startCopy(CloudBlob sourceBlob)"
  overload: "com.microsoft.azure.storage.file.CloudFile.startCopy*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Requests the service to start copying a blob's contents, properties, and metadata to a new file."
  syntax:
    content: "public final String startCopy(CloudBlob sourceBlob)"
    parameters:
    - id: "sourceBlob"
      type: "com.microsoft.azure.storage.blob.CloudBlob"
      description: "A <code>CloudBlob</code> object that represents the source blob to copy."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the copy ID associated with the copy operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.startCopy(com.microsoft.azure.storage.blob.CloudBlob,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "startCopy(com.microsoft.azure.storage.blob.CloudBlob,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "startCopy(CloudBlob sourceBlob, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.startCopy(CloudBlob sourceBlob, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.startCopy(CloudBlob sourceBlob, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.startCopy*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Requests the service to start copying a file's contents, properties, and metadata to a new file, using the specified access conditions, lease ID, request options, and operation context."
  syntax:
    content: "public final String startCopy(CloudBlob sourceBlob, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "sourceBlob"
      type: "com.microsoft.azure.storage.blob.CloudBlob"
      description: "A <code>CloudBlob</code> object that represents the source blob to copy."
    - id: "sourceAccessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the source blob."
    - id: "destinationAccessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the destination file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request.\n            Specifying <code>null</code> will use the default request options from the associated\n            service client (<xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation.\n            This object is used to track requests to the storage service, and to provide additional\n            runtime information about the operation."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the copy ID associated with the copy operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.startCopy(com.microsoft.azure.storage.file.CloudFile)"
  id: "startCopy(com.microsoft.azure.storage.file.CloudFile)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "startCopy(CloudFile sourceFile)"
  nameWithType: "CloudFile.startCopy(CloudFile sourceFile)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.startCopy(CloudFile sourceFile)"
  overload: "com.microsoft.azure.storage.file.CloudFile.startCopy*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Requests the service to start copying an Azure File's contents, properties, and metadata to a new Azure File."
  syntax:
    content: "public final String startCopy(CloudFile sourceFile)"
    parameters:
    - id: "sourceFile"
      type: "com.microsoft.azure.storage.file.CloudFile"
      description: "A <code>CloudFile</code> object that represents the source Azure File to copy."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the copy ID associated with the copy operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.startCopy(com.microsoft.azure.storage.file.CloudFile,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "startCopy(com.microsoft.azure.storage.file.CloudFile,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "startCopy(CloudFile sourceFile, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.startCopy(CloudFile sourceFile, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.startCopy(CloudFile sourceFile, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.startCopy*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Requests the service to start copying an Azure File's contents, properties, and metadata to a new Azure File, using the specified access conditions, lease ID, request options, and operation context."
  syntax:
    content: "public final String startCopy(CloudFile sourceFile, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "sourceFile"
      type: "com.microsoft.azure.storage.file.CloudFile"
      description: "A <code>CloudFile</code> object that represents the source file to copy."
    - id: "sourceAccessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the source."
    - id: "destinationAccessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the destination."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request.\n            Specifying <code>null</code> will use the default request options from the associated\n            service client (<xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation.\n            This object is used to track requests to the storage service, and to provide additional\n            runtime information about the operation."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the copy ID associated with the copy operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.startCopy(java.net.URI)"
  id: "startCopy(java.net.URI)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "startCopy(URI source)"
  nameWithType: "CloudFile.startCopy(URI source)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.startCopy(URI source)"
  overload: "com.microsoft.azure.storage.file.CloudFile.startCopy*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Requests the service to start copying a URI's contents, properties, and metadata to a new Azure File."
  syntax:
    content: "public final String startCopy(URI source)"
    parameters:
    - id: "source"
      type: "java.net.URI"
      description: "The source's <code>java.net.URI</code>."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the copy ID associated with the copy operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.startCopy(java.net.URI,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "startCopy(java.net.URI,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "startCopy(URI source, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.startCopy(URI source, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.startCopy(URI source, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.startCopy*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Requests the service to start copying a URI's contents, properties, and metadata to a new Azure File, using the specified access conditions, lease ID, request options, and operation context."
  syntax:
    content: "public final String startCopy(URI source, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "source"
      type: "java.net.URI"
      description: "The source's <code>java.net.URI</code>."
    - id: "sourceAccessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the source."
    - id: "destinationAccessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the destination."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request.\n            Specifying <code>null</code> will use the default request options from the associated\n            service client (<xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation.\n            This object is used to track requests to the storage service, and to provide additional\n            runtime information about the operation."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the copy ID associated with the copy operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.streamMinimumReadSizeInBytes"
  id: "streamMinimumReadSizeInBytes"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "streamMinimumReadSizeInBytes"
  nameWithType: "CloudFile.streamMinimumReadSizeInBytes"
  fullName: "com.microsoft.azure.storage.file.CloudFile.streamMinimumReadSizeInBytes"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "Holds the minimum read size when using a <xref uid=\"com.microsoft.azure.storage.file.FileInputStream\" data-throw-if-not-resolved=\"false\">FileInputStream</xref>."
  syntax:
    content: "protected int streamMinimumReadSizeInBytes"
    return:
      type: "int"
- uid: "com.microsoft.azure.storage.file.CloudFile.streamWriteSizeInBytes"
  id: "streamWriteSizeInBytes"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "streamWriteSizeInBytes"
  nameWithType: "CloudFile.streamWriteSizeInBytes"
  fullName: "com.microsoft.azure.storage.file.CloudFile.streamWriteSizeInBytes"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "Holds the number of bytes to buffer when writing to a <xref uid=\"com.microsoft.azure.storage.file.FileOutputStream\" data-throw-if-not-resolved=\"false\">FileOutputStream</xref>."
  syntax:
    content: "protected int streamWriteSizeInBytes"
    return:
      type: "int"
- uid: "com.microsoft.azure.storage.file.CloudFile.updateEtagAndLastModifiedFromResponse(java.net.HttpURLConnection)"
  id: "updateEtagAndLastModifiedFromResponse(java.net.HttpURLConnection)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "updateEtagAndLastModifiedFromResponse(HttpURLConnection request)"
  nameWithType: "CloudFile.updateEtagAndLastModifiedFromResponse(HttpURLConnection request)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.updateEtagAndLastModifiedFromResponse(HttpURLConnection request)"
  overload: "com.microsoft.azure.storage.file.CloudFile.updateEtagAndLastModifiedFromResponse*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  syntax:
    content: "protected void updateEtagAndLastModifiedFromResponse(HttpURLConnection request)"
    parameters:
    - id: "request"
      type: "java.net.HttpURLConnection"
- uid: "com.microsoft.azure.storage.file.CloudFile.updateLengthFromResponse(java.net.HttpURLConnection)"
  id: "updateLengthFromResponse(java.net.HttpURLConnection)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "updateLengthFromResponse(HttpURLConnection request)"
  nameWithType: "CloudFile.updateLengthFromResponse(HttpURLConnection request)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.updateLengthFromResponse(HttpURLConnection request)"
  overload: "com.microsoft.azure.storage.file.CloudFile.updateLengthFromResponse*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  syntax:
    content: "protected void updateLengthFromResponse(HttpURLConnection request)"
    parameters:
    - id: "request"
      type: "java.net.HttpURLConnection"
- uid: "com.microsoft.azure.storage.file.CloudFile.upload(java.io.InputStream,long)"
  id: "upload(java.io.InputStream,long)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "upload(InputStream sourceStream, long length)"
  nameWithType: "CloudFile.upload(InputStream sourceStream, long length)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.upload(InputStream sourceStream, long length)"
  overload: "com.microsoft.azure.storage.file.CloudFile.upload*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads the source stream data to the file. If the file already exists on the service, it will be overwritten."
  syntax:
    content: "public void upload(InputStream sourceStream, long length)"
    parameters:
    - id: "sourceStream"
      type: "java.io.InputStream"
      description: "An <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> object to read from."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the stream data. Must be non zero."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If an I/O exception occurred."
  - type: "java.io.IOException"
    description: "If an I/O exception occurred."
  - type: "java.net.URISyntaxException"
    description: "If an I/O exception occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.upload(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "upload(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "upload(InputStream sourceStream, long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.upload(InputStream sourceStream, long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.upload(InputStream sourceStream, long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.upload*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads the source stream data to the file using the specified access condition, request options, and operation context. If the file already exists on the service, it will be overwritten."
  syntax:
    content: "public void upload(InputStream sourceStream, long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "sourceStream"
      type: "java.io.InputStream"
      description: "An <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> object to read from."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the stream data. This must be greater than\n            or equal to zero."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If an I/O exception occurred."
  - type: "java.io.IOException"
    description: "If an I/O exception occurred."
  - type: "java.net.URISyntaxException"
    description: "If an I/O exception occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadFromByteArray(byte[],int,int)"
  id: "uploadFromByteArray(byte[],int,int)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "uploadFromByteArray(byte[] buffer, int offset, int length)"
  nameWithType: "CloudFile.uploadFromByteArray(byte[] buffer, int offset, int length)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadFromByteArray(byte[] buffer, int offset, int length)"
  overload: "com.microsoft.azure.storage.file.CloudFile.uploadFromByteArray*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads a file from data in a byte array. If the file already exists on the service, it will be overwritten."
  syntax:
    content: "public void uploadFromByteArray(byte[] buffer, int offset, int length)"
    parameters:
    - id: "buffer"
      type: "byte[]"
      description: "A <code>byte</code> array which represents the data to write to the file."
    - id: "offset"
      type: "int"
      description: "A <code>int</code> which represents the offset of the byte array from which to start the data upload."
    - id: "length"
      type: "int"
      description: "An <code>int</code> which represents the number of bytes to upload from the input buffer."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadFromByteArray(byte[],int,int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "uploadFromByteArray(byte[],int,int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "uploadFromByteArray(byte[] buffer, int offset, int length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.uploadFromByteArray(byte[] buffer, int offset, int length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadFromByteArray(byte[] buffer, int offset, int length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.uploadFromByteArray*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads a file from data in a byte array. If the file already exists on the service, it will be overwritten."
  syntax:
    content: "public void uploadFromByteArray(byte[] buffer, int offset, int length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "buffer"
      type: "byte[]"
      description: "A <code>byte</code> array which represents the data to write to the file."
    - id: "offset"
      type: "int"
      description: "A <code>int</code> which represents the offset of the byte array from which to start the data upload."
    - id: "length"
      type: "int"
      description: "An <code>int</code> which represents the number of bytes to upload from the input buffer."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadFromFile(java.lang.String)"
  id: "uploadFromFile(java.lang.String)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "uploadFromFile(String path)"
  nameWithType: "CloudFile.uploadFromFile(String path)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadFromFile(String path)"
  overload: "com.microsoft.azure.storage.file.CloudFile.uploadFromFile*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads a local file. If the file already exists on the service, it will be overwritten."
  syntax:
    content: "public void uploadFromFile(String path)"
    parameters:
    - id: "path"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the path to the file to be uploaded."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadFromFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "uploadFromFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "uploadFromFile(String path, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.uploadFromFile(String path, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadFromFile(String path, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.uploadFromFile*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads a file from a local file. If the file already exists on the service, it will be overwritten."
  syntax:
    content: "public void uploadFromFile(String path, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "path"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the path to the file to be uploaded."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadMetadata()"
  id: "uploadMetadata()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "uploadMetadata()"
  nameWithType: "CloudFile.uploadMetadata()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadMetadata()"
  overload: "com.microsoft.azure.storage.file.CloudFile.uploadMetadata*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads the file's metadata to the storage service.\n\nUse <xref uid=\"com.microsoft.azure.storage.file.CloudFile.downloadAttributes*\" data-throw-if-not-resolved=\"false\">CloudFile#downloadAttributes</xref> to retrieve the latest values for the file's properties and metadata from the Microsoft Azure storage service."
  syntax:
    content: "public final void uploadMetadata()"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadMetadata(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "uploadMetadata(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "uploadMetadata(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.uploadMetadata(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadMetadata(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.uploadMetadata*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads the file's metadata to the storage service using the access condition, request options, and operation context.\n\nUse <xref uid=\"com.microsoft.azure.storage.file.CloudFile.downloadAttributes*\" data-throw-if-not-resolved=\"false\">CloudFile#downloadAttributes</xref> to retrieve the latest values for the file's properties and metadata from the Microsoft Azure storage service."
  syntax:
    content: "public final void uploadMetadata(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadProperties()"
  id: "uploadProperties()"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "uploadProperties()"
  nameWithType: "CloudFile.uploadProperties()"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadProperties()"
  overload: "com.microsoft.azure.storage.file.CloudFile.uploadProperties*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads the file's properties to the storage service.\n\nUse <xref uid=\"com.microsoft.azure.storage.file.CloudFile.downloadAttributes*\" data-throw-if-not-resolved=\"false\">CloudFile#downloadAttributes</xref> to retrieve the latest values for the file's properties and metadata from the Microsoft Azure storage service."
  syntax:
    content: "public final void uploadProperties()"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadProperties(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "uploadProperties(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "uploadProperties(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.uploadProperties(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadProperties(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.uploadProperties*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads the file's properties using the access condition, request options, and operation context.\n\nUse <xref uid=\"com.microsoft.azure.storage.file.CloudFile.downloadAttributes*\" data-throw-if-not-resolved=\"false\">CloudFile#downloadAttributes</xref> to retrieve the latest values for the file's properties and metadata from the Microsoft Azure storage service."
  syntax:
    content: "public final void uploadProperties(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadRange(java.io.InputStream,long,long)"
  id: "uploadRange(java.io.InputStream,long,long)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "uploadRange(InputStream sourceStream, long offset, long length)"
  nameWithType: "CloudFile.uploadRange(InputStream sourceStream, long offset, long length)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadRange(InputStream sourceStream, long offset, long length)"
  overload: "com.microsoft.azure.storage.file.CloudFile.uploadRange*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads a range to a file."
  syntax:
    content: "public void uploadRange(InputStream sourceStream, long offset, long length)"
    parameters:
    - id: "sourceStream"
      type: "java.io.InputStream"
      description: "An <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> object which represents the input stream to write to the file."
    - id: "offset"
      type: "long"
      description: "A <code>long</code> which represents the offset, in number of bytes, at which to begin writing the\n            data."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the data to write."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If an I/O exception occurred."
  - type: "java.io.IOException"
    description: "If an I/O exception occurred."
  - type: "java.net.URISyntaxException"
    description: "If an I/O exception occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadRange(java.io.InputStream,long,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "uploadRange(java.io.InputStream,long,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "uploadRange(InputStream sourceStream, long offset, long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.uploadRange(InputStream sourceStream, long offset, long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadRange(InputStream sourceStream, long offset, long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.uploadRange*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads a range to a file using the specified lease ID, request options, and operation context."
  syntax:
    content: "public void uploadRange(InputStream sourceStream, long offset, long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "sourceStream"
      type: "java.io.InputStream"
      description: "An <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> object which represents the input stream to write to the file."
    - id: "offset"
      type: "long"
      description: "A <code>long</code> which represents the offset, in number of bytes, at which to begin writing the\n            data."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the data to write."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If an I/O exception occurred."
  - type: "java.io.IOException"
    description: "If an I/O exception occurred."
  - type: "java.net.URISyntaxException"
    description: "If an I/O exception occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadText(java.lang.String)"
  id: "uploadText(java.lang.String)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "uploadText(String content)"
  nameWithType: "CloudFile.uploadText(String content)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadText(String content)"
  overload: "com.microsoft.azure.storage.file.CloudFile.uploadText*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads a file from a string using the platform's default encoding. If the file already exists on the service, it will be overwritten."
  syntax:
    content: "public void uploadText(String content)"
    parameters:
    - id: "content"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the content that will be uploaded to the file."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadText(java.lang.String,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "uploadText(java.lang.String,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFile"
  langs:
  - "java"
  name: "uploadText(String content, String charsetName, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFile.uploadText(String content, String charsetName, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadText(String content, String charsetName, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFile.uploadText*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads a file from a string using the specified encoding. If the file already exists on the service, it will be overwritten."
  syntax:
    content: "public void uploadText(String content, String charsetName, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "content"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the content that will be uploaded to the file."
    - id: "charsetName"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the name of the charset to use to encode the content.\n            If null, the platform's default encoding is used."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the file."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
references:
- uid: "java.net.URI"
  spec.java:
  - uid: "java.net.URI"
    name: "URI"
    fullName: "java.net.URI"
- uid: "com.microsoft.azure.storage.file.CloudFile.CloudFile*"
  name: "CloudFile"
  nameWithType: "CloudFile.CloudFile"
  fullName: "com.microsoft.azure.storage.file.CloudFile.CloudFile"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.StorageUri"
  name: "StorageUri"
  nameWithType: "StorageUri"
  fullName: "com.microsoft.azure.storage.StorageUri"
- uid: "com.microsoft.azure.storage.StorageCredentials"
  name: "StorageCredentials"
  nameWithType: "StorageCredentials"
  fullName: "com.microsoft.azure.storage.StorageCredentials"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.microsoft.azure.storage.file.CloudFileShare"
  name: "CloudFileShare"
  nameWithType: "CloudFileShare"
  fullName: "com.microsoft.azure.storage.file.CloudFileShare"
- uid: "com.microsoft.azure.storage.StorageException"
  name: "StorageException"
  nameWithType: "StorageException"
  fullName: "com.microsoft.azure.storage.StorageException"
- uid: "java.net.URISyntaxException"
  spec.java:
  - uid: "java.net.URISyntaxException"
    name: "URISyntaxException"
    fullName: "java.net.URISyntaxException"
- uid: "com.microsoft.azure.storage.file.CloudFile.abortCopy*"
  name: "abortCopy"
  nameWithType: "CloudFile.abortCopy"
  fullName: "com.microsoft.azure.storage.file.CloudFile.abortCopy"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.AccessCondition"
  name: "AccessCondition"
  nameWithType: "AccessCondition"
  fullName: "com.microsoft.azure.storage.AccessCondition"
- uid: "com.microsoft.azure.storage.file.FileRequestOptions"
  name: "FileRequestOptions"
  nameWithType: "FileRequestOptions"
  fullName: "com.microsoft.azure.storage.file.FileRequestOptions"
- uid: "com.microsoft.azure.storage.OperationContext"
  name: "OperationContext"
  nameWithType: "OperationContext"
  fullName: "com.microsoft.azure.storage.OperationContext"
- uid: "com.microsoft.azure.storage.blob.CloudBlob"
  name: "CloudBlob"
  nameWithType: "CloudBlob"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob"
- uid: "com.microsoft.azure.storage.file.CloudFile.startCopy*"
  name: "startCopy"
  nameWithType: "CloudFile.startCopy"
  fullName: "com.microsoft.azure.storage.file.CloudFile.startCopy"
  package: "com.microsoft.azure.storage.file"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.microsoft.azure.storage.file.CloudFile.clearRange*"
  name: "clearRange"
  nameWithType: "CloudFile.clearRange"
  fullName: "com.microsoft.azure.storage.file.CloudFile.clearRange"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.create*"
  name: "create"
  nameWithType: "CloudFile.create"
  fullName: "com.microsoft.azure.storage.file.CloudFile.create"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.delete*"
  name: "delete"
  nameWithType: "CloudFile.delete"
  fullName: "com.microsoft.azure.storage.file.CloudFile.delete"
  package: "com.microsoft.azure.storage.file"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.microsoft.azure.storage.file.CloudFile.deleteIfExists*"
  name: "deleteIfExists"
  nameWithType: "CloudFile.deleteIfExists"
  fullName: "com.microsoft.azure.storage.file.CloudFile.deleteIfExists"
  package: "com.microsoft.azure.storage.file"
- uid: "java.io.OutputStream"
  spec.java:
  - uid: "java.io.OutputStream"
    name: "OutputStream"
    fullName: "java.io.OutputStream"
- uid: "com.microsoft.azure.storage.file.CloudFile.download*"
  name: "download"
  nameWithType: "CloudFile.download"
  fullName: "com.microsoft.azure.storage.file.CloudFile.download"
  package: "com.microsoft.azure.storage.file"
- uid: "java.lang.Long"
  spec.java:
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadRange*"
  name: "downloadRange"
  nameWithType: "CloudFile.downloadRange"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadRange"
  package: "com.microsoft.azure.storage.file"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadRangeInternal*"
  name: "downloadRangeInternal"
  nameWithType: "CloudFile.downloadRangeInternal"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadRangeInternal"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadRangeToByteArray*"
  name: "downloadRangeToByteArray"
  nameWithType: "CloudFile.downloadRangeToByteArray"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadRangeToByteArray"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadToByteArray*"
  name: "downloadToByteArray"
  nameWithType: "CloudFile.downloadToByteArray"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadToByteArray"
  package: "com.microsoft.azure.storage.file"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadToFile*"
  name: "downloadToFile"
  nameWithType: "CloudFile.downloadToFile"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadToFile"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadText*"
  name: "downloadText"
  nameWithType: "CloudFile.downloadText"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadText"
  package: "com.microsoft.azure.storage.file"
- uid: "java.util.ArrayList<com.microsoft.azure.storage.file.FileRange>"
  spec.java:
  - uid: "java.util.ArrayList"
    name: "ArrayList"
    fullName: "java.util.ArrayList"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.file.FileRange"
    name: "FileRange"
    fullName: "com.microsoft.azure.storage.file.FileRange"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadFileRanges*"
  name: "downloadFileRanges"
  nameWithType: "CloudFile.downloadFileRanges"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadFileRanges"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.downloadAttributes*"
  name: "downloadAttributes"
  nameWithType: "CloudFile.downloadAttributes"
  fullName: "com.microsoft.azure.storage.file.CloudFile.downloadAttributes"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.exists*"
  name: "exists"
  nameWithType: "CloudFile.exists"
  fullName: "com.microsoft.azure.storage.file.CloudFile.exists"
  package: "com.microsoft.azure.storage.file"
- uid: "java.security.InvalidKeyException"
  spec.java:
  - uid: "java.security.InvalidKeyException"
    name: "InvalidKeyException"
    fullName: "java.security.InvalidKeyException"
- uid: "com.microsoft.azure.storage.file.SharedAccessFilePolicy"
  name: "SharedAccessFilePolicy"
  nameWithType: "SharedAccessFilePolicy"
  fullName: "com.microsoft.azure.storage.file.SharedAccessFilePolicy"
- uid: "com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature*"
  name: "generateSharedAccessSignature"
  nameWithType: "CloudFile.generateSharedAccessSignature"
  fullName: "com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.SharedAccessFileHeaders"
  name: "SharedAccessFileHeaders"
  nameWithType: "SharedAccessFileHeaders"
  fullName: "com.microsoft.azure.storage.file.SharedAccessFileHeaders"
- uid: "com.microsoft.azure.storage.IPRange"
  name: "IPRange"
  nameWithType: "IPRange"
  fullName: "com.microsoft.azure.storage.IPRange"
- uid: "com.microsoft.azure.storage.SharedAccessProtocols"
  name: "SharedAccessProtocols"
  nameWithType: "SharedAccessProtocols"
  fullName: "com.microsoft.azure.storage.SharedAccessProtocols"
- uid: "com.microsoft.azure.storage.file.CloudFile.getCanonicalName*"
  name: "getCanonicalName"
  nameWithType: "CloudFile.getCanonicalName"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getCanonicalName"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CopyState"
  name: "CopyState"
  nameWithType: "CopyState"
  fullName: "com.microsoft.azure.storage.file.CopyState"
- uid: "com.microsoft.azure.storage.file.CloudFile.getCopyState*"
  name: "getCopyState"
  nameWithType: "CloudFile.getCopyState"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getCopyState"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.FileInputStream"
  name: "FileInputStream"
  nameWithType: "FileInputStream"
  fullName: "com.microsoft.azure.storage.file.FileInputStream"
- uid: "com.microsoft.azure.storage.file.CloudFile.openRead*"
  name: "openRead"
  nameWithType: "CloudFile.openRead"
  fullName: "com.microsoft.azure.storage.file.CloudFile.openRead"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.FileOutputStream"
  name: "FileOutputStream"
  nameWithType: "FileOutputStream"
  fullName: "com.microsoft.azure.storage.file.FileOutputStream"
- uid: "com.microsoft.azure.storage.file.CloudFile.openWriteExisting*"
  name: "openWriteExisting"
  nameWithType: "CloudFile.openWriteExisting"
  fullName: "com.microsoft.azure.storage.file.CloudFile.openWriteExisting"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.openWriteNew*"
  name: "openWriteNew"
  nameWithType: "CloudFile.openWriteNew"
  fullName: "com.microsoft.azure.storage.file.CloudFile.openWriteNew"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadFromByteArray*"
  name: "uploadFromByteArray"
  nameWithType: "CloudFile.uploadFromByteArray"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadFromByteArray"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadFromFile*"
  name: "uploadFromFile"
  nameWithType: "CloudFile.uploadFromFile"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadFromFile"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadText*"
  name: "uploadText"
  nameWithType: "CloudFile.uploadText"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadText"
  package: "com.microsoft.azure.storage.file"
- uid: "java.io.InputStream"
  spec.java:
  - uid: "java.io.InputStream"
    name: "InputStream"
    fullName: "java.io.InputStream"
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadRange*"
  name: "uploadRange"
  nameWithType: "CloudFile.uploadRange"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadRange"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.putRangeFromURL*"
  name: "putRangeFromURL"
  nameWithType: "CloudFile.putRangeFromURL"
  fullName: "com.microsoft.azure.storage.file.CloudFile.putRangeFromURL"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadMetadata*"
  name: "uploadMetadata"
  nameWithType: "CloudFile.uploadMetadata"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadMetadata"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.uploadProperties*"
  name: "uploadProperties"
  nameWithType: "CloudFile.uploadProperties"
  fullName: "com.microsoft.azure.storage.file.CloudFile.uploadProperties"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.resize*"
  name: "resize"
  nameWithType: "CloudFile.resize"
  fullName: "com.microsoft.azure.storage.file.CloudFile.resize"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.upload*"
  name: "upload"
  nameWithType: "CloudFile.upload"
  fullName: "com.microsoft.azure.storage.file.CloudFile.upload"
  package: "com.microsoft.azure.storage.file"
- uid: "java.lang.Iterable<com.microsoft.azure.storage.file.FileHandle>"
  spec.java:
  - uid: "java.lang.Iterable"
    name: "Iterable"
    fullName: "java.lang.Iterable"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.file.FileHandle"
    name: "FileHandle"
    fullName: "com.microsoft.azure.storage.file.FileHandle"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.file.CloudFile.listHandles*"
  name: "listHandles"
  nameWithType: "CloudFile.listHandles"
  fullName: "com.microsoft.azure.storage.file.CloudFile.listHandles"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.ResultSegment<com.microsoft.azure.storage.file.FileHandle>"
  spec.java:
  - uid: "com.microsoft.azure.storage.ResultSegment"
    name: "ResultSegment"
    fullName: "com.microsoft.azure.storage.ResultSegment"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.file.FileHandle"
    name: "FileHandle"
    fullName: "com.microsoft.azure.storage.file.FileHandle"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.file.CloudFile.listHandlesSegmented*"
  name: "listHandlesSegmented"
  nameWithType: "CloudFile.listHandlesSegmented"
  fullName: "com.microsoft.azure.storage.file.CloudFile.listHandlesSegmented"
  package: "com.microsoft.azure.storage.file"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "com.microsoft.azure.storage.ResultContinuation"
  name: "ResultContinuation"
  nameWithType: "ResultContinuation"
  fullName: "com.microsoft.azure.storage.ResultContinuation"
- uid: "com.microsoft.azure.storage.ResultSegment<java.lang.Integer>"
  spec.java:
  - uid: "com.microsoft.azure.storage.ResultSegment"
    name: "ResultSegment"
    fullName: "com.microsoft.azure.storage.ResultSegment"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.file.CloudFile.closeAllHandlesSegmented*"
  name: "closeAllHandlesSegmented"
  nameWithType: "CloudFile.closeAllHandlesSegmented"
  fullName: "com.microsoft.azure.storage.file.CloudFile.closeAllHandlesSegmented"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.closeHandleSegmented*"
  name: "closeHandleSegmented"
  nameWithType: "CloudFile.closeHandleSegmented"
  fullName: "com.microsoft.azure.storage.file.CloudFile.closeHandleSegmented"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.getParentNameFromURI*"
  name: "getParentNameFromURI"
  nameWithType: "CloudFile.getParentNameFromURI"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getParentNameFromURI"
  package: "com.microsoft.azure.storage.file"
- uid: "java.net.HttpURLConnection"
  spec.java:
  - uid: "java.net.HttpURLConnection"
    name: "HttpURLConnection"
    fullName: "java.net.HttpURLConnection"
- uid: "com.microsoft.azure.storage.file.CloudFile.updateEtagAndLastModifiedFromResponse*"
  name: "updateEtagAndLastModifiedFromResponse"
  nameWithType: "CloudFile.updateEtagAndLastModifiedFromResponse"
  fullName: "com.microsoft.azure.storage.file.CloudFile.updateEtagAndLastModifiedFromResponse"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.updateLengthFromResponse*"
  name: "updateLengthFromResponse"
  nameWithType: "CloudFile.updateLengthFromResponse"
  fullName: "com.microsoft.azure.storage.file.CloudFile.updateLengthFromResponse"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.getShare*"
  name: "getShare"
  nameWithType: "CloudFile.getShare"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getShare"
  package: "com.microsoft.azure.storage.file"
- uid: "java.util.HashMap<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.HashMap"
    name: "HashMap"
    fullName: "java.util.HashMap"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.file.CloudFile.getMetadata*"
  name: "getMetadata"
  nameWithType: "CloudFile.getMetadata"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getMetadata"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.getName*"
  name: "getName"
  nameWithType: "CloudFile.getName"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getName"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory"
  name: "CloudFileDirectory"
  nameWithType: "CloudFileDirectory"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory"
- uid: "com.microsoft.azure.storage.file.CloudFile.getParent*"
  name: "getParent"
  nameWithType: "CloudFile.getParent"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getParent"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.FileProperties"
  name: "FileProperties"
  nameWithType: "FileProperties"
  fullName: "com.microsoft.azure.storage.file.FileProperties"
- uid: "com.microsoft.azure.storage.file.CloudFile.getProperties*"
  name: "getProperties"
  nameWithType: "CloudFile.getProperties"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getProperties"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileClient"
  name: "CloudFileClient"
  nameWithType: "CloudFileClient"
  fullName: "com.microsoft.azure.storage.file.CloudFileClient"
- uid: "com.microsoft.azure.storage.file.CloudFile.getServiceClient*"
  name: "getServiceClient"
  nameWithType: "CloudFile.getServiceClient"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getServiceClient"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.getStreamWriteSizeInBytes*"
  name: "getStreamWriteSizeInBytes"
  nameWithType: "CloudFile.getStreamWriteSizeInBytes"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getStreamWriteSizeInBytes"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.getStreamMinimumReadSizeInBytes*"
  name: "getStreamMinimumReadSizeInBytes"
  nameWithType: "CloudFile.getStreamMinimumReadSizeInBytes"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getStreamMinimumReadSizeInBytes"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.getStorageUri*"
  name: "getStorageUri"
  nameWithType: "CloudFile.getStorageUri"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getStorageUri"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.getUri*"
  name: "getUri"
  nameWithType: "CloudFile.getUri"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getUri"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.setShare*"
  name: "setShare"
  nameWithType: "CloudFile.setShare"
  fullName: "com.microsoft.azure.storage.file.CloudFile.setShare"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.setMetadata*"
  name: "setMetadata"
  nameWithType: "CloudFile.setMetadata"
  fullName: "com.microsoft.azure.storage.file.CloudFile.setMetadata"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.setProperties*"
  name: "setProperties"
  nameWithType: "CloudFile.setProperties"
  fullName: "com.microsoft.azure.storage.file.CloudFile.setProperties"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.setStorageUri*"
  name: "setStorageUri"
  nameWithType: "CloudFile.setStorageUri"
  fullName: "com.microsoft.azure.storage.file.CloudFile.setStorageUri"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.setFilePermission*"
  name: "setFilePermission"
  nameWithType: "CloudFile.setFilePermission"
  fullName: "com.microsoft.azure.storage.file.CloudFile.setFilePermission"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.setStreamMinimumReadSizeInBytes*"
  name: "setStreamMinimumReadSizeInBytes"
  nameWithType: "CloudFile.setStreamMinimumReadSizeInBytes"
  fullName: "com.microsoft.azure.storage.file.CloudFile.setStreamMinimumReadSizeInBytes"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.setStreamWriteSizeInBytes*"
  name: "setStreamWriteSizeInBytes"
  nameWithType: "CloudFile.setStreamWriteSizeInBytes"
  fullName: "com.microsoft.azure.storage.file.CloudFile.setStreamWriteSizeInBytes"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.getTransformedAddress*"
  name: "getTransformedAddress"
  nameWithType: "CloudFile.getTransformedAddress"
  fullName: "com.microsoft.azure.storage.file.CloudFile.getTransformedAddress"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile.assertValidFilePermissionOrKey*"
  name: "assertValidFilePermissionOrKey"
  nameWithType: "CloudFile.assertValidFilePermissionOrKey"
  fullName: "com.microsoft.azure.storage.file.CloudFile.assertValidFilePermissionOrKey"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.ListFileItem"
  name: "ListFileItem"
  nameWithType: "ListFileItem"
  fullName: "com.microsoft.azure.storage.file.ListFileItem"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.microsoft.azure.storage.file.FileRange"
  name: "FileRange"
  nameWithType: "FileRange"
  fullName: "com.microsoft.azure.storage.file.FileRange"
- uid: "java.util.ArrayList"
  name: "ArrayList"
  nameWithType: "ArrayList"
  fullName: "java.util.ArrayList"
- uid: "com.microsoft.azure.storage.file.FileHandle"
  name: "FileHandle"
  nameWithType: "FileHandle"
  fullName: "com.microsoft.azure.storage.file.FileHandle"
- uid: "java.lang.Iterable"
  name: "Iterable"
  nameWithType: "Iterable"
  fullName: "java.lang.Iterable"
- uid: "com.microsoft.azure.storage.ResultSegment"
  name: "ResultSegment"
  nameWithType: "ResultSegment"
  fullName: "com.microsoft.azure.storage.ResultSegment"
- uid: "java.util.HashMap"
  name: "HashMap"
  nameWithType: "HashMap"
  fullName: "java.util.HashMap"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
