### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.table.TableServiceEntity"
  id: "TableServiceEntity"
  parent: "com.microsoft.azure.storage.table"
  children:
  - "com.microsoft.azure.storage.table.TableServiceEntity.TableServiceEntity()"
  - "com.microsoft.azure.storage.table.TableServiceEntity.TableServiceEntity(java.lang.String,java.lang.String)"
  - "com.microsoft.azure.storage.table.TableServiceEntity.etag"
  - "com.microsoft.azure.storage.table.TableServiceEntity.getEtag()"
  - "com.microsoft.azure.storage.table.TableServiceEntity.getPartitionKey()"
  - "com.microsoft.azure.storage.table.TableServiceEntity.getReflectedEntityCache()"
  - "com.microsoft.azure.storage.table.TableServiceEntity.getRowKey()"
  - "com.microsoft.azure.storage.table.TableServiceEntity.getTimestamp()"
  - "com.microsoft.azure.storage.table.TableServiceEntity.isReflectedEntityCacheDisabled()"
  - "com.microsoft.azure.storage.table.TableServiceEntity.partitionKey"
  - "com.microsoft.azure.storage.table.TableServiceEntity.readEntity(java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.table.TableServiceEntity.readEntityWithReflection(java.lang.Object,java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.table.TableServiceEntity.rowKey"
  - "com.microsoft.azure.storage.table.TableServiceEntity.setEtag(java.lang.String)"
  - "com.microsoft.azure.storage.table.TableServiceEntity.setPartitionKey(java.lang.String)"
  - "com.microsoft.azure.storage.table.TableServiceEntity.setReflectedEntityCacheDisabled(boolean)"
  - "com.microsoft.azure.storage.table.TableServiceEntity.setRowKey(java.lang.String)"
  - "com.microsoft.azure.storage.table.TableServiceEntity.setTimestamp(java.util.Date)"
  - "com.microsoft.azure.storage.table.TableServiceEntity.timeStamp"
  - "com.microsoft.azure.storage.table.TableServiceEntity.writeEntity(com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.table.TableServiceEntity.writeEntityWithReflection(java.lang.Object)"
  langs:
  - "java"
  name: "TableServiceEntity"
  nameWithType: "TableServiceEntity"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity"
  type: "Class"
  package: "com.microsoft.azure.storage.table"
  summary: "The <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref> class represents the base object type for a table entity in the Storage service. <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref> provides a base implementation for the <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref> interface that provides `readEntity` and `writeEntity` methods that by default serialize and deserialize all properties via reflection. A table entity class may extend this class and override the `readEntity` and `writeEntity` methods to provide customized or more performant serialization logic.\n\nThe use of reflection allows subclasses of <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref> to be serialized and deserialized without having to implement the serialization code themselves. When both a getter method and setter method are found for a given property name and data type, then the appropriate method is invoked automatically to serialize or deserialize the data. To take advantage of the automatic serialization code, your table entity classes should provide getter and setter methods for each property in the corresponding table entity in Microsoft Azure table storage. The reflection code looks for getter and setter methods in pairs of the form\n\n`public type getPropertyName() { ... }`\n\nand\n\n`public void setPropertyName(type parameter) { ... }`\n\nwhere *PropertyName* is a property name for the table entity, and *type* is a Java type compatible with the EDM data type of the property. See the table below for a map of property types to their Java equivalents. The <xref uid=\"com.microsoft.azure.storage.table.StoreAs\" data-throw-if-not-resolved=\"false\">StoreAs</xref> annotation may be applied with a `name` attribute to specify a property name for reflection on getter and setter methods that do not follow the property name convention. Method names and the `name` attribute of <xref uid=\"com.microsoft.azure.storage.table.StoreAs\" data-throw-if-not-resolved=\"false\">StoreAs</xref> annotations are case sensitive for matching property names with reflection. Use the <xref uid=\"com.microsoft.azure.storage.table.Ignore\" data-throw-if-not-resolved=\"false\">Ignore</xref> annotation to prevent methods from being used by reflection for automatic serialization and deserialization. Note that the names \"PartitionKey\", \"RowKey\", \"Timestamp\", and \"Etag\" are reserved and will be ignored if set with the <xref uid=\"com.microsoft.azure.storage.table.StoreAs\" data-throw-if-not-resolved=\"false\">StoreAs</xref> annotation in a subclass.\n\nThe following table shows the supported property data types in Microsoft Azure storage and the corresponding Java types when deserialized.\n\n    | ---------------- | --------------------------------------------------------------------------------------------------------------------------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n    | Storage Type     | EdmType Value                                                                                                               | Java Type          | Description                                                                                                                                                                          |\n    | **Edm.Binary**   | <xref uid=\"com.microsoft.azure.storage.table.EdmType.BINARY\" data-throw-if-not-resolved=\"false\">EdmType#BINARY</xref>       | `byte[], Byte[]`   | An array of bytes up to 64 KB in size.                                                                                                                                               |\n    | **Edm.Boolean**  | <xref uid=\"com.microsoft.azure.storage.table.EdmType.BOOLEAN\" data-throw-if-not-resolved=\"false\">EdmType#BOOLEAN</xref>     | `boolean, Boolean` | A Boolean value.                                                                                                                                                                     |\n    | **Edm.DateTime** | <xref uid=\"com.microsoft.azure.storage.table.EdmType.DATE_TIME\" data-throw-if-not-resolved=\"false\">EdmType#DATE_TIME</xref> | `java.util.Date`   | A 64-bit value expressed as Coordinated Universal Time (UTC). The supported range begins from 12:00 midnight, January 1, 1601 A.D. (C.E.), UTC. The range ends at December 31, 9999. |\n    | **Edm.Double**   | <xref uid=\"com.microsoft.azure.storage.table.EdmType.DOUBLE\" data-throw-if-not-resolved=\"false\">EdmType#DOUBLE</xref>       | `double, Double`   | A 64-bit double-precision floating point value.                                                                                                                                      |\n    | **Edm.Guid**     | <xref uid=\"com.microsoft.azure.storage.table.EdmType.GUID\" data-throw-if-not-resolved=\"false\">EdmType#GUID</xref>           | `UUID`             | A 128-bit globally unique identifier.                                                                                                                                                |\n    | **Edm.Int32**    | <xref uid=\"com.microsoft.azure.storage.table.EdmType.INT32\" data-throw-if-not-resolved=\"false\">EdmType#INT32</xref>         | `int, Integer`     | A 32-bit integer value.                                                                                                                                                              |\n    | **Edm.Int64**    | <xref uid=\"com.microsoft.azure.storage.table.EdmType.INT64\" data-throw-if-not-resolved=\"false\">EdmType#INT64</xref>         | `long, Long`       | A 64-bit integer value.                                                                                                                                                              |\n    | **Edm.String**   | <xref uid=\"com.microsoft.azure.storage.table.EdmType.STRING\" data-throw-if-not-resolved=\"false\">EdmType#STRING</xref>       | `String`           | A UTF-16-encoded value. String values may be up to 64 KB in size.                                                                                                                    |\n\nSee the MSDN topic [Understanding the Table Service Data Model][] for an overview of tables, entities, and properties as used in the Microsoft Azure Storage service.\n\nFor an overview of the available EDM primitive data types and names, see the [Primitive Data Types][] section of the [OData Protocol Overview][].\n\n\n[Understanding the Table Service Data Model]: http://msdn.microsoft.com//library/azure/dd179338.aspx\n[Primitive Data Types]: http://www.odata.org/developers/protocols/overview#AbstractTypeSystem\n[OData Protocol Overview]: http://www.odata.org/developers/protocols/overview"
  syntax:
    content: "public class TableServiceEntity implements TableEntity"
  inheritance:
  - "java.lang.Object"
  implements:
  - "com.microsoft.azure.storage.table.TableEntity"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.TableServiceEntity()"
  id: "TableServiceEntity()"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "TableServiceEntity()"
  nameWithType: "TableServiceEntity.TableServiceEntity()"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.TableServiceEntity()"
  overload: "com.microsoft.azure.storage.table.TableServiceEntity.TableServiceEntity*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.table"
  summary: "Initializes an empty <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref> instance."
  syntax:
    content: "public TableServiceEntity()"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.TableServiceEntity(java.lang.String,java.lang.String)"
  id: "TableServiceEntity(java.lang.String,java.lang.String)"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "TableServiceEntity(String partitionKey, String rowKey)"
  nameWithType: "TableServiceEntity.TableServiceEntity(String partitionKey, String rowKey)"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.TableServiceEntity(String partitionKey, String rowKey)"
  overload: "com.microsoft.azure.storage.table.TableServiceEntity.TableServiceEntity*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.table"
  summary: "Initializes a new instance of the <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref> class with the specified partition key and row key."
  syntax:
    content: "public TableServiceEntity(String partitionKey, String rowKey)"
    parameters:
    - id: "partitionKey"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the partition key of the <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref> to be\n            initialized."
    - id: "rowKey"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the row key of the <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref> to be\n            initialized."
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.etag"
  id: "etag"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "etag"
  nameWithType: "TableServiceEntity.etag"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.etag"
  type: "Field"
  package: "com.microsoft.azure.storage.table"
  summary: "Reserved for internal use. The value of the ETag for the entity."
  syntax:
    content: "protected String etag"
    return:
      type: "java.lang.String"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.getEtag()"
  id: "getEtag()"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "getEtag()"
  nameWithType: "TableServiceEntity.getEtag()"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.getEtag()"
  overload: "com.microsoft.azure.storage.table.TableServiceEntity.getEtag*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Gets the ETag value to verify for the entity. This value is used to determine if the table entity has changed since it was last read from Microsoft Azure storage. The client cannot update this value on the service."
  syntax:
    content: "public String getEtag()"
    return:
      type: "java.lang.String"
      description: "A <code>String</code> containing the ETag for the entity."
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.getPartitionKey()"
  id: "getPartitionKey()"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "getPartitionKey()"
  nameWithType: "TableServiceEntity.getPartitionKey()"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.getPartitionKey()"
  overload: "com.microsoft.azure.storage.table.TableServiceEntity.getPartitionKey*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Gets the PartitionKey value for the entity."
  syntax:
    content: "public String getPartitionKey()"
    return:
      type: "java.lang.String"
      description: "A <code>String</code> containing the PartitionKey value for the entity."
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.getReflectedEntityCache()"
  id: "getReflectedEntityCache()"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "getReflectedEntityCache()"
  nameWithType: "TableServiceEntity.getReflectedEntityCache()"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.getReflectedEntityCache()"
  overload: "com.microsoft.azure.storage.table.TableServiceEntity.getReflectedEntityCache*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "The reflected entity cache caches known entity types and their respective reflected entity dictionaries when entities are deserialized and the payload does not include JSON metadata."
  syntax:
    content: "protected static ConcurrentHashMap<Class<?>,HashMap<String,PropertyPair>> getReflectedEntityCache()"
    return:
      type: "java.util.concurrent.ConcurrentHashMap<java.lang.Class<?>,java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.PropertyPair>>"
      description: "The <code>ConcurrentHashMap&lt;Class&lt;?&gt;, HashMap&lt;String, PropertyPair&gt;&gt;</code> representing\n         the known entity types and their reflected entity dictionaries"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.getRowKey()"
  id: "getRowKey()"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "getRowKey()"
  nameWithType: "TableServiceEntity.getRowKey()"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.getRowKey()"
  overload: "com.microsoft.azure.storage.table.TableServiceEntity.getRowKey*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Gets the RowKey value for the entity."
  syntax:
    content: "public String getRowKey()"
    return:
      type: "java.lang.String"
      description: "A <code>String</code> containing the RowKey value for the entity."
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.getTimestamp()"
  id: "getTimestamp()"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "getTimestamp()"
  nameWithType: "TableServiceEntity.getTimestamp()"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.getTimestamp()"
  overload: "com.microsoft.azure.storage.table.TableServiceEntity.getTimestamp*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Gets the Timestamp for the entity. The server manages the value of Timestamp, which cannot be modified."
  syntax:
    content: "public Date getTimestamp()"
    return:
      type: "java.util.Date"
      description: "A <code>java.util.Date</code> object which represents the Timestamp value for the entity."
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.isReflectedEntityCacheDisabled()"
  id: "isReflectedEntityCacheDisabled()"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "isReflectedEntityCacheDisabled()"
  nameWithType: "TableServiceEntity.isReflectedEntityCacheDisabled()"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.isReflectedEntityCacheDisabled()"
  overload: "com.microsoft.azure.storage.table.TableServiceEntity.isReflectedEntityCacheDisabled*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Gets a value indicating whether or not the reflected entity cache is disabled. For most scenarios, disabling the reflected entity cache is not recommended due to its effect on performance. The reflected entity cache stores known entity types and their respective reflected entity dictionaries. Rather than using reflection on a known entity type, the values from the dictionary are used instead."
  syntax:
    content: "public static boolean isReflectedEntityCacheDisabled()"
    return:
      type: "boolean"
      description: "<code>true</code> if the reflected entity cache is disabled; otherwise, <code>false</code>."
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.partitionKey"
  id: "partitionKey"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "partitionKey"
  nameWithType: "TableServiceEntity.partitionKey"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.partitionKey"
  type: "Field"
  package: "com.microsoft.azure.storage.table"
  summary: "Reserved for internal use. The value of the partition key in the entity."
  syntax:
    content: "protected String partitionKey"
    return:
      type: "java.lang.String"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.readEntity(java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>,com.microsoft.azure.storage.OperationContext)"
  id: "readEntity(java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "readEntity(HashMap<String,EntityProperty> properties, OperationContext opContext)"
  nameWithType: "TableServiceEntity.readEntity(HashMap<String,EntityProperty> properties, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.readEntity(HashMap<String,EntityProperty> properties, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.table.TableServiceEntity.readEntity*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Populates this table entity instance using the map of property names to <xref uid=\"com.microsoft.azure.storage.table.EntityProperty\" data-throw-if-not-resolved=\"false\">EntityProperty</xref> data typed values.\n\nThis method invokes <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity.readEntityWithReflection*\" data-throw-if-not-resolved=\"false\">TableServiceEntity#readEntityWithReflection</xref> to populate the table entity instance the method is called on using reflection. Table entity classes that extend <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref> can take advantage of this behavior by implementing getter and setter methods for the particular properties of the table entity in Microsoft Azure storage the class represents.\n\nOverride this method in classes that extend <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref> to invoke custom serialization code."
  syntax:
    content: "public void readEntity(HashMap<String,EntityProperty> properties, OperationContext opContext)"
    parameters:
    - id: "properties"
      type: "java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>"
      description: "The <code>java.util.HashMap</code> of <code>String</code> property names to <xref uid=\"com.microsoft.azure.storage.table.EntityProperty\" data-throw-if-not-resolved=\"false\">EntityProperty</xref>\n            data values to deserialize and store in this table entity instance."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object used to track the execution of the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "if an error occurs during the deserialization."
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.readEntityWithReflection(java.lang.Object,java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>,com.microsoft.azure.storage.OperationContext)"
  id: "readEntityWithReflection(java.lang.Object,java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "readEntityWithReflection(Object instance, HashMap<String,EntityProperty> properties, OperationContext opContext)"
  nameWithType: "TableServiceEntity.readEntityWithReflection(Object instance, HashMap<String,EntityProperty> properties, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.readEntityWithReflection(Object instance, HashMap<String,EntityProperty> properties, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.table.TableServiceEntity.readEntityWithReflection*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Deserializes the table entity property map into the specified object instance using reflection.\n\nThis static method takes an object instance that represents a table entity type and uses reflection on its class type to find methods to deserialize the data from the property map into the instance.\n\nEach property name and data type in the properties map is compared with the methods in the class type for a pair of getter and setter methods to use for serialization and deserialization. The class is scanned for methods with names that match the property name with \"get\" and \"set\" prepended, or with the <xref uid=\"com.microsoft.azure.storage.table.StoreAs\" data-throw-if-not-resolved=\"false\">StoreAs</xref> annotation set with the property name. The methods must have return types or parameter data types that match the data type of the corresponding <xref uid=\"com.microsoft.azure.storage.table.EntityProperty\" data-throw-if-not-resolved=\"false\">EntityProperty</xref> value. If such a pair is found, the data is copied into the instance object by invoking the setter method on the instance. Properties that do not match a method pair by name and data type are not copied."
  syntax:
    content: "public static void readEntityWithReflection(Object instance, HashMap<String,EntityProperty> properties, OperationContext opContext)"
    parameters:
    - id: "instance"
      type: "java.lang.Object"
      description: "An <code>Object</code> reference to an instance of a class implementing <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref> to\n            deserialize the table entity\n            data into."
    - id: "properties"
      type: "java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>"
      description: "A <code>java.util.HashMap</code> object which maps <code>String</code> property names to\n            <xref uid=\"com.microsoft.azure.storage.table.EntityProperty\" data-throw-if-not-resolved=\"false\">EntityProperty</xref> objects containing typed data\n            values to deserialize into the instance parameter object."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation."
  exceptions:
  - type: "java.lang.IllegalArgumentException"
    description: "if the table entity response received is invalid or improperly formatted."
  - type: "java.lang.IllegalAccessException"
    description: "if the table entity response received is invalid or improperly formatted."
  - type: "java.lang.reflect.InvocationTargetException"
    description: "if the table entity response received is invalid or improperly formatted."
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.rowKey"
  id: "rowKey"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "rowKey"
  nameWithType: "TableServiceEntity.rowKey"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.rowKey"
  type: "Field"
  package: "com.microsoft.azure.storage.table"
  summary: "Reserved for internal use. The value of the row key in the entity."
  syntax:
    content: "protected String rowKey"
    return:
      type: "java.lang.String"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.setEtag(java.lang.String)"
  id: "setEtag(java.lang.String)"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "setEtag(String etag)"
  nameWithType: "TableServiceEntity.setEtag(String etag)"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.setEtag(String etag)"
  overload: "com.microsoft.azure.storage.table.TableServiceEntity.setEtag*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Sets the ETag value to verify for the entity. This value is used to determine if the table entity has changed since it was last read from Microsoft Azure storage. The client cannot update this value on the service."
  syntax:
    content: "public void setEtag(String etag)"
    parameters:
    - id: "etag"
      type: "java.lang.String"
      description: "A <code>String</code> containing the ETag for the entity."
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.setPartitionKey(java.lang.String)"
  id: "setPartitionKey(java.lang.String)"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "setPartitionKey(String partitionKey)"
  nameWithType: "TableServiceEntity.setPartitionKey(String partitionKey)"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.setPartitionKey(String partitionKey)"
  overload: "com.microsoft.azure.storage.table.TableServiceEntity.setPartitionKey*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Sets the PartitionKey value for the entity."
  syntax:
    content: "public void setPartitionKey(String partitionKey)"
    parameters:
    - id: "partitionKey"
      type: "java.lang.String"
      description: "A <code>String</code> containing the PartitionKey value for the entity."
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.setReflectedEntityCacheDisabled(boolean)"
  id: "setReflectedEntityCacheDisabled(boolean)"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "setReflectedEntityCacheDisabled(boolean disableReflectedEntityCache)"
  nameWithType: "TableServiceEntity.setReflectedEntityCacheDisabled(boolean disableReflectedEntityCache)"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.setReflectedEntityCacheDisabled(boolean disableReflectedEntityCache)"
  overload: "com.microsoft.azure.storage.table.TableServiceEntity.setReflectedEntityCacheDisabled*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Sets a boolean representing whether or not the reflected entity cache is disabled. For most scenarios, disabling the reflected entity cache is not recommended due to its effect on performance. The reflected entity cache stores known entity types and their respective reflected entity dictionaries. Rather than using reflection on a known entity type, the values from the dictionary are used instead."
  syntax:
    content: "public static void setReflectedEntityCacheDisabled(boolean disableReflectedEntityCache)"
    parameters:
    - id: "disableReflectedEntityCache"
      type: "boolean"
      description: "<code>true</code> to disable the reflected entity cache; otherwise, <code>false</code>."
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.setRowKey(java.lang.String)"
  id: "setRowKey(java.lang.String)"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "setRowKey(String rowKey)"
  nameWithType: "TableServiceEntity.setRowKey(String rowKey)"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.setRowKey(String rowKey)"
  overload: "com.microsoft.azure.storage.table.TableServiceEntity.setRowKey*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Sets the RowKey value for the entity."
  syntax:
    content: "public void setRowKey(String rowKey)"
    parameters:
    - id: "rowKey"
      type: "java.lang.String"
      description: "A <code>String</code> containing the RowKey value for the entity."
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.setTimestamp(java.util.Date)"
  id: "setTimestamp(java.util.Date)"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "setTimestamp(Date timeStamp)"
  nameWithType: "TableServiceEntity.setTimestamp(Date timeStamp)"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.setTimestamp(Date timeStamp)"
  overload: "com.microsoft.azure.storage.table.TableServiceEntity.setTimestamp*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Sets the `timeStamp` value for the entity. Note that the timestamp property is a read-only property, set by the service only."
  syntax:
    content: "public void setTimestamp(Date timeStamp)"
    parameters:
    - id: "timeStamp"
      type: "java.util.Date"
      description: "A <code>java.util.Date</code> containing the <code>timeStamp</code> value for the entity."
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.timeStamp"
  id: "timeStamp"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "timeStamp"
  nameWithType: "TableServiceEntity.timeStamp"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.timeStamp"
  type: "Field"
  package: "com.microsoft.azure.storage.table"
  summary: "Reserved for internal use. The value of the Timestamp in the entity."
  syntax:
    content: "protected Date timeStamp"
    return:
      type: "java.util.Date"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.writeEntity(com.microsoft.azure.storage.OperationContext)"
  id: "writeEntity(com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "writeEntity(OperationContext opContext)"
  nameWithType: "TableServiceEntity.writeEntity(OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.writeEntity(OperationContext opContext)"
  overload: "com.microsoft.azure.storage.table.TableServiceEntity.writeEntity*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Returns a map of property names to <xref uid=\"com.microsoft.azure.storage.table.EntityProperty\" data-throw-if-not-resolved=\"false\">EntityProperty</xref> data typed values created by serializing this table entity instance.\n\nThis method invokes <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity.writeEntityWithReflection*\" data-throw-if-not-resolved=\"false\">#writeEntityWithReflection</xref> to serialize the table entity instance the method is called on using reflection. Table entity classes that extend <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref> can take advantage of this behavior by implementing getter and setter methods for the particular properties of the table entity in Microsoft Azure storage the class represents. Note that the property names \"PartitionKey\", \"RowKey\", and \"Timestamp\" are reserved and will be ignored if set on other methods with the <xref uid=\"com.microsoft.azure.storage.table.StoreAs\" data-throw-if-not-resolved=\"false\">StoreAs</xref> annotation.\n\nOverride this method in classes that extend <xref uid=\"com.microsoft.azure.storage.table.TableServiceEntity\" data-throw-if-not-resolved=\"false\">TableServiceEntity</xref> to invoke custom serialization code."
  syntax:
    content: "public HashMap<String,EntityProperty> writeEntity(OperationContext opContext)"
    parameters:
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object used to track the execution of the operation."
    return:
      type: "java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>"
      description: "A <code>java.util.HashMap</code> of <code>String</code> property names to <xref uid=\"com.microsoft.azure.storage.table.EntityProperty\" data-throw-if-not-resolved=\"false\">EntityProperty</xref> data\n         typed values representing the properties serialized from this table entity instance."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "if an error occurs during the serialization."
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.writeEntityWithReflection(java.lang.Object)"
  id: "writeEntityWithReflection(java.lang.Object)"
  parent: "com.microsoft.azure.storage.table.TableServiceEntity"
  langs:
  - "java"
  name: "writeEntityWithReflection(Object instance)"
  nameWithType: "TableServiceEntity.writeEntityWithReflection(Object instance)"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.writeEntityWithReflection(Object instance)"
  overload: "com.microsoft.azure.storage.table.TableServiceEntity.writeEntityWithReflection*"
  type: "Method"
  package: "com.microsoft.azure.storage.table"
  summary: "Serializes the property data from a table entity instance into a property map using reflection.\n\nThis static method takes an object instance that represents a table entity type and uses reflection on its class type to find methods to serialize the data from the instance into the property map.\n\nEach property name and data type in the properties map is compared with the methods in the class type for a pair of getter and setter methods to use for serialization and deserialization. The class is scanned for methods with names that match the property name with \"get\" and \"set\" prepended, or with the <xref uid=\"com.microsoft.azure.storage.table.StoreAs\" data-throw-if-not-resolved=\"false\">StoreAs</xref> annotation set with the property name. The methods must have return types or parameter data types that match the data type of the corresponding <xref uid=\"com.microsoft.azure.storage.table.EntityProperty\" data-throw-if-not-resolved=\"false\">EntityProperty</xref> value. If such a pair is found, the data is copied from the instance object by invoking the getter method on the instance. Properties that do not have a method pair with matching name and data type are not copied."
  syntax:
    content: "public static HashMap<String,EntityProperty> writeEntityWithReflection(Object instance)"
    parameters:
    - id: "instance"
      type: "java.lang.Object"
      description: "An <code>Object</code> reference to an instance of a class implementing <xref uid=\"com.microsoft.azure.storage.table.TableEntity\" data-throw-if-not-resolved=\"false\">TableEntity</xref> to\n            serialize the table entity\n            data from."
    return:
      type: "java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>"
      description: "A <code>java.util.HashMap</code> object which maps <code>String</code> property names to\n         <xref uid=\"com.microsoft.azure.storage.table.EntityProperty\" data-throw-if-not-resolved=\"false\">EntityProperty</xref> objects containing typed data values serialized from the instance parameter\n         object."
  exceptions:
  - type: "java.lang.IllegalArgumentException"
    description: "if the table entity is invalid or improperly formatted."
  - type: "java.lang.IllegalAccessException"
    description: "if the table entity is invalid or improperly formatted."
  - type: "java.lang.reflect.InvocationTargetException"
    description: "if the table entity is invalid or improperly formatted."
references:
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.TableServiceEntity*"
  name: "TableServiceEntity"
  nameWithType: "TableServiceEntity.TableServiceEntity"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.TableServiceEntity"
  package: "com.microsoft.azure.storage.table"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "java.lang.IllegalArgumentException"
  spec.java:
  - uid: "java.lang.IllegalArgumentException"
    name: "IllegalArgumentException"
    fullName: "java.lang.IllegalArgumentException"
- uid: "java.lang.IllegalAccessException"
  spec.java:
  - uid: "java.lang.IllegalAccessException"
    name: "IllegalAccessException"
    fullName: "java.lang.IllegalAccessException"
- uid: "java.lang.reflect.InvocationTargetException"
  spec.java:
  - uid: "java.lang.reflect.InvocationTargetException"
    name: "InvocationTargetException"
    fullName: "java.lang.reflect.InvocationTargetException"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.EntityProperty>"
  spec.java:
  - uid: "java.util.HashMap"
    name: "HashMap"
    fullName: "java.util.HashMap"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "com.microsoft.azure.storage.table.EntityProperty"
    name: "EntityProperty"
    fullName: "com.microsoft.azure.storage.table.EntityProperty"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.OperationContext"
  name: "OperationContext"
  nameWithType: "OperationContext"
  fullName: "com.microsoft.azure.storage.OperationContext"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.readEntityWithReflection*"
  name: "readEntityWithReflection"
  nameWithType: "TableServiceEntity.readEntityWithReflection"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.readEntityWithReflection"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.writeEntityWithReflection*"
  name: "writeEntityWithReflection"
  nameWithType: "TableServiceEntity.writeEntityWithReflection"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.writeEntityWithReflection"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.getEtag*"
  name: "getEtag"
  nameWithType: "TableServiceEntity.getEtag"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.getEtag"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.getPartitionKey*"
  name: "getPartitionKey"
  nameWithType: "TableServiceEntity.getPartitionKey"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.getPartitionKey"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.getRowKey*"
  name: "getRowKey"
  nameWithType: "TableServiceEntity.getRowKey"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.getRowKey"
  package: "com.microsoft.azure.storage.table"
- uid: "java.util.Date"
  spec.java:
  - uid: "java.util.Date"
    name: "Date"
    fullName: "java.util.Date"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.getTimestamp*"
  name: "getTimestamp"
  nameWithType: "TableServiceEntity.getTimestamp"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.getTimestamp"
  package: "com.microsoft.azure.storage.table"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.isReflectedEntityCacheDisabled*"
  name: "isReflectedEntityCacheDisabled"
  nameWithType: "TableServiceEntity.isReflectedEntityCacheDisabled"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.isReflectedEntityCacheDisabled"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.setReflectedEntityCacheDisabled*"
  name: "setReflectedEntityCacheDisabled"
  nameWithType: "TableServiceEntity.setReflectedEntityCacheDisabled"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.setReflectedEntityCacheDisabled"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.StorageException"
  name: "StorageException"
  nameWithType: "StorageException"
  fullName: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.readEntity*"
  name: "readEntity"
  nameWithType: "TableServiceEntity.readEntity"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.readEntity"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.setEtag*"
  name: "setEtag"
  nameWithType: "TableServiceEntity.setEtag"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.setEtag"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.setPartitionKey*"
  name: "setPartitionKey"
  nameWithType: "TableServiceEntity.setPartitionKey"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.setPartitionKey"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.setRowKey*"
  name: "setRowKey"
  nameWithType: "TableServiceEntity.setRowKey"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.setRowKey"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.setTimestamp*"
  name: "setTimestamp"
  nameWithType: "TableServiceEntity.setTimestamp"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.setTimestamp"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.writeEntity*"
  name: "writeEntity"
  nameWithType: "TableServiceEntity.writeEntity"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.writeEntity"
  package: "com.microsoft.azure.storage.table"
- uid: "java.util.concurrent.ConcurrentHashMap<java.lang.Class<?>,java.util.HashMap<java.lang.String,com.microsoft.azure.storage.table.PropertyPair>>"
  spec.java:
  - uid: "java.util.concurrent.ConcurrentHashMap"
    name: "ConcurrentHashMap"
    fullName: "java.util.concurrent.ConcurrentHashMap"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Class"
    name: "Class"
    fullName: "java.lang.Class"
  - name: "<"
    fullName: "<"
  - uid: "?"
    name: "?"
    fullName: "?"
  - name: ">"
    fullName: ">"
  - name: ","
    fullName: ","
  - uid: "java.util.HashMap"
    name: "HashMap"
    fullName: "java.util.HashMap"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "com.microsoft.azure.storage.table.PropertyPair"
    name: "PropertyPair"
    fullName: "com.microsoft.azure.storage.table.PropertyPair"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.table.TableServiceEntity.getReflectedEntityCache*"
  name: "getReflectedEntityCache"
  nameWithType: "TableServiceEntity.getReflectedEntityCache"
  fullName: "com.microsoft.azure.storage.table.TableServiceEntity.getReflectedEntityCache"
  package: "com.microsoft.azure.storage.table"
- uid: "com.microsoft.azure.storage.table.TableEntity"
  name: "TableEntity"
  nameWithType: "TableEntity"
  fullName: "com.microsoft.azure.storage.table.TableEntity"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.HashMap"
  name: "HashMap"
  nameWithType: "HashMap"
  fullName: "java.util.HashMap"
- uid: "java.lang.String,com.microsoft.azure.storage.table.EntityProperty"
  name: "String,EntityProperty"
  nameWithType: "String,EntityProperty"
  fullName: "java.lang.String,com.microsoft.azure.storage.table.EntityProperty"
- uid: "java.lang.String,com.microsoft.azure.storage.table.PropertyPair"
  name: "String,PropertyPair"
  nameWithType: "String,PropertyPair"
  fullName: "java.lang.String,com.microsoft.azure.storage.table.PropertyPair"
- uid: "java.util.concurrent.ConcurrentHashMap"
  name: "ConcurrentHashMap"
  nameWithType: "ConcurrentHashMap"
  fullName: "java.util.concurrent.ConcurrentHashMap"
- uid: "java.lang.Class"
  name: "Class"
  nameWithType: "Class"
  fullName: "java.lang.Class"
- uid: "?>,java.util.HashMap"
  name: "?>,HashMap"
  nameWithType: "?>,HashMap"
  fullName: "?>,java.util.HashMap"
