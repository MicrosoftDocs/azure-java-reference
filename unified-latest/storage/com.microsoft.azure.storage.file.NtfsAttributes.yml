### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.file.NtfsAttributes"
  id: "NtfsAttributes"
  parent: "com.microsoft.azure.storage.file"
  children:
  - "com.microsoft.azure.storage.file.NtfsAttributes.ARCHIVE"
  - "com.microsoft.azure.storage.file.NtfsAttributes.DIRECTORY"
  - "com.microsoft.azure.storage.file.NtfsAttributes.HIDDEN"
  - "com.microsoft.azure.storage.file.NtfsAttributes.NORMAL"
  - "com.microsoft.azure.storage.file.NtfsAttributes.NOT_CONTENT_INDEXED"
  - "com.microsoft.azure.storage.file.NtfsAttributes.NO_SCRUB_DATA"
  - "com.microsoft.azure.storage.file.NtfsAttributes.OFFLINE"
  - "com.microsoft.azure.storage.file.NtfsAttributes.READ_ONLY"
  - "com.microsoft.azure.storage.file.NtfsAttributes.SYSTEM"
  - "com.microsoft.azure.storage.file.NtfsAttributes.TEMPORARY"
  - "com.microsoft.azure.storage.file.NtfsAttributes.toAttributes(java.lang.String)"
  - "com.microsoft.azure.storage.file.NtfsAttributes.toString(java.util.EnumSet<com.microsoft.azure.storage.file.NtfsAttributes>)"
  - "com.microsoft.azure.storage.file.NtfsAttributes.valueOf(java.lang.String)"
  - "com.microsoft.azure.storage.file.NtfsAttributes.values()"
  langs:
  - "java"
  name: "NtfsAttributes"
  nameWithType: "NtfsAttributes"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes"
  type: "Enum"
  package: "com.microsoft.azure.storage.file"
  summary: "Specifies options for NTFS Attributes."
  syntax:
    content: "public enum NtfsAttributes extends Enum<NtfsAttributes>"
  inheritance:
  - "java.lang.Object"
  - "java.lang.Enum"
  inheritedMembers:
  - "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
  - "java.lang.Enum.clone()"
  - "java.lang.Enum.compareTo(E)"
  - "java.lang.Enum.equals(java.lang.Object)"
  - "java.lang.Enum.finalize()"
  - "java.lang.Enum.getDeclaringClass()"
  - "java.lang.Enum.hashCode()"
  - "java.lang.Enum.name()"
  - "java.lang.Enum.ordinal()"
  - "java.lang.Enum.toString()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.ARCHIVE"
  id: "ARCHIVE"
  parent: "com.microsoft.azure.storage.file.NtfsAttributes"
  langs:
  - "java"
  name: "ARCHIVE"
  nameWithType: "NtfsAttributes.ARCHIVE"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.ARCHIVE"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "The file is a candidate for backup or removal."
  syntax:
    content: "public static final NtfsAttributes ARCHIVE"
    return:
      type: "com.microsoft.azure.storage.file.NtfsAttributes"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.DIRECTORY"
  id: "DIRECTORY"
  parent: "com.microsoft.azure.storage.file.NtfsAttributes"
  langs:
  - "java"
  name: "DIRECTORY"
  nameWithType: "NtfsAttributes.DIRECTORY"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.DIRECTORY"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "The file is a directory."
  syntax:
    content: "public static final NtfsAttributes DIRECTORY"
    return:
      type: "com.microsoft.azure.storage.file.NtfsAttributes"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.HIDDEN"
  id: "HIDDEN"
  parent: "com.microsoft.azure.storage.file.NtfsAttributes"
  langs:
  - "java"
  name: "HIDDEN"
  nameWithType: "NtfsAttributes.HIDDEN"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.HIDDEN"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "The file is hidden, and thus is not included in ordinary directory listing."
  syntax:
    content: "public static final NtfsAttributes HIDDEN"
    return:
      type: "com.microsoft.azure.storage.file.NtfsAttributes"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.NORMAL"
  id: "NORMAL"
  parent: "com.microsoft.azure.storage.file.NtfsAttributes"
  langs:
  - "java"
  name: "NORMAL"
  nameWithType: "NtfsAttributes.NORMAL"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.NORMAL"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "The file is a standard file that has no special attributes."
  syntax:
    content: "public static final NtfsAttributes NORMAL"
    return:
      type: "com.microsoft.azure.storage.file.NtfsAttributes"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.NOT_CONTENT_INDEXED"
  id: "NOT_CONTENT_INDEXED"
  parent: "com.microsoft.azure.storage.file.NtfsAttributes"
  langs:
  - "java"
  name: "NOT_CONTENT_INDEXED"
  nameWithType: "NtfsAttributes.NOT_CONTENT_INDEXED"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.NOT_CONTENT_INDEXED"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "The file will not be indexed by the operating system's content indexing service."
  syntax:
    content: "public static final NtfsAttributes NOT_CONTENT_INDEXED"
    return:
      type: "com.microsoft.azure.storage.file.NtfsAttributes"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.NO_SCRUB_DATA"
  id: "NO_SCRUB_DATA"
  parent: "com.microsoft.azure.storage.file.NtfsAttributes"
  langs:
  - "java"
  name: "NO_SCRUB_DATA"
  nameWithType: "NtfsAttributes.NO_SCRUB_DATA"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.NO_SCRUB_DATA"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "The file or directory is excluded from the data integrity scan. When this value is applied to a directory, by default, all new files and subdirectories within that directory are excluded from data integrity."
  syntax:
    content: "public static final NtfsAttributes NO_SCRUB_DATA"
    return:
      type: "com.microsoft.azure.storage.file.NtfsAttributes"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.NtfsAttributes()"
  id: "NtfsAttributes()"
  parent: "com.microsoft.azure.storage.file.NtfsAttributes"
  langs:
  - "java"
  name: "NtfsAttributes()"
  nameWithType: "NtfsAttributes.NtfsAttributes()"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.NtfsAttributes()"
  overload: "com.microsoft.azure.storage.file.NtfsAttributes.NtfsAttributes*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.file"
  syntax:
    content: "private NtfsAttributes()"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.OFFLINE"
  id: "OFFLINE"
  parent: "com.microsoft.azure.storage.file.NtfsAttributes"
  langs:
  - "java"
  name: "OFFLINE"
  nameWithType: "NtfsAttributes.OFFLINE"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.OFFLINE"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "The file is offline. The data of the file is not immediately available."
  syntax:
    content: "public static final NtfsAttributes OFFLINE"
    return:
      type: "com.microsoft.azure.storage.file.NtfsAttributes"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.READ_ONLY"
  id: "READ_ONLY"
  parent: "com.microsoft.azure.storage.file.NtfsAttributes"
  langs:
  - "java"
  name: "READ_ONLY"
  nameWithType: "NtfsAttributes.READ_ONLY"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.READ_ONLY"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "The file is read-only."
  syntax:
    content: "public static final NtfsAttributes READ_ONLY"
    return:
      type: "com.microsoft.azure.storage.file.NtfsAttributes"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.SYSTEM"
  id: "SYSTEM"
  parent: "com.microsoft.azure.storage.file.NtfsAttributes"
  langs:
  - "java"
  name: "SYSTEM"
  nameWithType: "NtfsAttributes.SYSTEM"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.SYSTEM"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "The file is a system file. That is, the file is part of the operating system or is used exclusively by the operating system."
  syntax:
    content: "public static final NtfsAttributes SYSTEM"
    return:
      type: "com.microsoft.azure.storage.file.NtfsAttributes"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.TEMPORARY"
  id: "TEMPORARY"
  parent: "com.microsoft.azure.storage.file.NtfsAttributes"
  langs:
  - "java"
  name: "TEMPORARY"
  nameWithType: "NtfsAttributes.TEMPORARY"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.TEMPORARY"
  type: "Field"
  package: "com.microsoft.azure.storage.file"
  summary: "The file is temporary. A temporary file contains data that is needed while an application is executing but is not needed after the application is finished. File systems try to keep all the data in memory for quicker access rather than flushing the data back to mass storage. A temporary file should be deleted by the application as soon as it is no longer needed."
  syntax:
    content: "public static final NtfsAttributes TEMPORARY"
    return:
      type: "com.microsoft.azure.storage.file.NtfsAttributes"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.toAttributes(java.lang.String)"
  id: "toAttributes(java.lang.String)"
  parent: "com.microsoft.azure.storage.file.NtfsAttributes"
  langs:
  - "java"
  name: "toAttributes(String ntfsAttributes)"
  nameWithType: "NtfsAttributes.toAttributes(String ntfsAttributes)"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.toAttributes(String ntfsAttributes)"
  overload: "com.microsoft.azure.storage.file.NtfsAttributes.toAttributes*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates an enum set of `NtfsAttributes` from a valid String ."
  syntax:
    content: "public static EnumSet<NtfsAttributes> toAttributes(String ntfsAttributes)"
    parameters:
    - id: "ntfsAttributes"
      type: "java.lang.String"
      description: "A <code>String</code> that represents the ntfs attributes. The string must contain one or\n            more of the following values delimited by a |. Note they are case sensitive.\n            <ul>\n            <li><code>ReadOnly</code></li>\n            <li><code>Hidden</code></li>\n            <li><code>System</code></li>\n            <li><code>None</code></li>\n            <li><code>Directory</code></li>\n            <li><code>Archive</code></li>\n            <li><code>Temporary</code></li>\n            <li><code>Offline</code></li>\n            <li><code>NotContentIndexed</code></li>\n            <li><code>NoScrubData</code></li>\n            </ul>"
    return:
      type: "java.util.EnumSet<com.microsoft.azure.storage.file.NtfsAttributes>"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.toString(java.util.EnumSet<com.microsoft.azure.storage.file.NtfsAttributes>)"
  id: "toString(java.util.EnumSet<com.microsoft.azure.storage.file.NtfsAttributes>)"
  parent: "com.microsoft.azure.storage.file.NtfsAttributes"
  langs:
  - "java"
  name: "toString(EnumSet<NtfsAttributes> ntfsAttributes)"
  nameWithType: "NtfsAttributes.toString(EnumSet<NtfsAttributes> ntfsAttributes)"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.toString(EnumSet<NtfsAttributes> ntfsAttributes)"
  overload: "com.microsoft.azure.storage.file.NtfsAttributes.toString*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Converts an enum set of `NtfsAttributes` to a string."
  syntax:
    content: "public static String toString(EnumSet<NtfsAttributes> ntfsAttributes)"
    parameters:
    - id: "ntfsAttributes"
      type: "java.util.EnumSet<com.microsoft.azure.storage.file.NtfsAttributes>"
    return:
      type: "java.lang.String"
      description: "A <code>String</code> that represents the NTFS Attributes in the correct format delimited by |\n         which is described at <xref uid=\"com.microsoft.azure.storage.file.NtfsAttributes.toAttributes(java.lang.String)\" data-throw-if-not-resolved=\"false\">#toAttributes(String)</xref>."
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.valueOf(java.lang.String)"
  id: "valueOf(java.lang.String)"
  parent: "com.microsoft.azure.storage.file.NtfsAttributes"
  langs:
  - "java"
  name: "valueOf(String name)"
  nameWithType: "NtfsAttributes.valueOf(String name)"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.valueOf(String name)"
  overload: "com.microsoft.azure.storage.file.NtfsAttributes.valueOf*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  syntax:
    content: "public static NtfsAttributes valueOf(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    return:
      type: "com.microsoft.azure.storage.file.NtfsAttributes"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.values()"
  id: "values()"
  parent: "com.microsoft.azure.storage.file.NtfsAttributes"
  langs:
  - "java"
  name: "values()"
  nameWithType: "NtfsAttributes.values()"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.values()"
  overload: "com.microsoft.azure.storage.file.NtfsAttributes.values*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  syntax:
    content: "public static NtfsAttributes[] values()"
    return:
      type: "com.microsoft.azure.storage.file.NtfsAttributes[]"
references:
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.NtfsAttributes*"
  name: "NtfsAttributes"
  nameWithType: "NtfsAttributes.NtfsAttributes"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.NtfsAttributes"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes[]"
  spec.java:
  - uid: "com.microsoft.azure.storage.file.NtfsAttributes"
    name: "NtfsAttributes"
    fullName: "com.microsoft.azure.storage.file.NtfsAttributes"
  - name: "[]"
    fullName: "[]"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.values*"
  name: "values"
  nameWithType: "NtfsAttributes.values"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.values"
  package: "com.microsoft.azure.storage.file"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.valueOf*"
  name: "valueOf"
  nameWithType: "NtfsAttributes.valueOf"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.valueOf"
  package: "com.microsoft.azure.storage.file"
- uid: "java.util.EnumSet<com.microsoft.azure.storage.file.NtfsAttributes>"
  spec.java:
  - uid: "java.util.EnumSet"
    name: "EnumSet"
    fullName: "java.util.EnumSet"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.file.NtfsAttributes"
    name: "NtfsAttributes"
    fullName: "com.microsoft.azure.storage.file.NtfsAttributes"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.toString*"
  name: "toString"
  nameWithType: "NtfsAttributes.toString"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.toString"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.NtfsAttributes.toAttributes*"
  name: "toAttributes"
  nameWithType: "NtfsAttributes.toAttributes"
  fullName: "com.microsoft.azure.storage.file.NtfsAttributes.toAttributes"
  package: "com.microsoft.azure.storage.file"
- uid: "java.lang.Enum<com.microsoft.azure.storage.file.NtfsAttributes>"
  name: "Enum<NtfsAttributes>"
  nameWithType: "Enum<NtfsAttributes>"
  fullName: "java.lang.Enum<com.microsoft.azure.storage.file.NtfsAttributes>"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Enum.toString()"
  name: "Enum.toString()"
  nameWithType: "Enum.toString()"
  fullName: "java.lang.Enum.toString()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Enum.clone()"
  name: "Enum.clone()"
  nameWithType: "Enum.clone()"
  fullName: "java.lang.Enum.clone()"
- uid: "java.lang.Enum.finalize()"
  name: "Enum.finalize()"
  nameWithType: "Enum.finalize()"
  fullName: "java.lang.Enum.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Enum.compareTo(E)"
  name: "Enum.compareTo(E)"
  nameWithType: "Enum.compareTo(E)"
  fullName: "java.lang.Enum.compareTo(E)"
- uid: "java.lang.Enum.name()"
  name: "Enum.name()"
  nameWithType: "Enum.name()"
  fullName: "java.lang.Enum.name()"
- uid: "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
  name: "Enum.<T>valueOf(Class<T>,String)"
  nameWithType: "Enum.<T>valueOf(Class<T>,String)"
  fullName: "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Enum.getDeclaringClass()"
  name: "Enum.getDeclaringClass()"
  nameWithType: "Enum.getDeclaringClass()"
  fullName: "java.lang.Enum.getDeclaringClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Enum.ordinal()"
  name: "Enum.ordinal()"
  nameWithType: "Enum.ordinal()"
  fullName: "java.lang.Enum.ordinal()"
- uid: "java.lang.Enum.hashCode()"
  name: "Enum.hashCode()"
  nameWithType: "Enum.hashCode()"
  fullName: "java.lang.Enum.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Enum.equals(java.lang.Object)"
  name: "Enum.equals(Object)"
  nameWithType: "Enum.equals(Object)"
  fullName: "java.lang.Enum.equals(java.lang.Object)"
- uid: "java.util.EnumSet"
  name: "EnumSet"
  nameWithType: "EnumSet"
  fullName: "java.util.EnumSet"
- uid: "java.lang.Enum"
  name: "Enum"
  nameWithType: "Enum"
  fullName: "java.lang.Enum"
- uid: "java.lang.Enum."
  name: "Enum."
  nameWithType: "Enum."
  fullName: "java.lang.Enum."
- uid: "T>,java.lang.String)"
  name: "T>,String)"
  nameWithType: "T>,String)"
  fullName: "T>,java.lang.String)"
- uid: "T>valueOf(java.lang.Class"
  name: "T>valueOf(Class"
  nameWithType: "T>valueOf(Class"
  fullName: "T>valueOf(java.lang.Class"
