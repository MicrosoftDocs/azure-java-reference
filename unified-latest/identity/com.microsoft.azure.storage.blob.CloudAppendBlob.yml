### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  id: "CloudAppendBlob"
  parent: "com.microsoft.azure.storage.blob"
  children:
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(com.microsoft.azure.storage.StorageUri)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(com.microsoft.azure.storage.StorageUri,com.microsoft.azure.storage.StorageCredentials)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.StorageCredentials)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(com.microsoft.azure.storage.blob.CloudAppendBlob)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(java.lang.String,java.lang.String,com.microsoft.azure.storage.blob.CloudBlobContainer)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(java.net.URI)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(java.net.URI,com.microsoft.azure.storage.StorageCredentials)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(java.net.URI,java.lang.String,com.microsoft.azure.storage.StorageCredentials)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.append(java.io.InputStream,long)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.append(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock(java.io.InputStream,long)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlockFromURI(java.net.URI,java.lang.Long,java.lang.Long)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlockFromURI(java.net.URI,java.lang.Long,java.lang.Long,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromByteArray(byte[],int,int)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromByteArray(byte[],int,int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromFile(java.lang.String)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.appendText(java.lang.String)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.appendText(java.lang.String,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.createOrReplace()"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.createOrReplace(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteExisting()"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteExisting(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteNew()"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteNew(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.setStreamWriteSizeInBytes(int)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.startCopy(com.microsoft.azure.storage.blob.CloudAppendBlob)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.startCopy(com.microsoft.azure.storage.blob.CloudAppendBlob,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.upload(java.io.InputStream,long)"
  - "com.microsoft.azure.storage.blob.CloudAppendBlob.upload(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  langs:
  - "java"
  name: "CloudAppendBlob"
  nameWithType: "CloudAppendBlob"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  type: "Class"
  package: "com.microsoft.azure.storage.blob"
  summary: "Represents a Microsoft Azure Append Blob."
  syntax:
    content: "public final class CloudAppendBlob extends CloudBlob"
  inheritance:
  - "java.lang.Object"
  - "com.microsoft.azure.storage.blob.CloudBlob"
  inheritedMembers:
  - "com.microsoft.azure.storage.blob.CloudBlob.<T,R>validateCPKHeaders(com.microsoft.azure.storage.core.StorageRequest<com.microsoft.azure.storage.blob.CloudBlobClient,T,R>,com.microsoft.azure.storage.blob.BlobRequestOptions,boolean)"
  - "com.microsoft.azure.storage.blob.CloudBlob.abortCopy(java.lang.String)"
  - "com.microsoft.azure.storage.blob.CloudBlob.abortCopy(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.acquireLease()"
  - "com.microsoft.azure.storage.blob.CloudBlob.acquireLease(java.lang.Integer,java.lang.String)"
  - "com.microsoft.azure.storage.blob.CloudBlob.acquireLease(java.lang.Integer,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.assertCorrectBlobType()"
  - "com.microsoft.azure.storage.blob.CloudBlob.assertNoWriteOperationForSnapshot()"
  - "com.microsoft.azure.storage.blob.CloudBlob.breakLease(java.lang.Integer)"
  - "com.microsoft.azure.storage.blob.CloudBlob.breakLease(java.lang.Integer,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.changeLease(java.lang.String,com.microsoft.azure.storage.AccessCondition)"
  - "com.microsoft.azure.storage.blob.CloudBlob.changeLease(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot()"
  - "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(java.util.HashMap<java.lang.String,java.lang.String>,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.delete()"
  - "com.microsoft.azure.storage.blob.CloudBlob.delete(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.deleteIfExists()"
  - "com.microsoft.azure.storage.blob.CloudBlob.deleteIfExists(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.deleteImpl(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions)"
  - "com.microsoft.azure.storage.blob.CloudBlob.download(java.io.OutputStream)"
  - "com.microsoft.azure.storage.blob.CloudBlob.download(java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInfo()"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInfo(com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInformationImpl(com.microsoft.azure.storage.RequestOptions)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadAttributes()"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadAttributes(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadRange(long,java.lang.Long,java.io.OutputStream)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadRange(long,java.lang.Long,java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeInternal(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeToByteArray(long,java.lang.Long,byte[],int)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeToByteArray(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadToByteArray(byte[],int)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadToByteArray(byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadToFile(java.lang.String)"
  - "com.microsoft.azure.storage.blob.CloudBlob.downloadToFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.exists()"
  - "com.microsoft.azure.storage.blob.CloudBlob.exists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,java.lang.String)"
  - "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,java.lang.String,com.microsoft.azure.storage.IPRange,com.microsoft.azure.storage.SharedAccessProtocols)"
  - "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,java.lang.String)"
  - "com.microsoft.azure.storage.blob.CloudBlob.generateUserDelegationSharedAccessSignature(com.microsoft.azure.storage.UserDelegationKey,com.microsoft.azure.storage.blob.SharedAccessBlobPolicy)"
  - "com.microsoft.azure.storage.blob.CloudBlob.generateUserDelegationSharedAccessSignature(com.microsoft.azure.storage.UserDelegationKey,com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,com.microsoft.azure.storage.IPRange,com.microsoft.azure.storage.SharedAccessProtocols)"
  - "com.microsoft.azure.storage.blob.CloudBlob.getCanonicalName(boolean)"
  - "com.microsoft.azure.storage.blob.CloudBlob.getContainer()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getCopyState()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getMetadata()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getName()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getParent()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getParentNameFromURI(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.blob.CloudBlobContainer)"
  - "com.microsoft.azure.storage.blob.CloudBlob.getProperties()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getQualifiedStorageUri()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getQualifiedUri()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getServiceClient()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotID()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotQualifiedStorageUri()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotQualifiedUri()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getStorageUri()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getStreamMinimumReadSizeInBytes()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getStreamWriteSizeInBytes()"
  - "com.microsoft.azure.storage.blob.CloudBlob.getTransformedAddress(com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.getUri()"
  - "com.microsoft.azure.storage.blob.CloudBlob.isSnapshot()"
  - "com.microsoft.azure.storage.blob.CloudBlob.openInputStream()"
  - "com.microsoft.azure.storage.blob.CloudBlob.openInputStream(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.openInputStream(long,java.lang.Long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.releaseLease(com.microsoft.azure.storage.AccessCondition)"
  - "com.microsoft.azure.storage.blob.CloudBlob.releaseLease(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.renewLease(com.microsoft.azure.storage.AccessCondition)"
  - "com.microsoft.azure.storage.blob.CloudBlob.renewLease(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.setContainer(com.microsoft.azure.storage.blob.CloudBlobContainer)"
  - "com.microsoft.azure.storage.blob.CloudBlob.setMetadata(java.util.HashMap<java.lang.String,java.lang.String>)"
  - "com.microsoft.azure.storage.blob.CloudBlob.setProperties(com.microsoft.azure.storage.blob.BlobProperties)"
  - "com.microsoft.azure.storage.blob.CloudBlob.setSnapshotID(java.lang.String)"
  - "com.microsoft.azure.storage.blob.CloudBlob.setStorageUri(com.microsoft.azure.storage.StorageUri)"
  - "com.microsoft.azure.storage.blob.CloudBlob.setStreamMinimumReadSizeInBytes(int)"
  - "com.microsoft.azure.storage.blob.CloudBlob.setStreamWriteSizeInBytes(int)"
  - "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI)"
  - "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,boolean,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,boolean,java.lang.String,com.microsoft.azure.storage.blob.RehydratePriority,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.startCopyImpl(java.net.URI,java.lang.String,boolean,boolean,java.lang.String,com.microsoft.azure.storage.blob.RehydratePriority,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions)"
  - "com.microsoft.azure.storage.blob.CloudBlob.undelete()"
  - "com.microsoft.azure.storage.blob.CloudBlob.undelete(com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.updateEtagAndLastModifiedFromResponse(java.net.HttpURLConnection)"
  - "com.microsoft.azure.storage.blob.CloudBlob.updateLengthFromResponse(java.net.HttpURLConnection)"
  - "com.microsoft.azure.storage.blob.CloudBlob.upload(java.io.InputStream,long)"
  - "com.microsoft.azure.storage.blob.CloudBlob.upload(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadBlobTierImpl(java.lang.String,java.lang.String,com.microsoft.azure.storage.blob.BlobRequestOptions)"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadFromByteArray(byte[],int,int)"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadFromByteArray(byte[],int,int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadFromFile(java.lang.String)"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadFromFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadMetadata()"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadMetadata(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadProperties()"
  - "com.microsoft.azure.storage.blob.CloudBlob.uploadProperties(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(com.microsoft.azure.storage.StorageUri)"
  id: "CloudAppendBlob(com.microsoft.azure.storage.StorageUri)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "CloudAppendBlob(StorageUri blobAbsoluteUri)"
  nameWithType: "CloudAppendBlob.CloudAppendBlob(StorageUri blobAbsoluteUri)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(StorageUri blobAbsoluteUri)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an instance of the `CloudAppendBlob` class using the specified absolute URI and storage service client."
  syntax:
    content: "public CloudAppendBlob(StorageUri blobAbsoluteUri)"
    parameters:
    - id: "blobAbsoluteUri"
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> object which represents the absolute URI to the blob."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(com.microsoft.azure.storage.StorageUri,com.microsoft.azure.storage.StorageCredentials)"
  id: "CloudAppendBlob(com.microsoft.azure.storage.StorageUri,com.microsoft.azure.storage.StorageCredentials)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "CloudAppendBlob(StorageUri blobAbsoluteUri, StorageCredentials credentials)"
  nameWithType: "CloudAppendBlob.CloudAppendBlob(StorageUri blobAbsoluteUri, StorageCredentials credentials)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(StorageUri blobAbsoluteUri, StorageCredentials credentials)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an instance of the `CloudAppendBlob` class using the specified absolute StorageUri and credentials."
  syntax:
    content: "public CloudAppendBlob(StorageUri blobAbsoluteUri, StorageCredentials credentials)"
    parameters:
    - id: "blobAbsoluteUri"
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> object that represents the absolute URI to the blob."
    - id: "credentials"
      type: "com.microsoft.azure.storage.StorageCredentials"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageCredentials\" data-throw-if-not-resolved=\"false\">StorageCredentials</xref> object used to authenticate access."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.StorageCredentials)"
  id: "CloudAppendBlob(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.StorageCredentials)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "CloudAppendBlob(StorageUri blobAbsoluteUri, String snapshotID, StorageCredentials credentials)"
  nameWithType: "CloudAppendBlob.CloudAppendBlob(StorageUri blobAbsoluteUri, String snapshotID, StorageCredentials credentials)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(StorageUri blobAbsoluteUri, String snapshotID, StorageCredentials credentials)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an instance of the `CloudAppendBlob` class using the specified absolute StorageUri, snapshot ID, and credentials."
  syntax:
    content: "public CloudAppendBlob(StorageUri blobAbsoluteUri, String snapshotID, StorageCredentials credentials)"
    parameters:
    - id: "blobAbsoluteUri"
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> object that represents the absolute URI to the blob."
    - id: "snapshotID"
      type: "java.lang.String"
      description: "A <code>String</code> that represents the snapshot version, if applicable."
    - id: "credentials"
      type: "com.microsoft.azure.storage.StorageCredentials"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageCredentials\" data-throw-if-not-resolved=\"false\">StorageCredentials</xref> object used to authenticate access."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(com.microsoft.azure.storage.blob.CloudAppendBlob)"
  id: "CloudAppendBlob(com.microsoft.azure.storage.blob.CloudAppendBlob)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "CloudAppendBlob(CloudAppendBlob otherBlob)"
  nameWithType: "CloudAppendBlob.CloudAppendBlob(CloudAppendBlob otherBlob)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(CloudAppendBlob otherBlob)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an instance of the `CloudAppendBlob` class by copying values from another append blob."
  syntax:
    content: "public CloudAppendBlob(CloudAppendBlob otherBlob)"
    parameters:
    - id: "otherBlob"
      type: "com.microsoft.azure.storage.blob.CloudAppendBlob"
      description: "A <code>CloudAppendBlob</code> object which represents the append blob to copy."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(java.lang.String,java.lang.String,com.microsoft.azure.storage.blob.CloudBlobContainer)"
  id: "CloudAppendBlob(java.lang.String,java.lang.String,com.microsoft.azure.storage.blob.CloudBlobContainer)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "CloudAppendBlob(String blobName, String snapshotID, CloudBlobContainer container)"
  nameWithType: "CloudAppendBlob.CloudAppendBlob(String blobName, String snapshotID, CloudBlobContainer container)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(String blobName, String snapshotID, CloudBlobContainer container)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an instance of the `CloudAppendBlob` class using the specified type, name, snapshot ID, and container."
  syntax:
    content: "protected CloudAppendBlob(String blobName, String snapshotID, CloudBlobContainer container)"
    parameters:
    - id: "blobName"
      type: "java.lang.String"
      description: "Name of the blob."
    - id: "snapshotID"
      type: "java.lang.String"
      description: "A <code>String</code> that represents the snapshot version, if applicable."
    - id: "container"
      type: "com.microsoft.azure.storage.blob.CloudBlobContainer"
      description: "The reference to the parent container."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(java.net.URI)"
  id: "CloudAppendBlob(java.net.URI)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "CloudAppendBlob(URI blobAbsoluteUri)"
  nameWithType: "CloudAppendBlob.CloudAppendBlob(URI blobAbsoluteUri)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(URI blobAbsoluteUri)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an instance of the `CloudAppendBlob` class using the specified absolute URI and storage service client."
  syntax:
    content: "public CloudAppendBlob(URI blobAbsoluteUri)"
    parameters:
    - id: "blobAbsoluteUri"
      type: "java.net.URI"
      description: "A <code>java.net.URI</code> object which represents the absolute URI to the blob."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(java.net.URI,com.microsoft.azure.storage.StorageCredentials)"
  id: "CloudAppendBlob(java.net.URI,com.microsoft.azure.storage.StorageCredentials)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "CloudAppendBlob(URI blobAbsoluteUri, StorageCredentials credentials)"
  nameWithType: "CloudAppendBlob.CloudAppendBlob(URI blobAbsoluteUri, StorageCredentials credentials)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(URI blobAbsoluteUri, StorageCredentials credentials)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an instance of the `CloudAppendBlob` class using the specified absolute URI and credentials."
  syntax:
    content: "public CloudAppendBlob(URI blobAbsoluteUri, StorageCredentials credentials)"
    parameters:
    - id: "blobAbsoluteUri"
      type: "java.net.URI"
      description: "A <code>java.net.URI</code> object that represents the absolute URI to the blob."
    - id: "credentials"
      type: "com.microsoft.azure.storage.StorageCredentials"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageCredentials\" data-throw-if-not-resolved=\"false\">StorageCredentials</xref> object used to authenticate access."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(java.net.URI,java.lang.String,com.microsoft.azure.storage.StorageCredentials)"
  id: "CloudAppendBlob(java.net.URI,java.lang.String,com.microsoft.azure.storage.StorageCredentials)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "CloudAppendBlob(URI blobAbsoluteUri, String snapshotID, StorageCredentials credentials)"
  nameWithType: "CloudAppendBlob.CloudAppendBlob(URI blobAbsoluteUri, String snapshotID, StorageCredentials credentials)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(URI blobAbsoluteUri, String snapshotID, StorageCredentials credentials)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an instance of the `CloudAppendBlob` class using the specified absolute URI, snapshot ID, and credentials."
  syntax:
    content: "public CloudAppendBlob(URI blobAbsoluteUri, String snapshotID, StorageCredentials credentials)"
    parameters:
    - id: "blobAbsoluteUri"
      type: "java.net.URI"
      description: "A <code>java.net.URI</code> object that represents the absolute URI to the blob."
    - id: "snapshotID"
      type: "java.lang.String"
      description: "A <code>String</code> that represents the snapshot version, if applicable."
    - id: "credentials"
      type: "com.microsoft.azure.storage.StorageCredentials"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageCredentials\" data-throw-if-not-resolved=\"false\">StorageCredentials</xref> object used to authenticate access."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.append(java.io.InputStream,long)"
  id: "append(java.io.InputStream,long)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "append(InputStream sourceStream, long length)"
  nameWithType: "CloudAppendBlob.append(InputStream sourceStream, long length)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.append(InputStream sourceStream, long length)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.append*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Appends a stream to an append blob. This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.\n\nIf you are doing writes in a single writer scenario, please look at <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(java.lang.Boolean)\" data-throw-if-not-resolved=\"false\">BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)</xref> and see if setting this flag to `true` is acceptable for you."
  syntax:
    content: "public void append(InputStream sourceStream, long length)"
    parameters:
    - id: "sourceStream"
      type: "java.io.InputStream"
      description: "A <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> object providing the blob content to append."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the stream data, or -1 if unknown."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.append(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "append(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "append(InputStream sourceStream, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudAppendBlob.append(InputStream sourceStream, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.append(InputStream sourceStream, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.append*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Appends a stream to an append blob. This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.\n\nIf you are doing writes in a single writer scenario, please look at <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(java.lang.Boolean)\" data-throw-if-not-resolved=\"false\">BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)</xref> and see if setting this flag to `true` is acceptable for you."
  syntax:
    content: "public void append(InputStream sourceStream, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "sourceStream"
      type: "java.io.InputStream"
      description: "A <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> object providing the blob content to append."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the stream data, or -1 if unknown."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock(java.io.InputStream,long)"
  id: "appendBlock(java.io.InputStream,long)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "appendBlock(InputStream sourceStream, long length)"
  nameWithType: "CloudAppendBlob.appendBlock(InputStream sourceStream, long length)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock(InputStream sourceStream, long length)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Commits a new block of data to the end of the blob."
  syntax:
    content: "public Long appendBlock(InputStream sourceStream, long length)"
    parameters:
    - id: "sourceStream"
      type: "java.io.InputStream"
      description: "An <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> object that represents the input stream to write to the append blob."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the stream data, or -1 if unknown."
    return:
      type: "java.lang.Long"
      description: "The offset at which the block was appended."
  exceptions:
  - type: "java.io.IOException"
    description: "If an I/O exception occurred."
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If an I/O exception occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "appendBlock(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "appendBlock(InputStream sourceStream, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudAppendBlob.appendBlock(InputStream sourceStream, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock(InputStream sourceStream, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Commits a new block of data to the end of the blob."
  syntax:
    content: "public Long appendBlock(InputStream sourceStream, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "sourceStream"
      type: "java.io.InputStream"
      description: "An <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> object that represents the input stream to write to the Append blob."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the stream data, or -1 if unknown."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "java.lang.Long"
      description: "The offset at which the block was appended."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If an I/O exception occurred."
  - type: "java.io.IOException"
    description: "If an I/O exception occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlockFromURI(java.net.URI,java.lang.Long,java.lang.Long)"
  id: "appendBlockFromURI(java.net.URI,java.lang.Long,java.lang.Long)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "appendBlockFromURI(URI copySource, Long offset, Long length)"
  nameWithType: "CloudAppendBlob.appendBlockFromURI(URI copySource, Long offset, Long length)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlockFromURI(URI copySource, Long offset, Long length)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlockFromURI*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Appends a block, using the specified source URL."
  syntax:
    content: "public Long appendBlockFromURI(URI copySource, Long offset, Long length)"
    parameters:
    - id: "copySource"
      type: "java.net.URI"
      description: "The <code>URI</code> of the source data. It can point to any Azure Blob or File that is public or the\n            URL can include a shared access signature."
    - id: "offset"
      type: "java.lang.Long"
      description: "A <code>long</code> which represents the offset to use as the starting point for the source."
    - id: "length"
      type: "java.lang.Long"
      description: "A <code>Long</code> which represents the number of bytes to copy or <code>null</code> to copy until the\n           end of the blob."
    return:
      type: "java.lang.Long"
      description: "The offset at which the block was appended."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlockFromURI(java.net.URI,java.lang.Long,java.lang.Long,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "appendBlockFromURI(java.net.URI,java.lang.Long,java.lang.Long,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "appendBlockFromURI(URI copySource, Long offset, Long length, String md5, AccessCondition accessCondition, AccessCondition sourceAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudAppendBlob.appendBlockFromURI(URI copySource, Long offset, Long length, String md5, AccessCondition accessCondition, AccessCondition sourceAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlockFromURI(URI copySource, Long offset, Long length, String md5, AccessCondition accessCondition, AccessCondition sourceAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlockFromURI*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Appends a block, using the specified source URL."
  syntax:
    content: "public Long appendBlockFromURI(URI copySource, Long offset, Long length, String md5, AccessCondition accessCondition, AccessCondition sourceAccessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "copySource"
      type: "java.net.URI"
      description: "The <code>URI</code> of the source data. It can point to any Azure Blob or File that is public or the\n            URL can include a shared access signature."
    - id: "offset"
      type: "java.lang.Long"
      description: "A <code>long</code> which represents the offset to use as the starting point for the source."
    - id: "length"
      type: "java.lang.Long"
      description: "A <code>Long</code> which represents the number of bytes to copy or <code>null</code> to copy until the\n           end of the blob."
    - id: "md5"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the MD5 caluclated for the range of bytes of the source."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "sourceAccessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the source blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "java.lang.Long"
      description: "The offset at which the block was appended."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromByteArray(byte[],int,int)"
  id: "appendFromByteArray(byte[],int,int)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "appendFromByteArray(byte[] buffer, int offset, int length)"
  nameWithType: "CloudAppendBlob.appendFromByteArray(byte[] buffer, int offset, int length)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromByteArray(byte[] buffer, int offset, int length)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromByteArray*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Appends the contents of a byte array to an append blob.This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.\n\nIf you are doing writes in a single writer scenario, please look at <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(java.lang.Boolean)\" data-throw-if-not-resolved=\"false\">BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)</xref> and see if setting this flag to `true` is acceptable for you."
  syntax:
    content: "public void appendFromByteArray(byte[] buffer, int offset, int length)"
    parameters:
    - id: "buffer"
      type: "byte[]"
      description: "A <code>byte</code> array which represents the data to append to the blob."
    - id: "offset"
      type: "int"
      description: "A <code>int</code> which represents the offset of the byte array from which to start the data upload."
    - id: "length"
      type: "int"
      description: "An <code>int</code> which represents the number of bytes to upload from the input buffer."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromByteArray(byte[],int,int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "appendFromByteArray(byte[],int,int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "appendFromByteArray(byte[] buffer, int offset, int length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudAppendBlob.appendFromByteArray(byte[] buffer, int offset, int length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromByteArray(byte[] buffer, int offset, int length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromByteArray*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Appends the contents of a byte array to an append blob.This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.\n\nIf you are doing writes in a single writer scenario, please look at <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(java.lang.Boolean)\" data-throw-if-not-resolved=\"false\">BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)</xref> and see if setting this flag to `true` is acceptable for you."
  syntax:
    content: "public void appendFromByteArray(byte[] buffer, int offset, int length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "buffer"
      type: "byte[]"
      description: "A <code>byte</code> array which represents the data to append to the blob."
    - id: "offset"
      type: "int"
      description: "A <code>int</code> which represents the offset of the byte array from which to start the data upload."
    - id: "length"
      type: "int"
      description: "An <code>int</code> which represents the number of bytes to upload from the input buffer."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromFile(java.lang.String)"
  id: "appendFromFile(java.lang.String)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "appendFromFile(String path)"
  nameWithType: "CloudAppendBlob.appendFromFile(String path)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromFile(String path)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromFile*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Appends a file to an append blob. This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.\n\nIf you are doing writes in a single writer scenario, please look at <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(java.lang.Boolean)\" data-throw-if-not-resolved=\"false\">BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)</xref> and see if setting this flag to `true` is acceptable for you."
  syntax:
    content: "public void appendFromFile(String path)"
    parameters:
    - id: "path"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the path to the file to be appended."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "appendFromFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "appendFromFile(String path, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudAppendBlob.appendFromFile(String path, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromFile(String path, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromFile*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Appends a file to an append blob. This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.\n\nIf you are doing writes in a single writer scenario, please look at <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(java.lang.Boolean)\" data-throw-if-not-resolved=\"false\">BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)</xref> and see if setting this flag to `true` is acceptable for you."
  syntax:
    content: "public void appendFromFile(String path, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "path"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the path to the file to be appended."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendText(java.lang.String)"
  id: "appendText(java.lang.String)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "appendText(String content)"
  nameWithType: "CloudAppendBlob.appendText(String content)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendText(String content)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendText*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Appends a string of text to an append blob using the platform's default encoding. This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.\n\nIf you are doing writes in a single writer scenario, please look at <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(java.lang.Boolean)\" data-throw-if-not-resolved=\"false\">BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)</xref> and see if setting this flag to `true` is acceptable for you."
  syntax:
    content: "public void appendText(String content)"
    parameters:
    - id: "content"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the content that will be appended to the blob."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendText(java.lang.String,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "appendText(java.lang.String,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "appendText(String content, String charsetName, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudAppendBlob.appendText(String content, String charsetName, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendText(String content, String charsetName, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendText*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Appends a string of text to an append blob using the specified encoding. This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.\n\nIf you are doing writes in a single writer scenario, please look at <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(java.lang.Boolean)\" data-throw-if-not-resolved=\"false\">BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)</xref> and see if setting this flag to `true` is acceptable for you."
  syntax:
    content: "public void appendText(String content, String charsetName, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "content"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the content that will be appended to the blob."
    - id: "charsetName"
      type: "java.lang.String"
      description: "A <code>String</code> which represents the name of the charset to use to encode the content.\n            If null, the platform's default encoding is used."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.io.IOException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.createOrReplace()"
  id: "createOrReplace()"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "createOrReplace()"
  nameWithType: "CloudAppendBlob.createOrReplace()"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.createOrReplace()"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.createOrReplace*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an empty append blob. If the blob already exists, this will replace it.\n\nTo avoid overwriting and instead throw an error, please use the <xref uid=\"com.microsoft.azure.storage.blob.CloudAppendBlob.createOrReplace(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)\" data-throw-if-not-resolved=\"false\">#createOrReplace(AccessCondition, BlobRequestOptions, OperationContext)</xref> overload with the appropriate <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref>."
  syntax:
    content: "public void createOrReplace()"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.createOrReplace(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "createOrReplace(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "createOrReplace(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudAppendBlob.createOrReplace(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.createOrReplace(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.createOrReplace*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Creates an append blob using the specified request options and operation context. If the blob already exists, this will replace it.\n\nTo avoid overwriting and instead throw an error, please pass in an <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> generated using <xref uid=\"com.microsoft.azure.storage.AccessCondition.generateIfNotExistsCondition()\" data-throw-if-not-resolved=\"false\">AccessCondition#generateIfNotExistsCondition()</xref>."
  syntax:
    content: "public void createOrReplace(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteExisting()"
  id: "openWriteExisting()"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "openWriteExisting()"
  nameWithType: "CloudAppendBlob.openWriteExisting()"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteExisting()"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteExisting*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Opens an output stream object to write data to the append blob. The append blob must already exist and will be appended to.\n\nIf you are doing writes in a single writer scenario, please look at <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(java.lang.Boolean)\" data-throw-if-not-resolved=\"false\">BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)</xref> and see if setting this flag to `true` is acceptable for you."
  syntax:
    content: "public BlobOutputStream openWriteExisting()"
    return:
      type: "com.microsoft.azure.storage.blob.BlobOutputStream"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobOutputStream\" data-throw-if-not-resolved=\"false\">BlobOutputStream</xref> object used to write data to the blob."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteExisting(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "openWriteExisting(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "openWriteExisting(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudAppendBlob.openWriteExisting(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteExisting(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteExisting*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Opens an output stream object to write data to the append blob, using the specified lease ID, request options and operation context. The append blob must already exist and will be appended to.\n\nIf you are doing writes in a single writer scenario, please look at <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(java.lang.Boolean)\" data-throw-if-not-resolved=\"false\">BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)</xref> and see if setting this flag to `true` is acceptable for you."
  syntax:
    content: "public BlobOutputStream openWriteExisting(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "com.microsoft.azure.storage.blob.BlobOutputStream"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobOutputStream\" data-throw-if-not-resolved=\"false\">BlobOutputStream</xref> object used to write data to the blob."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteNew()"
  id: "openWriteNew()"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "openWriteNew()"
  nameWithType: "CloudAppendBlob.openWriteNew()"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteNew()"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteNew*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Opens an output stream object to write data to the append blob. The append blob does not need to yet exist. If the blob already exists, this will replace it.\n\nTo avoid overwriting and instead throw an error, please use the <xref uid=\"com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteNew(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)\" data-throw-if-not-resolved=\"false\">#openWriteNew(AccessCondition, BlobRequestOptions, OperationContext)</xref> overload with the appropriate <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref>.\n\nIf you are doing writes in a single writer scenario, please look at <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(java.lang.Boolean)\" data-throw-if-not-resolved=\"false\">BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)</xref> and see if setting this flag to `true` is acceptable for you."
  syntax:
    content: "public BlobOutputStream openWriteNew()"
    return:
      type: "com.microsoft.azure.storage.blob.BlobOutputStream"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobOutputStream\" data-throw-if-not-resolved=\"false\">BlobOutputStream</xref> object used to write data to the blob."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteNew(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "openWriteNew(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "openWriteNew(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudAppendBlob.openWriteNew(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteNew(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteNew*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Opens an output stream object to write data to the append blob, using the specified lease ID, request options and operation context. The append blob does not need to yet exist. If the blob already exists, this will replace it.\n\nTo avoid overwriting and instead throw an error, please pass in an <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> generated using <xref uid=\"com.microsoft.azure.storage.AccessCondition.generateIfNotExistsCondition()\" data-throw-if-not-resolved=\"false\">AccessCondition#generateIfNotExistsCondition()</xref>.\n\nIf you are doing writes in a single writer scenario, please look at <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(java.lang.Boolean)\" data-throw-if-not-resolved=\"false\">BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)</xref> and see if setting this flag to `true` is acceptable for you."
  syntax:
    content: "public BlobOutputStream openWriteNew(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "com.microsoft.azure.storage.blob.BlobOutputStream"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobOutputStream\" data-throw-if-not-resolved=\"false\">BlobOutputStream</xref> object used to write data to the blob."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.setStreamWriteSizeInBytes(int)"
  id: "setStreamWriteSizeInBytes(int)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "setStreamWriteSizeInBytes(int streamWriteSizeInBytes)"
  nameWithType: "CloudAppendBlob.setStreamWriteSizeInBytes(int streamWriteSizeInBytes)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.setStreamWriteSizeInBytes(int streamWriteSizeInBytes)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.setStreamWriteSizeInBytes*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Sets the number of bytes to buffer when writing to a <xref uid=\"com.microsoft.azure.storage.blob.BlobOutputStream\" data-throw-if-not-resolved=\"false\">BlobOutputStream</xref>."
  syntax:
    content: "public void setStreamWriteSizeInBytes(int streamWriteSizeInBytes)"
    parameters:
    - id: "streamWriteSizeInBytes"
      type: "int"
      description: "An <code>int</code> which represents the maximum block size, in bytes, for writing to an append blob\n            while using a <xref uid=\"com.microsoft.azure.storage.blob.BlobOutputStream\" data-throw-if-not-resolved=\"false\">BlobOutputStream</xref> object, ranging from 16 KB to 4 MB, inclusive."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.startCopy(com.microsoft.azure.storage.blob.CloudAppendBlob)"
  id: "startCopy(com.microsoft.azure.storage.blob.CloudAppendBlob)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "startCopy(CloudAppendBlob sourceBlob)"
  nameWithType: "CloudAppendBlob.startCopy(CloudAppendBlob sourceBlob)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.startCopy(CloudAppendBlob sourceBlob)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.startCopy*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Requests the service to start copying a append blob's contents, properties, and metadata to a new append blob."
  syntax:
    content: "public final String startCopy(CloudAppendBlob sourceBlob)"
    parameters:
    - id: "sourceBlob"
      type: "com.microsoft.azure.storage.blob.CloudAppendBlob"
      description: "A <code>CloudAppendBlob</code> object that represents the source blob to copy."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the copy ID associated with the copy operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.startCopy(com.microsoft.azure.storage.blob.CloudAppendBlob,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "startCopy(com.microsoft.azure.storage.blob.CloudAppendBlob,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "startCopy(CloudAppendBlob sourceBlob, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudAppendBlob.startCopy(CloudAppendBlob sourceBlob, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.startCopy(CloudAppendBlob sourceBlob, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.startCopy*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Requests the service to start copying a append blob's contents, properties, and metadata to a new append blob, using the specified access conditions, lease ID, request options, and operation context."
  syntax:
    content: "public final String startCopy(CloudAppendBlob sourceBlob, AccessCondition sourceAccessCondition, AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "sourceBlob"
      type: "com.microsoft.azure.storage.blob.CloudAppendBlob"
      description: "A <code>CloudAppendBlob</code> object that represents the source blob to copy."
    - id: "sourceAccessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the source blob."
    - id: "destinationAccessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the destination blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "java.lang.String"
      description: "A <code>String</code> which represents the copy ID associated with the copy operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.upload(java.io.InputStream,long)"
  id: "upload(java.io.InputStream,long)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "upload(InputStream sourceStream, long length)"
  nameWithType: "CloudAppendBlob.upload(InputStream sourceStream, long length)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.upload(InputStream sourceStream, long length)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.upload*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Uploads the source stream data to the append blob. If the blob already exists on the service, it will be overwritten.\n\nIf you want to append data to an already existing blob, please see <xref uid=\"com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock(java.io.InputStream,long)\" data-throw-if-not-resolved=\"false\">#appendBlock(InputStream, long)</xref>.\n\nIf you are doing writes in a single writer scenario, please look at <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(java.lang.Boolean)\" data-throw-if-not-resolved=\"false\">BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)</xref> and see if setting this flag to `true` is acceptable for you."
  syntax:
    content: "public void upload(InputStream sourceStream, long length)"
    parameters:
    - id: "sourceStream"
      type: "java.io.InputStream"
      description: "An <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> object to read from."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the stream data, or -1 if unknown."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If an I/O exception occurred."
  - type: "java.io.IOException"
    description: "If an I/O exception occurred."
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.upload(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "upload(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.blob.CloudAppendBlob"
  langs:
  - "java"
  name: "upload(InputStream sourceStream, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudAppendBlob.upload(InputStream sourceStream, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.upload(InputStream sourceStream, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.blob.CloudAppendBlob.upload*"
  type: "Method"
  package: "com.microsoft.azure.storage.blob"
  summary: "Uploads the source stream data to the append blob using the specified lease ID, request options, and operation context. If the blob already exists on the service, it will be overwritten.\n\nIf you want to append data to an already existing blob, please see <xref uid=\"com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock(java.io.InputStream,long)\" data-throw-if-not-resolved=\"false\">#appendBlock(InputStream, long)</xref>.\n\nIf you are doing writes in a single writer scenario, please look at <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(java.lang.Boolean)\" data-throw-if-not-resolved=\"false\">BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)</xref> and see if setting this flag to `true` is acceptable for you."
  syntax:
    content: "public void upload(InputStream sourceStream, long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "sourceStream"
      type: "java.io.InputStream"
      description: "An <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\">InputStream</xref> object to read from."
    - id: "length"
      type: "long"
      description: "A <code>long</code> which represents the length, in bytes, of the stream data, or -1 if unknown."
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object which represents the access conditions for the blob."
    - id: "options"
      type: "com.microsoft.azure.storage.blob.BlobRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.blob.BlobRequestOptions\" data-throw-if-not-resolved=\"false\">BlobRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.blob.CloudBlobClient\" data-throw-if-not-resolved=\"false\">CloudBlobClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If an I/O exception occurred."
  - type: "java.io.IOException"
    description: "If an I/O exception occurred."
references:
- uid: "java.net.URI"
  spec.java:
  - uid: "java.net.URI"
    name: "URI"
    fullName: "java.net.URI"
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob*"
  name: "CloudAppendBlob"
  nameWithType: "CloudAppendBlob.CloudAppendBlob"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.StorageUri"
  name: "StorageUri"
  nameWithType: "StorageUri"
  fullName: "com.microsoft.azure.storage.StorageUri"
- uid: "com.microsoft.azure.storage.StorageCredentials"
  name: "StorageCredentials"
  nameWithType: "StorageCredentials"
  fullName: "com.microsoft.azure.storage.StorageCredentials"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.microsoft.azure.storage.blob.CloudBlobContainer"
  name: "CloudBlobContainer"
  nameWithType: "CloudBlobContainer"
  fullName: "com.microsoft.azure.storage.blob.CloudBlobContainer"
- uid: "com.microsoft.azure.storage.StorageException"
  name: "StorageException"
  nameWithType: "StorageException"
  fullName: "com.microsoft.azure.storage.StorageException"
- uid: "java.net.URISyntaxException"
  spec.java:
  - uid: "java.net.URISyntaxException"
    name: "URISyntaxException"
    fullName: "java.net.URISyntaxException"
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.startCopy*"
  name: "startCopy"
  nameWithType: "CloudAppendBlob.startCopy"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.startCopy"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.AccessCondition"
  name: "AccessCondition"
  nameWithType: "AccessCondition"
  fullName: "com.microsoft.azure.storage.AccessCondition"
- uid: "com.microsoft.azure.storage.blob.BlobRequestOptions"
  name: "BlobRequestOptions"
  nameWithType: "BlobRequestOptions"
  fullName: "com.microsoft.azure.storage.blob.BlobRequestOptions"
- uid: "com.microsoft.azure.storage.OperationContext"
  name: "OperationContext"
  nameWithType: "OperationContext"
  fullName: "com.microsoft.azure.storage.OperationContext"
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.createOrReplace*"
  name: "createOrReplace"
  nameWithType: "CloudAppendBlob.createOrReplace"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.createOrReplace"
  package: "com.microsoft.azure.storage.blob"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "java.io.InputStream"
  spec.java:
  - uid: "java.io.InputStream"
    name: "InputStream"
    fullName: "java.io.InputStream"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "java.lang.Long"
  spec.java:
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock*"
  name: "appendBlock"
  nameWithType: "CloudAppendBlob.appendBlock"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlockFromURI*"
  name: "appendBlockFromURI"
  nameWithType: "CloudAppendBlob.appendBlockFromURI"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlockFromURI"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.append*"
  name: "append"
  nameWithType: "CloudAppendBlob.append"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.append"
  package: "com.microsoft.azure.storage.blob"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromByteArray*"
  name: "appendFromByteArray"
  nameWithType: "CloudAppendBlob.appendFromByteArray"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromByteArray"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromFile*"
  name: "appendFromFile"
  nameWithType: "CloudAppendBlob.appendFromFile"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromFile"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendText*"
  name: "appendText"
  nameWithType: "CloudAppendBlob.appendText"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.appendText"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.BlobOutputStream"
  name: "BlobOutputStream"
  nameWithType: "BlobOutputStream"
  fullName: "com.microsoft.azure.storage.blob.BlobOutputStream"
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteExisting*"
  name: "openWriteExisting"
  nameWithType: "CloudAppendBlob.openWriteExisting"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteExisting"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteNew*"
  name: "openWriteNew"
  nameWithType: "CloudAppendBlob.openWriteNew"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteNew"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.upload*"
  name: "upload"
  nameWithType: "CloudAppendBlob.upload"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.upload"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudAppendBlob.setStreamWriteSizeInBytes*"
  name: "setStreamWriteSizeInBytes"
  nameWithType: "CloudAppendBlob.setStreamWriteSizeInBytes"
  fullName: "com.microsoft.azure.storage.blob.CloudAppendBlob.setStreamWriteSizeInBytes"
  package: "com.microsoft.azure.storage.blob"
- uid: "com.microsoft.azure.storage.blob.CloudBlob"
  name: "CloudBlob"
  nameWithType: "CloudBlob"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.acquireLease(java.lang.Integer,java.lang.String)"
  name: "CloudBlob.acquireLease(Integer,String)"
  nameWithType: "CloudBlob.acquireLease(Integer,String)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.acquireLease(java.lang.Integer,java.lang.String)"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getQualifiedUri()"
  name: "CloudBlob.getQualifiedUri()"
  nameWithType: "CloudBlob.getQualifiedUri()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getQualifiedUri()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotQualifiedStorageUri()"
  name: "CloudBlob.getSnapshotQualifiedStorageUri()"
  nameWithType: "CloudBlob.getSnapshotQualifiedStorageUri()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotQualifiedStorageUri()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.setStorageUri(com.microsoft.azure.storage.StorageUri)"
  name: "CloudBlob.setStorageUri(StorageUri)"
  nameWithType: "CloudBlob.setStorageUri(StorageUri)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.setStorageUri(com.microsoft.azure.storage.StorageUri)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.exists()"
  name: "CloudBlob.exists()"
  nameWithType: "CloudBlob.exists()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.exists()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.abortCopy(java.lang.String)"
  name: "CloudBlob.abortCopy(String)"
  nameWithType: "CloudBlob.abortCopy(String)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.abortCopy(java.lang.String)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeToByteArray(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.downloadRangeToByteArray(long,Long,byte[],int,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.downloadRangeToByteArray(long,Long,byte[],int,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeToByteArray(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.changeLease(java.lang.String,com.microsoft.azure.storage.AccessCondition)"
  name: "CloudBlob.changeLease(String,AccessCondition)"
  nameWithType: "CloudBlob.changeLease(String,AccessCondition)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.changeLease(java.lang.String,com.microsoft.azure.storage.AccessCondition)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.generateUserDelegationSharedAccessSignature(com.microsoft.azure.storage.UserDelegationKey,com.microsoft.azure.storage.blob.SharedAccessBlobPolicy)"
  name: "CloudBlob.generateUserDelegationSharedAccessSignature(UserDelegationKey,SharedAccessBlobPolicy)"
  nameWithType: "CloudBlob.generateUserDelegationSharedAccessSignature(UserDelegationKey,SharedAccessBlobPolicy)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.generateUserDelegationSharedAccessSignature(com.microsoft.azure.storage.UserDelegationKey,com.microsoft.azure.storage.blob.SharedAccessBlobPolicy)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.upload(java.io.InputStream,long)"
  name: "CloudBlob.upload(InputStream,long)"
  nameWithType: "CloudBlob.upload(InputStream,long)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.upload(java.io.InputStream,long)"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.changeLease(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.changeLease(String,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.changeLease(String,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.changeLease(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.delete(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.delete(DeleteSnapshotsOption,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.delete(DeleteSnapshotsOption,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.delete(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadProperties()"
  name: "CloudBlob.uploadProperties()"
  nameWithType: "CloudBlob.uploadProperties()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadProperties()"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.assertNoWriteOperationForSnapshot()"
  name: "CloudBlob.assertNoWriteOperationForSnapshot()"
  nameWithType: "CloudBlob.assertNoWriteOperationForSnapshot()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.assertNoWriteOperationForSnapshot()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getServiceClient()"
  name: "CloudBlob.getServiceClient()"
  nameWithType: "CloudBlob.getServiceClient()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getServiceClient()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadBlobTierImpl(java.lang.String,java.lang.String,com.microsoft.azure.storage.blob.BlobRequestOptions)"
  name: "CloudBlob.uploadBlobTierImpl(String,String,BlobRequestOptions)"
  nameWithType: "CloudBlob.uploadBlobTierImpl(String,String,BlobRequestOptions)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadBlobTierImpl(java.lang.String,java.lang.String,com.microsoft.azure.storage.blob.BlobRequestOptions)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getParent()"
  name: "CloudBlob.getParent()"
  nameWithType: "CloudBlob.getParent()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getParent()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,boolean,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.startCopy(URI,String,boolean,String,AccessCondition,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.startCopy(URI,String,boolean,String,AccessCondition,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,boolean,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.openInputStream()"
  name: "CloudBlob.openInputStream()"
  nameWithType: "CloudBlob.openInputStream()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.openInputStream()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.updateEtagAndLastModifiedFromResponse(java.net.HttpURLConnection)"
  name: "CloudBlob.updateEtagAndLastModifiedFromResponse(HttpURLConnection)"
  nameWithType: "CloudBlob.updateEtagAndLastModifiedFromResponse(HttpURLConnection)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.updateEtagAndLastModifiedFromResponse(java.net.HttpURLConnection)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.acquireLease()"
  name: "CloudBlob.acquireLease()"
  nameWithType: "CloudBlob.acquireLease()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.acquireLease()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.delete()"
  name: "CloudBlob.delete()"
  nameWithType: "CloudBlob.delete()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.delete()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.exists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.exists(AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.exists(AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.exists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadFromByteArray(byte[],int,int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.uploadFromByteArray(byte[],int,int,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.uploadFromByteArray(byte[],int,int,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadFromByteArray(byte[],int,int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.setContainer(com.microsoft.azure.storage.blob.CloudBlobContainer)"
  name: "CloudBlob.setContainer(CloudBlobContainer)"
  nameWithType: "CloudBlob.setContainer(CloudBlobContainer)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.setContainer(com.microsoft.azure.storage.blob.CloudBlobContainer)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadToByteArray(byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.downloadToByteArray(byte[],int,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.downloadToByteArray(byte[],int,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadToByteArray(byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.isSnapshot()"
  name: "CloudBlob.isSnapshot()"
  nameWithType: "CloudBlob.isSnapshot()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.isSnapshot()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.setSnapshotID(java.lang.String)"
  name: "CloudBlob.setSnapshotID(String)"
  nameWithType: "CloudBlob.setSnapshotID(String)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.setSnapshotID(java.lang.String)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadFromFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.uploadFromFile(String,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.uploadFromFile(String,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadFromFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadToByteArray(byte[],int)"
  name: "CloudBlob.downloadToByteArray(byte[],int)"
  nameWithType: "CloudBlob.downloadToByteArray(byte[],int)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadToByteArray(byte[],int)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,boolean,java.lang.String,com.microsoft.azure.storage.blob.RehydratePriority,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.startCopy(URI,String,boolean,String,RehydratePriority,AccessCondition,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.startCopy(URI,String,boolean,String,RehydratePriority,AccessCondition,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,boolean,java.lang.String,com.microsoft.azure.storage.blob.RehydratePriority,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot()"
  name: "CloudBlob.createSnapshot()"
  nameWithType: "CloudBlob.createSnapshot()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.undelete(com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.undelete(BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.undelete(BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.undelete(com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.startCopy(URI,AccessCondition,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.startCopy(URI,AccessCondition,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadRange(long,java.lang.Long,java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.downloadRange(long,Long,OutputStream,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.downloadRange(long,Long,OutputStream,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadRange(long,java.lang.Long,java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,java.lang.String)"
  name: "CloudBlob.generateSharedAccessSignature(SharedAccessBlobPolicy,String)"
  nameWithType: "CloudBlob.generateSharedAccessSignature(SharedAccessBlobPolicy,String)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,java.lang.String)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadToFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.downloadToFile(String,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.downloadToFile(String,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadToFile(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.openInputStream(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.openInputStream(AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.openInputStream(AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.openInputStream(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.updateLengthFromResponse(java.net.HttpURLConnection)"
  name: "CloudBlob.updateLengthFromResponse(HttpURLConnection)"
  nameWithType: "CloudBlob.updateLengthFromResponse(HttpURLConnection)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.updateLengthFromResponse(java.net.HttpURLConnection)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.startCopyImpl(java.net.URI,java.lang.String,boolean,boolean,java.lang.String,com.microsoft.azure.storage.blob.RehydratePriority,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions)"
  name: "CloudBlob.startCopyImpl(URI,String,boolean,boolean,String,RehydratePriority,AccessCondition,AccessCondition,BlobRequestOptions)"
  nameWithType: "CloudBlob.startCopyImpl(URI,String,boolean,boolean,String,RehydratePriority,AccessCondition,AccessCondition,BlobRequestOptions)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.startCopyImpl(java.net.URI,java.lang.String,boolean,boolean,java.lang.String,com.microsoft.azure.storage.blob.RehydratePriority,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotID()"
  name: "CloudBlob.getSnapshotID()"
  nameWithType: "CloudBlob.getSnapshotID()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotID()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getContainer()"
  name: "CloudBlob.getContainer()"
  nameWithType: "CloudBlob.getContainer()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getContainer()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.startCopy(URI,String,AccessCondition,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.startCopy(URI,String,AccessCondition,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI)"
  name: "CloudBlob.startCopy(URI)"
  nameWithType: "CloudBlob.startCopy(URI)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.startCopy(java.net.URI)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotQualifiedUri()"
  name: "CloudBlob.getSnapshotQualifiedUri()"
  nameWithType: "CloudBlob.getSnapshotQualifiedUri()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getSnapshotQualifiedUri()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.releaseLease(com.microsoft.azure.storage.AccessCondition)"
  name: "CloudBlob.releaseLease(AccessCondition)"
  nameWithType: "CloudBlob.releaseLease(AccessCondition)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.releaseLease(com.microsoft.azure.storage.AccessCondition)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getCanonicalName(boolean)"
  name: "CloudBlob.getCanonicalName(boolean)"
  nameWithType: "CloudBlob.getCanonicalName(boolean)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getCanonicalName(boolean)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.deleteImpl(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions)"
  name: "CloudBlob.deleteImpl(DeleteSnapshotsOption,AccessCondition,BlobRequestOptions)"
  nameWithType: "CloudBlob.deleteImpl(DeleteSnapshotsOption,AccessCondition,BlobRequestOptions)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.deleteImpl(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getUri()"
  name: "CloudBlob.getUri()"
  nameWithType: "CloudBlob.getUri()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getUri()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadAttributes()"
  name: "CloudBlob.downloadAttributes()"
  nameWithType: "CloudBlob.downloadAttributes()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadAttributes()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.setProperties(com.microsoft.azure.storage.blob.BlobProperties)"
  name: "CloudBlob.setProperties(BlobProperties)"
  nameWithType: "CloudBlob.setProperties(BlobProperties)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.setProperties(com.microsoft.azure.storage.blob.BlobProperties)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.setMetadata(java.util.HashMap<java.lang.String,java.lang.String>)"
  name: "CloudBlob.setMetadata(HashMap<String,String>)"
  nameWithType: "CloudBlob.setMetadata(HashMap<String,String>)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.setMetadata(java.util.HashMap<java.lang.String,java.lang.String>)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeInternal(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.downloadRangeInternal(long,Long,byte[],int,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.downloadRangeInternal(long,Long,byte[],int,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeInternal(long,java.lang.Long,byte[],int,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.generateUserDelegationSharedAccessSignature(com.microsoft.azure.storage.UserDelegationKey,com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,com.microsoft.azure.storage.IPRange,com.microsoft.azure.storage.SharedAccessProtocols)"
  name: "CloudBlob.generateUserDelegationSharedAccessSignature(UserDelegationKey,SharedAccessBlobPolicy,SharedAccessBlobHeaders,IPRange,SharedAccessProtocols)"
  nameWithType: "CloudBlob.generateUserDelegationSharedAccessSignature(UserDelegationKey,SharedAccessBlobPolicy,SharedAccessBlobHeaders,IPRange,SharedAccessProtocols)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.generateUserDelegationSharedAccessSignature(com.microsoft.azure.storage.UserDelegationKey,com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,com.microsoft.azure.storage.IPRange,com.microsoft.azure.storage.SharedAccessProtocols)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getStorageUri()"
  name: "CloudBlob.getStorageUri()"
  nameWithType: "CloudBlob.getStorageUri()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getStorageUri()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getStreamWriteSizeInBytes()"
  name: "CloudBlob.getStreamWriteSizeInBytes()"
  nameWithType: "CloudBlob.getStreamWriteSizeInBytes()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getStreamWriteSizeInBytes()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.download(java.io.OutputStream)"
  name: "CloudBlob.download(OutputStream)"
  nameWithType: "CloudBlob.download(OutputStream)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.download(java.io.OutputStream)"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.renewLease(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.renewLease(AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.renewLease(AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.renewLease(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadToFile(java.lang.String)"
  name: "CloudBlob.downloadToFile(String)"
  nameWithType: "CloudBlob.downloadToFile(String)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadToFile(java.lang.String)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadMetadata(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.uploadMetadata(AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.uploadMetadata(AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadMetadata(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.breakLease(java.lang.Integer,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.breakLease(Integer,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.breakLease(Integer,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.breakLease(java.lang.Integer,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadFromFile(java.lang.String)"
  name: "CloudBlob.uploadFromFile(String)"
  nameWithType: "CloudBlob.uploadFromFile(String)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadFromFile(java.lang.String)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadProperties(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.uploadProperties(AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.uploadProperties(AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadProperties(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.upload(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.upload(InputStream,long,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.upload(InputStream,long,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.upload(java.io.InputStream,long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.breakLease(java.lang.Integer)"
  name: "CloudBlob.breakLease(Integer)"
  nameWithType: "CloudBlob.breakLease(Integer)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.breakLease(java.lang.Integer)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getParentNameFromURI(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.blob.CloudBlobContainer)"
  name: "CloudBlob.getParentNameFromURI(StorageUri,String,CloudBlobContainer)"
  nameWithType: "CloudBlob.getParentNameFromURI(StorageUri,String,CloudBlobContainer)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getParentNameFromURI(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.blob.CloudBlobContainer)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getCopyState()"
  name: "CloudBlob.getCopyState()"
  nameWithType: "CloudBlob.getCopyState()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getCopyState()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getStreamMinimumReadSizeInBytes()"
  name: "CloudBlob.getStreamMinimumReadSizeInBytes()"
  nameWithType: "CloudBlob.getStreamMinimumReadSizeInBytes()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getStreamMinimumReadSizeInBytes()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.abortCopy(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.abortCopy(String,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.abortCopy(String,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.abortCopy(java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.deleteIfExists(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.deleteIfExists(DeleteSnapshotsOption,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.deleteIfExists(DeleteSnapshotsOption,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.deleteIfExists(com.microsoft.azure.storage.blob.DeleteSnapshotsOption,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.setStreamMinimumReadSizeInBytes(int)"
  name: "CloudBlob.setStreamMinimumReadSizeInBytes(int)"
  nameWithType: "CloudBlob.setStreamMinimumReadSizeInBytes(int)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.setStreamMinimumReadSizeInBytes(int)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.openInputStream(long,java.lang.Long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.openInputStream(long,Long,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.openInputStream(long,Long,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.openInputStream(long,java.lang.Long,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.assertCorrectBlobType()"
  name: "CloudBlob.assertCorrectBlobType()"
  nameWithType: "CloudBlob.assertCorrectBlobType()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.assertCorrectBlobType()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.createSnapshot(AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.createSnapshot(AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.acquireLease(java.lang.Integer,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.acquireLease(Integer,String,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.acquireLease(Integer,String,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.acquireLease(java.lang.Integer,java.lang.String,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadAttributes(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.downloadAttributes(AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.downloadAttributes(AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadAttributes(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInfo(com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.downloadAccountInfo(BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.downloadAccountInfo(BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInfo(com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getProperties()"
  name: "CloudBlob.getProperties()"
  nameWithType: "CloudBlob.getProperties()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getProperties()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadMetadata()"
  name: "CloudBlob.uploadMetadata()"
  nameWithType: "CloudBlob.uploadMetadata()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadMetadata()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(java.util.HashMap<java.lang.String,java.lang.String>,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.createSnapshot(HashMap<String,String>,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.createSnapshot(HashMap<String,String>,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(java.util.HashMap<java.lang.String,java.lang.String>,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeToByteArray(long,java.lang.Long,byte[],int)"
  name: "CloudBlob.downloadRangeToByteArray(long,Long,byte[],int)"
  nameWithType: "CloudBlob.downloadRangeToByteArray(long,Long,byte[],int)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadRangeToByteArray(long,java.lang.Long,byte[],int)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.deleteIfExists()"
  name: "CloudBlob.deleteIfExists()"
  nameWithType: "CloudBlob.deleteIfExists()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.deleteIfExists()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.undelete()"
  name: "CloudBlob.undelete()"
  nameWithType: "CloudBlob.undelete()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.undelete()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getMetadata()"
  name: "CloudBlob.getMetadata()"
  nameWithType: "CloudBlob.getMetadata()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getMetadata()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.<T,R>validateCPKHeaders(com.microsoft.azure.storage.core.StorageRequest<com.microsoft.azure.storage.blob.CloudBlobClient,T,R>,com.microsoft.azure.storage.blob.BlobRequestOptions,boolean)"
  name: "CloudBlob.<T,R>validateCPKHeaders(StorageRequest<CloudBlobClient,T,R>,BlobRequestOptions,boolean)"
  nameWithType: "CloudBlob.<T,R>validateCPKHeaders(StorageRequest<CloudBlobClient,T,R>,BlobRequestOptions,boolean)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.<T,R>validateCPKHeaders(com.microsoft.azure.storage.core.StorageRequest<com.microsoft.azure.storage.blob.CloudBlobClient,T,R>,com.microsoft.azure.storage.blob.BlobRequestOptions,boolean)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInformationImpl(com.microsoft.azure.storage.RequestOptions)"
  name: "CloudBlob.downloadAccountInformationImpl(RequestOptions)"
  nameWithType: "CloudBlob.downloadAccountInformationImpl(RequestOptions)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInformationImpl(com.microsoft.azure.storage.RequestOptions)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInfo()"
  name: "CloudBlob.downloadAccountInfo()"
  nameWithType: "CloudBlob.downloadAccountInfo()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInfo()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,java.lang.String)"
  name: "CloudBlob.generateSharedAccessSignature(SharedAccessBlobPolicy,SharedAccessBlobHeaders,String)"
  nameWithType: "CloudBlob.generateSharedAccessSignature(SharedAccessBlobPolicy,SharedAccessBlobHeaders,String)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,java.lang.String)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.download(java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.download(OutputStream,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.download(OutputStream,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.download(java.io.OutputStream,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,java.lang.String,com.microsoft.azure.storage.IPRange,com.microsoft.azure.storage.SharedAccessProtocols)"
  name: "CloudBlob.generateSharedAccessSignature(SharedAccessBlobPolicy,SharedAccessBlobHeaders,String,IPRange,SharedAccessProtocols)"
  nameWithType: "CloudBlob.generateSharedAccessSignature(SharedAccessBlobPolicy,SharedAccessBlobHeaders,String,IPRange,SharedAccessProtocols)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(com.microsoft.azure.storage.blob.SharedAccessBlobPolicy,com.microsoft.azure.storage.blob.SharedAccessBlobHeaders,java.lang.String,com.microsoft.azure.storage.IPRange,com.microsoft.azure.storage.SharedAccessProtocols)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.setStreamWriteSizeInBytes(int)"
  name: "CloudBlob.setStreamWriteSizeInBytes(int)"
  nameWithType: "CloudBlob.setStreamWriteSizeInBytes(int)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.setStreamWriteSizeInBytes(int)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getQualifiedStorageUri()"
  name: "CloudBlob.getQualifiedStorageUri()"
  nameWithType: "CloudBlob.getQualifiedStorageUri()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getQualifiedStorageUri()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.releaseLease(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.releaseLease(AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "CloudBlob.releaseLease(AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.releaseLease(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getName()"
  name: "CloudBlob.getName()"
  nameWithType: "CloudBlob.getName()"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getName()"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.downloadRange(long,java.lang.Long,java.io.OutputStream)"
  name: "CloudBlob.downloadRange(long,Long,OutputStream)"
  nameWithType: "CloudBlob.downloadRange(long,Long,OutputStream)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.downloadRange(long,java.lang.Long,java.io.OutputStream)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.getTransformedAddress(com.microsoft.azure.storage.OperationContext)"
  name: "CloudBlob.getTransformedAddress(OperationContext)"
  nameWithType: "CloudBlob.getTransformedAddress(OperationContext)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.getTransformedAddress(com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.renewLease(com.microsoft.azure.storage.AccessCondition)"
  name: "CloudBlob.renewLease(AccessCondition)"
  nameWithType: "CloudBlob.renewLease(AccessCondition)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.renewLease(com.microsoft.azure.storage.AccessCondition)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.uploadFromByteArray(byte[],int,int)"
  name: "CloudBlob.uploadFromByteArray(byte[],int,int)"
  nameWithType: "CloudBlob.uploadFromByteArray(byte[],int,int)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.uploadFromByteArray(byte[],int,int)"
- uid: "java.lang.String,java.lang.String>)"
  name: "String,String>)"
  nameWithType: "String,String>)"
  fullName: "java.lang.String,java.lang.String>)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.setMetadata(java.util.HashMap"
  name: "CloudBlob.setMetadata(HashMap"
  nameWithType: "CloudBlob.setMetadata(HashMap"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.setMetadata(java.util.HashMap"
- uid: "java.lang.String,java.lang.String>,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
  name: "String,String>,AccessCondition,BlobRequestOptions,OperationContext)"
  nameWithType: "String,String>,AccessCondition,BlobRequestOptions,OperationContext)"
  fullName: "java.lang.String,java.lang.String>,com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.blob.BlobRequestOptions,com.microsoft.azure.storage.OperationContext)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(java.util.HashMap"
  name: "CloudBlob.createSnapshot(HashMap"
  nameWithType: "CloudBlob.createSnapshot(HashMap"
  fullName: "com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(java.util.HashMap"
- uid: "T,R>validateCPKHeaders(com.microsoft.azure.storage.core.StorageRequest"
  name: "T,R>validateCPKHeaders(StorageRequest"
  nameWithType: "T,R>validateCPKHeaders(StorageRequest"
  fullName: "T,R>validateCPKHeaders(com.microsoft.azure.storage.core.StorageRequest"
- uid: "com.microsoft.azure.storage.blob.CloudBlobClient,T,R>,com.microsoft.azure.storage.blob.BlobRequestOptions,boolean)"
  name: "CloudBlobClient,T,R>,BlobRequestOptions,boolean)"
  nameWithType: "CloudBlobClient,T,R>,BlobRequestOptions,boolean)"
  fullName: "com.microsoft.azure.storage.blob.CloudBlobClient,T,R>,com.microsoft.azure.storage.blob.BlobRequestOptions,boolean)"
- uid: "com.microsoft.azure.storage.blob.CloudBlob."
  name: "CloudBlob."
  nameWithType: "CloudBlob."
  fullName: "com.microsoft.azure.storage.blob.CloudBlob."
