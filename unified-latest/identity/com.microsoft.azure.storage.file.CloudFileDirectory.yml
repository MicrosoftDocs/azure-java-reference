### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory"
  id: "CloudFileDirectory"
  parent: "com.microsoft.azure.storage.file"
  children:
  - "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(com.microsoft.azure.storage.StorageUri)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(com.microsoft.azure.storage.StorageUri,com.microsoft.azure.storage.StorageCredentials)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.file.CloudFileShare)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(java.net.URI)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(java.net.URI,com.microsoft.azure.storage.StorageCredentials)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.assertValidFilePermissionOrKey()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.closeAllHandlesSegmented()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.closeAllHandlesSegmented(com.microsoft.azure.storage.ResultContinuation,boolean,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.closeHandleSegmented(java.lang.String)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.closeHandleSegmented(java.lang.String,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.create()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.create(com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.createIfNotExists()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.createIfNotExists(com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.delete()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.delete(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.deleteIfExists()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.deleteIfExists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.exists()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.exists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.getDirectoryReference(java.lang.String)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.getFileReference(java.lang.String)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.getMetadata()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.getName()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.getParent()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.getProperties()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.getServiceClient()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.getShare()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.getStorageUri()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.getUri()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories(com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories(java.lang.String,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented(java.lang.Integer,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented(java.lang.String,java.lang.Integer,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.listHandles()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.listHandles(boolean,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.listHandlesSegmented()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.listHandlesSegmented(java.lang.Integer,boolean,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.setFilePermission(java.lang.String)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.setMetadata(java.util.HashMap<java.lang.String,java.lang.String>)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.setProperties(com.microsoft.azure.storage.file.FileDirectoryProperties)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.setShare(com.microsoft.azure.storage.file.CloudFileShare)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.setStorageUri(com.microsoft.azure.storage.StorageUri)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.uploadProperties()"
  - "com.microsoft.azure.storage.file.CloudFileDirectory.uploadProperties(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  langs:
  - "java"
  name: "CloudFileDirectory"
  nameWithType: "CloudFileDirectory"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory"
  type: "Class"
  package: "com.microsoft.azure.storage.file"
  summary: "Represents a virtual directory of files.\n\nDirectories, which are encapsulated as <xref uid=\"com.microsoft.azure.storage.file.CloudFileDirectory\" data-throw-if-not-resolved=\"false\">CloudFileDirectory</xref> objects, hold files and can also contain sub-directories."
  syntax:
    content: "public final class CloudFileDirectory implements ListFileItem"
  inheritance:
  - "java.lang.Object"
  implements:
  - "com.microsoft.azure.storage.file.ListFileItem"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(com.microsoft.azure.storage.StorageUri)"
  id: "CloudFileDirectory(com.microsoft.azure.storage.StorageUri)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "CloudFileDirectory(StorageUri directoryAbsoluteUri)"
  nameWithType: "CloudFileDirectory.CloudFileDirectory(StorageUri directoryAbsoluteUri)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(StorageUri directoryAbsoluteUri)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates an instance of the `CloudFileDirectory` class using an absolute URI to the directory."
  syntax:
    content: "public CloudFileDirectory(StorageUri directoryAbsoluteUri)"
    parameters:
    - id: "directoryAbsoluteUri"
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> that represents the file directory's address."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(com.microsoft.azure.storage.StorageUri,com.microsoft.azure.storage.StorageCredentials)"
  id: "CloudFileDirectory(com.microsoft.azure.storage.StorageUri,com.microsoft.azure.storage.StorageCredentials)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "CloudFileDirectory(StorageUri directoryAbsoluteUri, StorageCredentials credentials)"
  nameWithType: "CloudFileDirectory.CloudFileDirectory(StorageUri directoryAbsoluteUri, StorageCredentials credentials)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(StorageUri directoryAbsoluteUri, StorageCredentials credentials)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates an instance of the `CloudFileDirectory` class using an absolute URI to the directory and credentials."
  syntax:
    content: "public CloudFileDirectory(StorageUri directoryAbsoluteUri, StorageCredentials credentials)"
    parameters:
    - id: "directoryAbsoluteUri"
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> that represents the file directory's address."
    - id: "credentials"
      type: "com.microsoft.azure.storage.StorageCredentials"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageCredentials\" data-throw-if-not-resolved=\"false\">StorageCredentials</xref> object used to authenticate access."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.file.CloudFileShare)"
  id: "CloudFileDirectory(com.microsoft.azure.storage.StorageUri,java.lang.String,com.microsoft.azure.storage.file.CloudFileShare)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "CloudFileDirectory(StorageUri uri, String directoryName, CloudFileShare share)"
  nameWithType: "CloudFileDirectory.CloudFileDirectory(StorageUri uri, String directoryName, CloudFileShare share)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(StorageUri uri, String directoryName, CloudFileShare share)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates an instance of the `CloudFileDirectory` class using the specified address, share, and client."
  syntax:
    content: "protected CloudFileDirectory(StorageUri uri, String directoryName, CloudFileShare share)"
    parameters:
    - id: "uri"
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> that represents the file directory's address."
    - id: "directoryName"
      type: "java.lang.String"
      description: "A <code>String</code> that represents the name of the directory."
    - id: "share"
      type: "com.microsoft.azure.storage.file.CloudFileShare"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.CloudFileShare\" data-throw-if-not-resolved=\"false\">CloudFileShare</xref> object that represents the associated file share."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(java.net.URI)"
  id: "CloudFileDirectory(java.net.URI)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "CloudFileDirectory(URI directoryAbsoluteUri)"
  nameWithType: "CloudFileDirectory.CloudFileDirectory(URI directoryAbsoluteUri)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(URI directoryAbsoluteUri)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates an instance of the `CloudFileDirectory` class using an absolute URI to the directory."
  syntax:
    content: "public CloudFileDirectory(URI directoryAbsoluteUri)"
    parameters:
    - id: "directoryAbsoluteUri"
      type: "java.net.URI"
      description: "A <xref uid=\"\" data-throw-if-not-resolved=\"false\">URI</xref> that represents the file directory's address."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(java.net.URI,com.microsoft.azure.storage.StorageCredentials)"
  id: "CloudFileDirectory(java.net.URI,com.microsoft.azure.storage.StorageCredentials)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "CloudFileDirectory(URI directoryAbsoluteUri, StorageCredentials credentials)"
  nameWithType: "CloudFileDirectory.CloudFileDirectory(URI directoryAbsoluteUri, StorageCredentials credentials)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(URI directoryAbsoluteUri, StorageCredentials credentials)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory*"
  type: "Constructor"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates an instance of the `CloudFileDirectory` class using an absolute URI to the directory and credentials."
  syntax:
    content: "public CloudFileDirectory(URI directoryAbsoluteUri, StorageCredentials credentials)"
    parameters:
    - id: "directoryAbsoluteUri"
      type: "java.net.URI"
      description: "A <xref uid=\"\" data-throw-if-not-resolved=\"false\">URI</xref> that represents the file directory's address."
    - id: "credentials"
      type: "com.microsoft.azure.storage.StorageCredentials"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageCredentials\" data-throw-if-not-resolved=\"false\">StorageCredentials</xref> object used to authenticate access."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.assertValidFilePermissionOrKey()"
  id: "assertValidFilePermissionOrKey()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "assertValidFilePermissionOrKey()"
  nameWithType: "CloudFileDirectory.assertValidFilePermissionOrKey()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.assertValidFilePermissionOrKey()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.assertValidFilePermissionOrKey*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Verifies that the directory's filePermission and properties.filePermissionKey are both not set."
  syntax:
    content: "protected void assertValidFilePermissionOrKey()"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.closeAllHandlesSegmented()"
  id: "closeAllHandlesSegmented()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "closeAllHandlesSegmented()"
  nameWithType: "CloudFileDirectory.closeAllHandlesSegmented()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.closeAllHandlesSegmented()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.closeAllHandlesSegmented*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Close all SMB handles on this file."
  syntax:
    content: "public ResultSegment<Integer> closeAllHandlesSegmented()"
    return:
      type: "com.microsoft.azure.storage.ResultSegment<java.lang.Integer>"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultSegment\" data-throw-if-not-resolved=\"false\">ResultSegment</xref> which has one element which is the number of handles closed and a\n           continuation to follow in case the operation took too long to be completed atomically."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.closeAllHandlesSegmented(com.microsoft.azure.storage.ResultContinuation,boolean,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "closeAllHandlesSegmented(com.microsoft.azure.storage.ResultContinuation,boolean,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "closeAllHandlesSegmented(ResultContinuation continuationToken, boolean recursive, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFileDirectory.closeAllHandlesSegmented(ResultContinuation continuationToken, boolean recursive, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.closeAllHandlesSegmented(ResultContinuation continuationToken, boolean recursive, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.closeAllHandlesSegmented*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Close all SMB handles on this file."
  syntax:
    content: "public ResultSegment<Integer> closeAllHandlesSegmented(ResultContinuation continuationToken, boolean recursive, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "continuationToken"
      type: "com.microsoft.azure.storage.ResultContinuation"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultContinuation\" data-throw-if-not-resolved=\"false\">ResultContinuation</xref> object that represents a continuation token\n            returned by a previous listing operation."
    - id: "recursive"
      type: "boolean"
      description: "Specifies if operation should apply to the directory specified in the URI, its files, its\n            subdirectories and their files."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "com.microsoft.azure.storage.ResultSegment<java.lang.Integer>"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultSegment\" data-throw-if-not-resolved=\"false\">ResultSegment</xref> which has one element which is the number of handles closed and a\n           continuation to follow in case the operation took too long to be completed atomically."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.closeHandleSegmented(java.lang.String)"
  id: "closeHandleSegmented(java.lang.String)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "closeHandleSegmented(String handleID)"
  nameWithType: "CloudFileDirectory.closeHandleSegmented(String handleID)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.closeHandleSegmented(String handleID)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.closeHandleSegmented*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Close all SMB handles on this file."
  syntax:
    content: "public ResultSegment<Integer> closeHandleSegmented(String handleID)"
    parameters:
    - id: "handleID"
      type: "java.lang.String"
      description: "The handle to close."
    return:
      type: "com.microsoft.azure.storage.ResultSegment<java.lang.Integer>"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultSegment\" data-throw-if-not-resolved=\"false\">ResultSegment</xref> which has one element which is the number of handles closed and a\n           continuation to follow in case the operation took too long to be completed atomically."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.closeHandleSegmented(java.lang.String,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "closeHandleSegmented(java.lang.String,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "closeHandleSegmented(String handleID, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFileDirectory.closeHandleSegmented(String handleID, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.closeHandleSegmented(String handleID, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.closeHandleSegmented*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Close all SMB handles on this file."
  syntax:
    content: "public ResultSegment<Integer> closeHandleSegmented(String handleID, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "handleID"
      type: "java.lang.String"
      description: "The handle to close."
    - id: "continuationToken"
      type: "com.microsoft.azure.storage.ResultContinuation"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultContinuation\" data-throw-if-not-resolved=\"false\">ResultContinuation</xref> object that represents a continuation token\n            returned by a previous listing operation."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "com.microsoft.azure.storage.ResultSegment<java.lang.Integer>"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultSegment\" data-throw-if-not-resolved=\"false\">ResultSegment</xref> which has one element which is the number of handles closed and a\n           continuation to follow in case the operation took too long to be completed atomically."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.create()"
  id: "create()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "create()"
  nameWithType: "CloudFileDirectory.create()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.create()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.create*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates the directory."
  syntax:
    content: "public void create()"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.create(com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "create(com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "create(FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFileDirectory.create(FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.create(FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.create*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates the directory using the specified options and operation context."
  syntax:
    content: "public void create(FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.createIfNotExists()"
  id: "createIfNotExists()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "createIfNotExists()"
  nameWithType: "CloudFileDirectory.createIfNotExists()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.createIfNotExists()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.createIfNotExists*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates the directory if it does not exist."
  syntax:
    content: "public boolean createIfNotExists()"
    return:
      type: "boolean"
      description: "<code>true</code> if the directory did not already exist and was created; otherwise, <code>false</code>."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.createIfNotExists(com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "createIfNotExists(com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "createIfNotExists(FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFileDirectory.createIfNotExists(FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.createIfNotExists(FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.createIfNotExists*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Creates the directory if it does not exist, using the specified request options and operation context."
  syntax:
    content: "public boolean createIfNotExists(FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request.\n            Specifying <code>null</code> will use the default request options from the associated service client\n            (<xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "boolean"
      description: "<code>true</code> if the directory did not already exist and was created; otherwise, <code>false</code>."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.delete()"
  id: "delete()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "delete()"
  nameWithType: "CloudFileDirectory.delete()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.delete()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.delete*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Deletes the directory."
  syntax:
    content: "public void delete()"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.delete(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "delete(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "delete(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFileDirectory.delete(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.delete(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.delete*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Deletes the directory using the specified request options and operation context."
  syntax:
    content: "public void delete(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the directory."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.deleteIfExists()"
  id: "deleteIfExists()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "deleteIfExists()"
  nameWithType: "CloudFileDirectory.deleteIfExists()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.deleteIfExists()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.deleteIfExists*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Deletes the directory if it exists."
  syntax:
    content: "public boolean deleteIfExists()"
    return:
      type: "boolean"
      description: "<code>true</code> if the directory did not already exist and was created; otherwise, <code>false</code>."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.deleteIfExists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "deleteIfExists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "deleteIfExists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFileDirectory.deleteIfExists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.deleteIfExists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.deleteIfExists*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Deletes the directory if it exists using the specified request options and operation context."
  syntax:
    content: "public boolean deleteIfExists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the directory."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "boolean"
      description: "<code>true</code> if the directory existed and was deleted; otherwise, <code>false</code>."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes()"
  id: "downloadAttributes()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "downloadAttributes()"
  nameWithType: "CloudFileDirectory.downloadAttributes()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Downloads the directory's properties."
  syntax:
    content: "public void downloadAttributes()"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "downloadAttributes(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "downloadAttributes(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFileDirectory.downloadAttributes(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Downloads the directory's properties using the specified request options and operation context."
  syntax:
    content: "public void downloadAttributes(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the directory."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.exists()"
  id: "exists()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "exists()"
  nameWithType: "CloudFileDirectory.exists()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.exists()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.exists*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns a value that indicates whether the directory exists."
  syntax:
    content: "public boolean exists()"
    return:
      type: "boolean"
      description: "<code>true</code> if the directory exists, otherwise <code>false</code>."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.exists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "exists(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "exists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFileDirectory.exists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.exists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.exists*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns a value that indicates whether the directory exists, using the specified request options and operation context."
  syntax:
    content: "public boolean exists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the share."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "boolean"
      description: "<code>true</code> if the directory exists, otherwise <code>false</code>."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getDirectoryReference(java.lang.String)"
  id: "getDirectoryReference(java.lang.String)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "getDirectoryReference(String itemName)"
  nameWithType: "CloudFileDirectory.getDirectoryReference(String itemName)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getDirectoryReference(String itemName)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.getDirectoryReference*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns a reference to a <xref uid=\"com.microsoft.azure.storage.file.CloudFileDirectory\" data-throw-if-not-resolved=\"false\">CloudFileDirectory</xref> object that represents a directory in this directory."
  syntax:
    content: "public CloudFileDirectory getDirectoryReference(String itemName)"
    parameters:
    - id: "itemName"
      type: "java.lang.String"
      description: "A <code>String</code> that represents the name of the directory."
    return:
      type: "com.microsoft.azure.storage.file.CloudFileDirectory"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.CloudFileDirectory\" data-throw-if-not-resolved=\"false\">CloudFileDirectory</xref> object that represents a reference to the specified directory."
  exceptions:
  - type: "java.net.URISyntaxException"
    description: "If the resource URI is invalid."
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If the resource URI is invalid."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getFileReference(java.lang.String)"
  id: "getFileReference(java.lang.String)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "getFileReference(String fileName)"
  nameWithType: "CloudFileDirectory.getFileReference(String fileName)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getFileReference(String fileName)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.getFileReference*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns a reference to a <xref uid=\"com.microsoft.azure.storage.file.CloudFile\" data-throw-if-not-resolved=\"false\">CloudFile</xref> object that represents a file in this directory."
  syntax:
    content: "public CloudFile getFileReference(String fileName)"
    parameters:
    - id: "fileName"
      type: "java.lang.String"
      description: "A <code>String</code> that represents the name of the file."
    return:
      type: "com.microsoft.azure.storage.file.CloudFile"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.CloudFile\" data-throw-if-not-resolved=\"false\">CloudFile</xref> object that represents a reference to the specified file."
  exceptions:
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getMetadata()"
  id: "getMetadata()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "getMetadata()"
  nameWithType: "CloudFileDirectory.getMetadata()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getMetadata()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.getMetadata*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the metadata for the directory. This value is initialized with the metadata from the directory by a call to <xref uid=\"com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes*\" data-throw-if-not-resolved=\"false\">#downloadAttributes</xref>, and is set on the directory with a call to <xref uid=\"com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata*\" data-throw-if-not-resolved=\"false\">#uploadMetadata</xref>."
  syntax:
    content: "public HashMap<String,String> getMetadata()"
    return:
      type: "java.util.HashMap<java.lang.String,java.lang.String>"
      description: "A <code>java.util.HashMap</code> object that represents the metadata for the directory."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getName()"
  id: "getName()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "getName()"
  nameWithType: "CloudFileDirectory.getName()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getName()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.getName*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the name of this directory."
  syntax:
    content: "public String getName()"
    return:
      type: "java.lang.String"
      description: "An <code>String</code> that represents the name of the directory."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getParent()"
  id: "getParent()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "getParent()"
  nameWithType: "CloudFileDirectory.getParent()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getParent()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.getParent*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the <xref uid=\"com.microsoft.azure.storage.file.CloudFileDirectory\" data-throw-if-not-resolved=\"false\">CloudFileDirectory</xref> parent directory associated with this directory."
  syntax:
    content: "public CloudFileDirectory getParent()"
    return:
      type: "com.microsoft.azure.storage.file.CloudFileDirectory"
      description: "An <xref uid=\"com.microsoft.azure.storage.file.CloudFileDirectory\" data-throw-if-not-resolved=\"false\">CloudFileDirectory</xref> object that represents the parent directory associated with the directory."
  exceptions:
  - type: "java.net.URISyntaxException"
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getProperties()"
  id: "getProperties()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "getProperties()"
  nameWithType: "CloudFileDirectory.getProperties()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getProperties()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.getProperties*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the <xref uid=\"com.microsoft.azure.storage.file.FileDirectoryProperties\" data-throw-if-not-resolved=\"false\">FileDirectoryProperties</xref> object that holds the directory's system properties."
  syntax:
    content: "public FileDirectoryProperties getProperties()"
    return:
      type: "com.microsoft.azure.storage.file.FileDirectoryProperties"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileDirectoryProperties\" data-throw-if-not-resolved=\"false\">FileDirectoryProperties</xref> object that holds the system properties associated with the\n         directory."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getServiceClient()"
  id: "getServiceClient()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "getServiceClient()"
  nameWithType: "CloudFileDirectory.getServiceClient()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getServiceClient()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.getServiceClient*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the File service client associated with this directory."
  syntax:
    content: "public CloudFileClient getServiceClient()"
    return:
      type: "com.microsoft.azure.storage.file.CloudFileClient"
      description: "An <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref> object that represents the service client associated with the directory."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getShare()"
  id: "getShare()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "getShare()"
  nameWithType: "CloudFileDirectory.getShare()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getShare()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.getShare*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the share for this directory."
  syntax:
    content: "public CloudFileShare getShare()"
    return:
      type: "com.microsoft.azure.storage.file.CloudFileShare"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.CloudFileShare\" data-throw-if-not-resolved=\"false\">CloudFileShare</xref> that represents the share for this directory."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getStorageUri()"
  id: "getStorageUri()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "getStorageUri()"
  nameWithType: "CloudFileDirectory.getStorageUri()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getStorageUri()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.getStorageUri*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the list of URIs for all locations."
  syntax:
    content: "public final StorageUri getStorageUri()"
    return:
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> that represents the list of URIs for all locations."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getUri()"
  id: "getUri()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "getUri()"
  nameWithType: "CloudFileDirectory.getUri()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getUri()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.getUri*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns the URI for this directory."
  syntax:
    content: "public URI getUri()"
    return:
      type: "java.net.URI"
      description: "A <code>java.net.URI</code> object that represents the URI for this directory."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories()"
  id: "listFilesAndDirectories()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "listFilesAndDirectories()"
  nameWithType: "CloudFileDirectory.listFilesAndDirectories()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns an enumerable collection of file and directory items for the directory."
  syntax:
    content: "public Iterable<ListFileItem> listFilesAndDirectories()"
    return:
      type: "java.lang.Iterable<com.microsoft.azure.storage.file.ListFileItem>"
      description: "An enumerable collection of <xref uid=\"com.microsoft.azure.storage.file.ListFileItem\" data-throw-if-not-resolved=\"false\">ListFileItem</xref> objects that represent the file and directory items in\n         this directory."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories(com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "listFilesAndDirectories(com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "listFilesAndDirectories(FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFileDirectory.listFilesAndDirectories(FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories(FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns an enumerable collection of file and directory items for the directory."
  syntax:
    content: "public Iterable<ListFileItem> listFilesAndDirectories(FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "java.lang.Iterable<com.microsoft.azure.storage.file.ListFileItem>"
      description: "An enumerable collection of <xref uid=\"com.microsoft.azure.storage.file.ListFileItem\" data-throw-if-not-resolved=\"false\">ListFileItem</xref> objects that represent the file and directory items in\n         this directory."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories(java.lang.String,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "listFilesAndDirectories(java.lang.String,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "listFilesAndDirectories(String prefix, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFileDirectory.listFilesAndDirectories(String prefix, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories(String prefix, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns an enumerable collection of file and directory items for the directory."
  syntax:
    content: "public Iterable<ListFileItem> listFilesAndDirectories(String prefix, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "prefix"
      type: "java.lang.String"
      description: "A string containing the file or directory name prefix."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "java.lang.Iterable<com.microsoft.azure.storage.file.ListFileItem>"
      description: "An enumerable collection of <xref uid=\"com.microsoft.azure.storage.file.ListFileItem\" data-throw-if-not-resolved=\"false\">ListFileItem</xref> objects that represent the file and directory items in\n         this directory."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented()"
  id: "listFilesAndDirectoriesSegmented()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "listFilesAndDirectoriesSegmented()"
  nameWithType: "CloudFileDirectory.listFilesAndDirectoriesSegmented()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns a result segment of an enumerable collection of files and directories for this File service client."
  syntax:
    content: "public ResultSegment<ListFileItem> listFilesAndDirectoriesSegmented()"
    return:
      type: "com.microsoft.azure.storage.ResultSegment<com.microsoft.azure.storage.file.ListFileItem>"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultSegment\" data-throw-if-not-resolved=\"false\">ResultSegment</xref> object that contains a segment of the enumerable collection of\n         <xref uid=\"com.microsoft.azure.storage.file.ListFileItem\" data-throw-if-not-resolved=\"false\">ListFileItem</xref> objects that represent the files and directories."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented(java.lang.Integer,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "listFilesAndDirectoriesSegmented(java.lang.Integer,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "listFilesAndDirectoriesSegmented(Integer maxResults, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFileDirectory.listFilesAndDirectoriesSegmented(Integer maxResults, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented(Integer maxResults, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns a result segment of an enumerable collection of files and directories for this directory, using the specified listing details options, request options, and operation context."
  syntax:
    content: "public ResultSegment<ListFileItem> listFilesAndDirectoriesSegmented(Integer maxResults, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "maxResults"
      type: "java.lang.Integer"
      description: "The maximum number of results to retrieve.  If <code>null</code> or greater\n            than 5000, the server will return up to 5,000 items.  Must be at least 1."
    - id: "continuationToken"
      type: "com.microsoft.azure.storage.ResultContinuation"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultContinuation\" data-throw-if-not-resolved=\"false\">ResultContinuation</xref> object that represents a continuation token\n            returned by a previous listing operation."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for\n            the request. Specifying <code>null</code> will use the default request options\n            from the associated service client ( <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current\n            operation. This object is used to track requests to the storage service,\n            and to provide additional runtime information about the operation."
    return:
      type: "com.microsoft.azure.storage.ResultSegment<com.microsoft.azure.storage.file.ListFileItem>"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultSegment\" data-throw-if-not-resolved=\"false\">ResultSegment</xref> object that contains a segment of the enumerable collection of\n         <xref uid=\"com.microsoft.azure.storage.file.ListFileItem\" data-throw-if-not-resolved=\"false\">ListFileItem</xref> objects that represent the files and directories in this directory."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented(java.lang.String,java.lang.Integer,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "listFilesAndDirectoriesSegmented(java.lang.String,java.lang.Integer,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "listFilesAndDirectoriesSegmented(String prefix, Integer maxResults, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFileDirectory.listFilesAndDirectoriesSegmented(String prefix, Integer maxResults, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented(String prefix, Integer maxResults, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Returns a result segment of an enumerable collection of files and directories for this directory, using the specified listing details options, request options, and operation context."
  syntax:
    content: "public ResultSegment<ListFileItem> listFilesAndDirectoriesSegmented(String prefix, Integer maxResults, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "prefix"
      type: "java.lang.String"
      description: "A string containing the file or directory name prefix."
    - id: "maxResults"
      type: "java.lang.Integer"
      description: "The maximum number of results to retrieve.  If <code>null</code> or greater\n            than 5000, the server will return up to 5,000 items.  Must be at least 1."
    - id: "continuationToken"
      type: "com.microsoft.azure.storage.ResultContinuation"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultContinuation\" data-throw-if-not-resolved=\"false\">ResultContinuation</xref> object that represents a continuation token\n            returned by a previous listing operation."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for\n            the request. Specifying <code>null</code> will use the default request options\n            from the associated service client ( <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current\n            operation. This object is used to track requests to the storage service,\n            and to provide additional runtime information about the operation."
    return:
      type: "com.microsoft.azure.storage.ResultSegment<com.microsoft.azure.storage.file.ListFileItem>"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultSegment\" data-throw-if-not-resolved=\"false\">ResultSegment</xref> object that contains a segment of the enumerable collection of\n         <xref uid=\"com.microsoft.azure.storage.file.ListFileItem\" data-throw-if-not-resolved=\"false\">ListFileItem</xref> objects that represent the files and directories in this directory."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.listHandles()"
  id: "listHandles()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "listHandles()"
  nameWithType: "CloudFileDirectory.listHandles()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.listHandles()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.listHandles*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Gets the SMB handles open on this file."
  syntax:
    content: "public Iterable<FileHandle> listHandles()"
    return:
      type: "java.lang.Iterable<com.microsoft.azure.storage.file.FileHandle>"
      description: "An <code>Iterable</code> of the handles that will lazily request new segments."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.listHandles(boolean,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "listHandles(boolean,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "listHandles(boolean recursive, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFileDirectory.listHandles(boolean recursive, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.listHandles(boolean recursive, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.listHandles*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Gets the SMB handles open on this file."
  syntax:
    content: "public Iterable<FileHandle> listHandles(boolean recursive, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "recursive"
      type: "boolean"
      description: "Specifies if operation should apply to the directory specified in the URI, its files, its\n            subdirectories and their files."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "java.lang.Iterable<com.microsoft.azure.storage.file.FileHandle>"
      description: "An <code>Iterable</code> of the handles that will lazily request new segments."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.listHandlesSegmented()"
  id: "listHandlesSegmented()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "listHandlesSegmented()"
  nameWithType: "CloudFileDirectory.listHandlesSegmented()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.listHandlesSegmented()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.listHandlesSegmented*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Gets the SMB handles open on this file."
  syntax:
    content: "public ResultSegment<FileHandle> listHandlesSegmented()"
    return:
      type: "com.microsoft.azure.storage.ResultSegment<com.microsoft.azure.storage.file.FileHandle>"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultSegment\" data-throw-if-not-resolved=\"false\">ResultSegment</xref> object that contains a segment of the enumerable collection of\n         <xref uid=\"com.microsoft.azure.storage.file.ListFileItem\" data-throw-if-not-resolved=\"false\">ListFileItem</xref> objects that represent the files and directories."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.listHandlesSegmented(java.lang.Integer,boolean,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "listHandlesSegmented(java.lang.Integer,boolean,com.microsoft.azure.storage.ResultContinuation,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "listHandlesSegmented(Integer maxResults, boolean recursive, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFileDirectory.listHandlesSegmented(Integer maxResults, boolean recursive, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.listHandlesSegmented(Integer maxResults, boolean recursive, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.listHandlesSegmented*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Gets the SMB handles open on this file."
  syntax:
    content: "public ResultSegment<FileHandle> listHandlesSegmented(Integer maxResults, boolean recursive, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "maxResults"
      type: "java.lang.Integer"
      description: "The maximum number of results to retrieve.  If <code>null</code> or greater\n            than 5000, the server will return up to 5,000 items.  Must be at least 1."
    - id: "recursive"
      type: "boolean"
      description: "Specifies if operation should apply to the directory specified in the URI, its files, its\n            subdirectories and their files."
    - id: "continuationToken"
      type: "com.microsoft.azure.storage.ResultContinuation"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultContinuation\" data-throw-if-not-resolved=\"false\">ResultContinuation</xref> object that represents a continuation token\n            returned by a previous listing operation."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object which represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
    return:
      type: "com.microsoft.azure.storage.ResultSegment<com.microsoft.azure.storage.file.FileHandle>"
      description: "A <xref uid=\"com.microsoft.azure.storage.ResultSegment\" data-throw-if-not-resolved=\"false\">ResultSegment</xref> object that contains a segment of the enumerable collection of\n         <xref uid=\"com.microsoft.azure.storage.file.ListFileItem\" data-throw-if-not-resolved=\"false\">ListFileItem</xref> objects that represent the files and directories."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.setFilePermission(java.lang.String)"
  id: "setFilePermission(java.lang.String)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "setFilePermission(String filePermission)"
  nameWithType: "CloudFileDirectory.setFilePermission(String filePermission)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.setFilePermission(String filePermission)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.setFilePermission*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Sets the directory's file permission"
  syntax:
    content: "public void setFilePermission(String filePermission)"
    parameters:
    - id: "filePermission"
      type: "java.lang.String"
      description: "A <code>String</code> that represents the directory's file permission."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.setMetadata(java.util.HashMap<java.lang.String,java.lang.String>)"
  id: "setMetadata(java.util.HashMap<java.lang.String,java.lang.String>)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "setMetadata(HashMap<String,String> metadata)"
  nameWithType: "CloudFileDirectory.setMetadata(HashMap<String,String> metadata)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.setMetadata(HashMap<String,String> metadata)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.setMetadata*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Sets the metadata collection of name-value pairs to be set on the directory with an <xref uid=\"com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata*\" data-throw-if-not-resolved=\"false\">#uploadMetadata</xref> call. This collection will overwrite any existing directory metadata. If this is set to an empty collection, the directory metadata will be cleared on an <xref uid=\"com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata*\" data-throw-if-not-resolved=\"false\">#uploadMetadata</xref> call."
  syntax:
    content: "public void setMetadata(HashMap<String,String> metadata)"
    parameters:
    - id: "metadata"
      type: "java.util.HashMap<java.lang.String,java.lang.String>"
      description: "A <code>java.util.HashMap</code> object that represents the metadata being assigned to the directory."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.setProperties(com.microsoft.azure.storage.file.FileDirectoryProperties)"
  id: "setProperties(com.microsoft.azure.storage.file.FileDirectoryProperties)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "setProperties(FileDirectoryProperties properties)"
  nameWithType: "CloudFileDirectory.setProperties(FileDirectoryProperties properties)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.setProperties(FileDirectoryProperties properties)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.setProperties*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Sets the properties for the directory."
  syntax:
    content: "protected final void setProperties(FileDirectoryProperties properties)"
    parameters:
    - id: "properties"
      type: "com.microsoft.azure.storage.file.FileDirectoryProperties"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileDirectoryProperties\" data-throw-if-not-resolved=\"false\">FileDirectoryProperties</xref> object that represents the properties being assigned to the\n            directory."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.setShare(com.microsoft.azure.storage.file.CloudFileShare)"
  id: "setShare(com.microsoft.azure.storage.file.CloudFileShare)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "setShare(CloudFileShare share)"
  nameWithType: "CloudFileDirectory.setShare(CloudFileShare share)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.setShare(CloudFileShare share)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.setShare*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Sets the share for the directory."
  syntax:
    content: "protected final void setShare(CloudFileShare share)"
    parameters:
    - id: "share"
      type: "com.microsoft.azure.storage.file.CloudFileShare"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.CloudFileShare\" data-throw-if-not-resolved=\"false\">CloudFileShare</xref> object that represents the share being assigned to the directory."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.setStorageUri(com.microsoft.azure.storage.StorageUri)"
  id: "setStorageUri(com.microsoft.azure.storage.StorageUri)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "setStorageUri(StorageUri storageUri)"
  nameWithType: "CloudFileDirectory.setStorageUri(StorageUri storageUri)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.setStorageUri(StorageUri storageUri)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.setStorageUri*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Sets the list of URIs for all locations."
  syntax:
    content: "protected void setStorageUri(StorageUri storageUri)"
    parameters:
    - id: "storageUri"
      type: "com.microsoft.azure.storage.StorageUri"
      description: "A <xref uid=\"com.microsoft.azure.storage.StorageUri\" data-throw-if-not-resolved=\"false\">StorageUri</xref> that represents the list of URIs for all locations."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata()"
  id: "uploadMetadata()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "uploadMetadata()"
  nameWithType: "CloudFileDirectory.uploadMetadata()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads the directory's metadata."
  syntax:
    content: "public void uploadMetadata()"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "uploadMetadata(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "uploadMetadata(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFileDirectory.uploadMetadata(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads the directory's metadata using the specified request options and operation context."
  syntax:
    content: "public void uploadMetadata(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the directory."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.uploadProperties()"
  id: "uploadProperties()"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "uploadProperties()"
  nameWithType: "CloudFileDirectory.uploadProperties()"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.uploadProperties()"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.uploadProperties*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads the directory's properties to the storage service.\n\nUse <xref uid=\"com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes*\" data-throw-if-not-resolved=\"false\">CloudFileDirectory#downloadAttributes</xref> to retrieve the latest values for the directory's properties and metadata from the Microsoft Azure storage service."
  syntax:
    content: "public final void uploadProperties()"
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.uploadProperties(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  id: "uploadProperties(com.microsoft.azure.storage.AccessCondition,com.microsoft.azure.storage.file.FileRequestOptions,com.microsoft.azure.storage.OperationContext)"
  parent: "com.microsoft.azure.storage.file.CloudFileDirectory"
  langs:
  - "java"
  name: "uploadProperties(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  nameWithType: "CloudFileDirectory.uploadProperties(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.uploadProperties(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
  overload: "com.microsoft.azure.storage.file.CloudFileDirectory.uploadProperties*"
  type: "Method"
  package: "com.microsoft.azure.storage.file"
  summary: "Uploads the directory's properties using the access condition, request options, and operation context.\n\nUse <xref uid=\"com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes*\" data-throw-if-not-resolved=\"false\">CloudFileDirectory#downloadAttributes</xref> to retrieve the latest values for the directory's properties and metadata from the Microsoft Azure storage service."
  syntax:
    content: "public final void uploadProperties(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)"
    parameters:
    - id: "accessCondition"
      type: "com.microsoft.azure.storage.AccessCondition"
      description: "An <xref uid=\"com.microsoft.azure.storage.AccessCondition\" data-throw-if-not-resolved=\"false\">AccessCondition</xref> object that represents the access conditions for the directory."
    - id: "options"
      type: "com.microsoft.azure.storage.file.FileRequestOptions"
      description: "A <xref uid=\"com.microsoft.azure.storage.file.FileRequestOptions\" data-throw-if-not-resolved=\"false\">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying\n            <code>null</code> will use the default request options from the associated service client (\n            <xref uid=\"com.microsoft.azure.storage.file.CloudFileClient\" data-throw-if-not-resolved=\"false\">CloudFileClient</xref>)."
    - id: "opContext"
      type: "com.microsoft.azure.storage.OperationContext"
      description: "An <xref uid=\"com.microsoft.azure.storage.OperationContext\" data-throw-if-not-resolved=\"false\">OperationContext</xref> object that represents the context for the current operation. This object\n            is used to track requests to the storage service, and to provide additional runtime information about\n            the operation."
  exceptions:
  - type: "com.microsoft.azure.storage.StorageException"
    description: "If a storage service error occurred."
  - type: "java.net.URISyntaxException"
    description: "If a storage service error occurred."
references:
- uid: "java.net.URI"
  spec.java:
  - uid: "java.net.URI"
    name: "URI"
    fullName: "java.net.URI"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory*"
  name: "CloudFileDirectory"
  nameWithType: "CloudFileDirectory.CloudFileDirectory"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.StorageUri"
  name: "StorageUri"
  nameWithType: "StorageUri"
  fullName: "com.microsoft.azure.storage.StorageUri"
- uid: "com.microsoft.azure.storage.StorageCredentials"
  name: "StorageCredentials"
  nameWithType: "StorageCredentials"
  fullName: "com.microsoft.azure.storage.StorageCredentials"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.microsoft.azure.storage.file.CloudFileShare"
  name: "CloudFileShare"
  nameWithType: "CloudFileShare"
  fullName: "com.microsoft.azure.storage.file.CloudFileShare"
- uid: "com.microsoft.azure.storage.StorageException"
  name: "StorageException"
  nameWithType: "StorageException"
  fullName: "com.microsoft.azure.storage.StorageException"
- uid: "java.net.URISyntaxException"
  spec.java:
  - uid: "java.net.URISyntaxException"
    name: "URISyntaxException"
    fullName: "java.net.URISyntaxException"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.create*"
  name: "create"
  nameWithType: "CloudFileDirectory.create"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.create"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.FileRequestOptions"
  name: "FileRequestOptions"
  nameWithType: "FileRequestOptions"
  fullName: "com.microsoft.azure.storage.file.FileRequestOptions"
- uid: "com.microsoft.azure.storage.OperationContext"
  name: "OperationContext"
  nameWithType: "OperationContext"
  fullName: "com.microsoft.azure.storage.OperationContext"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.createIfNotExists*"
  name: "createIfNotExists"
  nameWithType: "CloudFileDirectory.createIfNotExists"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.createIfNotExists"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.delete*"
  name: "delete"
  nameWithType: "CloudFileDirectory.delete"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.delete"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.AccessCondition"
  name: "AccessCondition"
  nameWithType: "AccessCondition"
  fullName: "com.microsoft.azure.storage.AccessCondition"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.deleteIfExists*"
  name: "deleteIfExists"
  nameWithType: "CloudFileDirectory.deleteIfExists"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.deleteIfExists"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.exists*"
  name: "exists"
  nameWithType: "CloudFileDirectory.exists"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.exists"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata*"
  name: "uploadMetadata"
  nameWithType: "CloudFileDirectory.uploadMetadata"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.uploadProperties*"
  name: "uploadProperties"
  nameWithType: "CloudFileDirectory.uploadProperties"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.uploadProperties"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes*"
  name: "downloadAttributes"
  nameWithType: "CloudFileDirectory.downloadAttributes"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes"
  package: "com.microsoft.azure.storage.file"
- uid: "java.lang.Iterable<com.microsoft.azure.storage.file.ListFileItem>"
  spec.java:
  - uid: "java.lang.Iterable"
    name: "Iterable"
    fullName: "java.lang.Iterable"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.file.ListFileItem"
    name: "ListFileItem"
    fullName: "com.microsoft.azure.storage.file.ListFileItem"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories*"
  name: "listFilesAndDirectories"
  nameWithType: "CloudFileDirectory.listFilesAndDirectories"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.ResultSegment<com.microsoft.azure.storage.file.ListFileItem>"
  spec.java:
  - uid: "com.microsoft.azure.storage.ResultSegment"
    name: "ResultSegment"
    fullName: "com.microsoft.azure.storage.ResultSegment"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.file.ListFileItem"
    name: "ListFileItem"
    fullName: "com.microsoft.azure.storage.file.ListFileItem"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented*"
  name: "listFilesAndDirectoriesSegmented"
  nameWithType: "CloudFileDirectory.listFilesAndDirectoriesSegmented"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented"
  package: "com.microsoft.azure.storage.file"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "com.microsoft.azure.storage.ResultContinuation"
  name: "ResultContinuation"
  nameWithType: "ResultContinuation"
  fullName: "com.microsoft.azure.storage.ResultContinuation"
- uid: "java.lang.Iterable<com.microsoft.azure.storage.file.FileHandle>"
  spec.java:
  - uid: "java.lang.Iterable"
    name: "Iterable"
    fullName: "java.lang.Iterable"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.file.FileHandle"
    name: "FileHandle"
    fullName: "com.microsoft.azure.storage.file.FileHandle"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.listHandles*"
  name: "listHandles"
  nameWithType: "CloudFileDirectory.listHandles"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.listHandles"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.ResultSegment<com.microsoft.azure.storage.file.FileHandle>"
  spec.java:
  - uid: "com.microsoft.azure.storage.ResultSegment"
    name: "ResultSegment"
    fullName: "com.microsoft.azure.storage.ResultSegment"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.storage.file.FileHandle"
    name: "FileHandle"
    fullName: "com.microsoft.azure.storage.file.FileHandle"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.listHandlesSegmented*"
  name: "listHandlesSegmented"
  nameWithType: "CloudFileDirectory.listHandlesSegmented"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.listHandlesSegmented"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.ResultSegment<java.lang.Integer>"
  spec.java:
  - uid: "com.microsoft.azure.storage.ResultSegment"
    name: "ResultSegment"
    fullName: "com.microsoft.azure.storage.ResultSegment"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.closeAllHandlesSegmented*"
  name: "closeAllHandlesSegmented"
  nameWithType: "CloudFileDirectory.closeAllHandlesSegmented"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.closeAllHandlesSegmented"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.closeHandleSegmented*"
  name: "closeHandleSegmented"
  nameWithType: "CloudFileDirectory.closeHandleSegmented"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.closeHandleSegmented"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFile"
  name: "CloudFile"
  nameWithType: "CloudFile"
  fullName: "com.microsoft.azure.storage.file.CloudFile"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getFileReference*"
  name: "getFileReference"
  nameWithType: "CloudFileDirectory.getFileReference"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getFileReference"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getDirectoryReference*"
  name: "getDirectoryReference"
  nameWithType: "CloudFileDirectory.getDirectoryReference"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getDirectoryReference"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getUri*"
  name: "getUri"
  nameWithType: "CloudFileDirectory.getUri"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getUri"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getStorageUri*"
  name: "getStorageUri"
  nameWithType: "CloudFileDirectory.getStorageUri"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getStorageUri"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileClient"
  name: "CloudFileClient"
  nameWithType: "CloudFileClient"
  fullName: "com.microsoft.azure.storage.file.CloudFileClient"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getServiceClient*"
  name: "getServiceClient"
  nameWithType: "CloudFileDirectory.getServiceClient"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getServiceClient"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getName*"
  name: "getName"
  nameWithType: "CloudFileDirectory.getName"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getName"
  package: "com.microsoft.azure.storage.file"
- uid: "java.util.HashMap<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.HashMap"
    name: "HashMap"
    fullName: "java.util.HashMap"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getMetadata*"
  name: "getMetadata"
  nameWithType: "CloudFileDirectory.getMetadata"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getMetadata"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.FileDirectoryProperties"
  name: "FileDirectoryProperties"
  nameWithType: "FileDirectoryProperties"
  fullName: "com.microsoft.azure.storage.file.FileDirectoryProperties"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getProperties*"
  name: "getProperties"
  nameWithType: "CloudFileDirectory.getProperties"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getProperties"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getParent*"
  name: "getParent"
  nameWithType: "CloudFileDirectory.getParent"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getParent"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.getShare*"
  name: "getShare"
  nameWithType: "CloudFileDirectory.getShare"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.getShare"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.setMetadata*"
  name: "setMetadata"
  nameWithType: "CloudFileDirectory.setMetadata"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.setMetadata"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.setShare*"
  name: "setShare"
  nameWithType: "CloudFileDirectory.setShare"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.setShare"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.setProperties*"
  name: "setProperties"
  nameWithType: "CloudFileDirectory.setProperties"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.setProperties"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.setStorageUri*"
  name: "setStorageUri"
  nameWithType: "CloudFileDirectory.setStorageUri"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.setStorageUri"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.setFilePermission*"
  name: "setFilePermission"
  nameWithType: "CloudFileDirectory.setFilePermission"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.setFilePermission"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.CloudFileDirectory.assertValidFilePermissionOrKey*"
  name: "assertValidFilePermissionOrKey"
  nameWithType: "CloudFileDirectory.assertValidFilePermissionOrKey"
  fullName: "com.microsoft.azure.storage.file.CloudFileDirectory.assertValidFilePermissionOrKey"
  package: "com.microsoft.azure.storage.file"
- uid: "com.microsoft.azure.storage.file.ListFileItem"
  name: "ListFileItem"
  nameWithType: "ListFileItem"
  fullName: "com.microsoft.azure.storage.file.ListFileItem"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.lang.Iterable"
  name: "Iterable"
  nameWithType: "Iterable"
  fullName: "java.lang.Iterable"
- uid: "com.microsoft.azure.storage.ResultSegment"
  name: "ResultSegment"
  nameWithType: "ResultSegment"
  fullName: "com.microsoft.azure.storage.ResultSegment"
- uid: "com.microsoft.azure.storage.file.FileHandle"
  name: "FileHandle"
  nameWithType: "FileHandle"
  fullName: "com.microsoft.azure.storage.file.FileHandle"
- uid: "java.util.HashMap"
  name: "HashMap"
  nameWithType: "HashMap"
  fullName: "java.util.HashMap"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
